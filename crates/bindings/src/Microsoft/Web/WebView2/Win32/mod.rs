#![allow(
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals,
    clashing_extern_declarations,
    clippy::all
)]
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_BOUNDS_MODE(pub i32);
pub const COREWEBVIEW2_BOUNDS_MODE_USE_RAW_PIXELS: COREWEBVIEW2_BOUNDS_MODE =
    COREWEBVIEW2_BOUNDS_MODE(0i32);
pub const COREWEBVIEW2_BOUNDS_MODE_USE_RASTERIZATION_SCALE: COREWEBVIEW2_BOUNDS_MODE =
    COREWEBVIEW2_BOUNDS_MODE(1i32);
impl ::core::marker::Copy for COREWEBVIEW2_BOUNDS_MODE {}
impl ::core::clone::Clone for COREWEBVIEW2_BOUNDS_MODE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_BOUNDS_MODE {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_BOUNDS_MODE {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_BOUNDS_MODE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_BOUNDS_MODE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND(pub i32);
pub const COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND_NORMAL: COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND =
    COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND(0i32);
pub const COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND_FAILED: COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND =
    COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND(1i32);
impl ::core::marker::Copy for COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND {}
impl ::core::clone::Clone for COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT(pub i32);
pub const COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT_PNG: COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT =
    COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT(0i32);
pub const COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT_JPEG:
    COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT = COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT(1i32);
impl ::core::marker::Copy for COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT {}
impl ::core::clone::Clone for COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_CLIENT_CERTIFICATE_KIND(pub i32);
pub const COREWEBVIEW2_CLIENT_CERTIFICATE_KIND_SMART_CARD: COREWEBVIEW2_CLIENT_CERTIFICATE_KIND =
    COREWEBVIEW2_CLIENT_CERTIFICATE_KIND(0i32);
pub const COREWEBVIEW2_CLIENT_CERTIFICATE_KIND_PIN: COREWEBVIEW2_CLIENT_CERTIFICATE_KIND =
    COREWEBVIEW2_CLIENT_CERTIFICATE_KIND(1i32);
pub const COREWEBVIEW2_CLIENT_CERTIFICATE_KIND_OTHER: COREWEBVIEW2_CLIENT_CERTIFICATE_KIND =
    COREWEBVIEW2_CLIENT_CERTIFICATE_KIND(2i32);
impl ::core::marker::Copy for COREWEBVIEW2_CLIENT_CERTIFICATE_KIND {}
impl ::core::clone::Clone for COREWEBVIEW2_CLIENT_CERTIFICATE_KIND {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_CLIENT_CERTIFICATE_KIND {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_CLIENT_CERTIFICATE_KIND {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_CLIENT_CERTIFICATE_KIND {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_CLIENT_CERTIFICATE_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(C)]
pub struct COREWEBVIEW2_COLOR {
    pub A: u8,
    pub R: u8,
    pub G: u8,
    pub B: u8,
}
impl ::core::marker::Copy for COREWEBVIEW2_COLOR {}
impl ::core::clone::Clone for COREWEBVIEW2_COLOR {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for COREWEBVIEW2_COLOR {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("COREWEBVIEW2_COLOR")
            .field("A", &self.A)
            .field("R", &self.R)
            .field("G", &self.G)
            .field("B", &self.B)
            .finish()
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_COLOR {
    type Abi = Self;
}
impl ::core::cmp::PartialEq for COREWEBVIEW2_COLOR {
    fn eq(&self, other: &Self) -> bool {
        unsafe {
            ::windows::core::memcmp(
                self as *const _ as _,
                other as *const _ as _,
                core::mem::size_of::<COREWEBVIEW2_COLOR>(),
            ) == 0
        }
    }
}
impl ::core::cmp::Eq for COREWEBVIEW2_COLOR {}
impl ::core::default::Default for COREWEBVIEW2_COLOR {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_COOKIE_SAME_SITE_KIND(pub i32);
pub const COREWEBVIEW2_COOKIE_SAME_SITE_KIND_NONE: COREWEBVIEW2_COOKIE_SAME_SITE_KIND =
    COREWEBVIEW2_COOKIE_SAME_SITE_KIND(0i32);
pub const COREWEBVIEW2_COOKIE_SAME_SITE_KIND_LAX: COREWEBVIEW2_COOKIE_SAME_SITE_KIND =
    COREWEBVIEW2_COOKIE_SAME_SITE_KIND(1i32);
pub const COREWEBVIEW2_COOKIE_SAME_SITE_KIND_STRICT: COREWEBVIEW2_COOKIE_SAME_SITE_KIND =
    COREWEBVIEW2_COOKIE_SAME_SITE_KIND(2i32);
impl ::core::marker::Copy for COREWEBVIEW2_COOKIE_SAME_SITE_KIND {}
impl ::core::clone::Clone for COREWEBVIEW2_COOKIE_SAME_SITE_KIND {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_COOKIE_SAME_SITE_KIND {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_COOKIE_SAME_SITE_KIND {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_COOKIE_SAME_SITE_KIND {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_COOKIE_SAME_SITE_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT(pub i32);
pub const COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT_TOP_LEFT:
    COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT =
    COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT(0i32);
pub const COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT_TOP_RIGHT:
    COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT =
    COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT(1i32);
pub const COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT_BOTTOM_LEFT:
    COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT =
    COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT(2i32);
pub const COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT_BOTTOM_RIGHT:
    COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT =
    COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT(3i32);
impl ::core::marker::Copy for COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT {}
impl ::core::clone::Clone for COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(pub i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_NONE: COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON =
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(0i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_FAILED:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(1i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_ACCESS_DENIED:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(2i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_NO_SPACE:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(3i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_NAME_TOO_LONG:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(4i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_TOO_LARGE:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(5i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_MALICIOUS:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(6i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_TRANSIENT_ERROR:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(7i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_BLOCKED_BY_POLICY:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(8i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_SECURITY_CHECK_FAILED:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(9i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_TOO_SHORT:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(10i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_FILE_HASH_MISMATCH:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(11i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_NETWORK_FAILED:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(12i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_NETWORK_TIMEOUT:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(13i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_NETWORK_DISCONNECTED:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(14i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_NETWORK_SERVER_DOWN:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(15i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_NETWORK_INVALID_REQUEST:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(16i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_FAILED:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(17i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_NO_RANGE:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(18i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_BAD_CONTENT:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(19i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_UNAUTHORIZED:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(20i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_CERTIFICATE_PROBLEM:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(21i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_FORBIDDEN:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(22i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_UNEXPECTED_RESPONSE:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(23i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_CONTENT_LENGTH_MISMATCH:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(24i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_SERVER_CROSS_ORIGIN_REDIRECT:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(25i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_USER_CANCELED:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(26i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_USER_SHUTDOWN:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(27i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_USER_PAUSED:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(28i32);
pub const COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON_DOWNLOAD_PROCESS_CRASHED:
    COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON = COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON(29i32);
impl ::core::marker::Copy for COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON {}
impl ::core::clone::Clone for COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_DOWNLOAD_STATE(pub i32);
pub const COREWEBVIEW2_DOWNLOAD_STATE_IN_PROGRESS: COREWEBVIEW2_DOWNLOAD_STATE =
    COREWEBVIEW2_DOWNLOAD_STATE(0i32);
pub const COREWEBVIEW2_DOWNLOAD_STATE_INTERRUPTED: COREWEBVIEW2_DOWNLOAD_STATE =
    COREWEBVIEW2_DOWNLOAD_STATE(1i32);
pub const COREWEBVIEW2_DOWNLOAD_STATE_COMPLETED: COREWEBVIEW2_DOWNLOAD_STATE =
    COREWEBVIEW2_DOWNLOAD_STATE(2i32);
impl ::core::marker::Copy for COREWEBVIEW2_DOWNLOAD_STATE {}
impl ::core::clone::Clone for COREWEBVIEW2_DOWNLOAD_STATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_DOWNLOAD_STATE {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_DOWNLOAD_STATE {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_DOWNLOAD_STATE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_DOWNLOAD_STATE")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND(pub i32);
pub const COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND_DENY: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND =
    COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND(0i32);
pub const COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND_ALLOW: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND =
    COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND(1i32);
pub const COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND_DENY_CORS: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND =
    COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND(2i32);
impl ::core::marker::Copy for COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND {}
impl ::core::clone::Clone for COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_KEY_EVENT_KIND(pub i32);
pub const COREWEBVIEW2_KEY_EVENT_KIND_KEY_DOWN: COREWEBVIEW2_KEY_EVENT_KIND =
    COREWEBVIEW2_KEY_EVENT_KIND(0i32);
pub const COREWEBVIEW2_KEY_EVENT_KIND_KEY_UP: COREWEBVIEW2_KEY_EVENT_KIND =
    COREWEBVIEW2_KEY_EVENT_KIND(1i32);
pub const COREWEBVIEW2_KEY_EVENT_KIND_SYSTEM_KEY_DOWN: COREWEBVIEW2_KEY_EVENT_KIND =
    COREWEBVIEW2_KEY_EVENT_KIND(2i32);
pub const COREWEBVIEW2_KEY_EVENT_KIND_SYSTEM_KEY_UP: COREWEBVIEW2_KEY_EVENT_KIND =
    COREWEBVIEW2_KEY_EVENT_KIND(3i32);
impl ::core::marker::Copy for COREWEBVIEW2_KEY_EVENT_KIND {}
impl ::core::clone::Clone for COREWEBVIEW2_KEY_EVENT_KIND {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_KEY_EVENT_KIND {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_KEY_EVENT_KIND {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_KEY_EVENT_KIND {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_KEY_EVENT_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_MOUSE_EVENT_KIND(pub i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_HORIZONTAL_WHEEL: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(526i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_LEFT_BUTTON_DOUBLE_CLICK: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(515i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_LEFT_BUTTON_DOWN: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(513i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_LEFT_BUTTON_UP: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(514i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_LEAVE: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(675i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_MIDDLE_BUTTON_DOUBLE_CLICK: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(521i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_MIDDLE_BUTTON_DOWN: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(519i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_MIDDLE_BUTTON_UP: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(520i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_MOVE: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(512i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_RIGHT_BUTTON_DOUBLE_CLICK: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(518i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_RIGHT_BUTTON_DOWN: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(516i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_RIGHT_BUTTON_UP: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(517i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_WHEEL: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(522i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_X_BUTTON_DOUBLE_CLICK: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(525i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_X_BUTTON_DOWN: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(523i32);
pub const COREWEBVIEW2_MOUSE_EVENT_KIND_X_BUTTON_UP: COREWEBVIEW2_MOUSE_EVENT_KIND =
    COREWEBVIEW2_MOUSE_EVENT_KIND(524i32);
impl ::core::marker::Copy for COREWEBVIEW2_MOUSE_EVENT_KIND {}
impl ::core::clone::Clone for COREWEBVIEW2_MOUSE_EVENT_KIND {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_MOUSE_EVENT_KIND {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_MOUSE_EVENT_KIND {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_MOUSE_EVENT_KIND {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_MOUSE_EVENT_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(pub u32);
pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_NONE: COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS =
    COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(0u32);
pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_LEFT_BUTTON: COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS =
    COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(1u32);
pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_RIGHT_BUTTON:
    COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS = COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(2u32);
pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_SHIFT: COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS =
    COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(4u32);
pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_CONTROL: COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS =
    COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(8u32);
pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_MIDDLE_BUTTON:
    COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS = COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(16u32);
pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_X_BUTTON1: COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS =
    COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(32u32);
pub const COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS_X_BUTTON2: COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS =
    COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS(64u32);
impl ::core::marker::Copy for COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS {}
impl ::core::clone::Clone for COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS")
            .field(&self.0)
            .finish()
    }
}
impl ::core::ops::BitOr for COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS {
    type Output = Self;
    fn bitor(self, other: Self) -> Self {
        Self(self.0 | other.0)
    }
}
impl ::core::ops::BitAnd for COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS {
    type Output = Self;
    fn bitand(self, other: Self) -> Self {
        Self(self.0 & other.0)
    }
}
impl ::core::ops::BitOrAssign for COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS {
    fn bitor_assign(&mut self, other: Self) {
        self.0.bitor_assign(other.0)
    }
}
impl ::core::ops::BitAndAssign for COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS {
    fn bitand_assign(&mut self, other: Self) {
        self.0.bitand_assign(other.0)
    }
}
impl ::core::ops::Not for COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS {
    type Output = Self;
    fn not(self) -> Self {
        Self(self.0.not())
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_MOVE_FOCUS_REASON(pub i32);
pub const COREWEBVIEW2_MOVE_FOCUS_REASON_PROGRAMMATIC: COREWEBVIEW2_MOVE_FOCUS_REASON =
    COREWEBVIEW2_MOVE_FOCUS_REASON(0i32);
pub const COREWEBVIEW2_MOVE_FOCUS_REASON_NEXT: COREWEBVIEW2_MOVE_FOCUS_REASON =
    COREWEBVIEW2_MOVE_FOCUS_REASON(1i32);
pub const COREWEBVIEW2_MOVE_FOCUS_REASON_PREVIOUS: COREWEBVIEW2_MOVE_FOCUS_REASON =
    COREWEBVIEW2_MOVE_FOCUS_REASON(2i32);
impl ::core::marker::Copy for COREWEBVIEW2_MOVE_FOCUS_REASON {}
impl ::core::clone::Clone for COREWEBVIEW2_MOVE_FOCUS_REASON {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_MOVE_FOCUS_REASON {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_MOVE_FOCUS_REASON {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_MOVE_FOCUS_REASON {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_MOVE_FOCUS_REASON")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_PERMISSION_KIND(pub i32);
pub const COREWEBVIEW2_PERMISSION_KIND_UNKNOWN_PERMISSION: COREWEBVIEW2_PERMISSION_KIND =
    COREWEBVIEW2_PERMISSION_KIND(0i32);
pub const COREWEBVIEW2_PERMISSION_KIND_MICROPHONE: COREWEBVIEW2_PERMISSION_KIND =
    COREWEBVIEW2_PERMISSION_KIND(1i32);
pub const COREWEBVIEW2_PERMISSION_KIND_CAMERA: COREWEBVIEW2_PERMISSION_KIND =
    COREWEBVIEW2_PERMISSION_KIND(2i32);
pub const COREWEBVIEW2_PERMISSION_KIND_GEOLOCATION: COREWEBVIEW2_PERMISSION_KIND =
    COREWEBVIEW2_PERMISSION_KIND(3i32);
pub const COREWEBVIEW2_PERMISSION_KIND_NOTIFICATIONS: COREWEBVIEW2_PERMISSION_KIND =
    COREWEBVIEW2_PERMISSION_KIND(4i32);
pub const COREWEBVIEW2_PERMISSION_KIND_OTHER_SENSORS: COREWEBVIEW2_PERMISSION_KIND =
    COREWEBVIEW2_PERMISSION_KIND(5i32);
pub const COREWEBVIEW2_PERMISSION_KIND_CLIPBOARD_READ: COREWEBVIEW2_PERMISSION_KIND =
    COREWEBVIEW2_PERMISSION_KIND(6i32);
impl ::core::marker::Copy for COREWEBVIEW2_PERMISSION_KIND {}
impl ::core::clone::Clone for COREWEBVIEW2_PERMISSION_KIND {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_PERMISSION_KIND {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_PERMISSION_KIND {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_PERMISSION_KIND {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_PERMISSION_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_PERMISSION_STATE(pub i32);
pub const COREWEBVIEW2_PERMISSION_STATE_DEFAULT: COREWEBVIEW2_PERMISSION_STATE =
    COREWEBVIEW2_PERMISSION_STATE(0i32);
pub const COREWEBVIEW2_PERMISSION_STATE_ALLOW: COREWEBVIEW2_PERMISSION_STATE =
    COREWEBVIEW2_PERMISSION_STATE(1i32);
pub const COREWEBVIEW2_PERMISSION_STATE_DENY: COREWEBVIEW2_PERMISSION_STATE =
    COREWEBVIEW2_PERMISSION_STATE(2i32);
impl ::core::marker::Copy for COREWEBVIEW2_PERMISSION_STATE {}
impl ::core::clone::Clone for COREWEBVIEW2_PERMISSION_STATE {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_PERMISSION_STATE {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_PERMISSION_STATE {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_PERMISSION_STATE {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_PERMISSION_STATE")
            .field(&self.0)
            .finish()
    }
}
#[repr(C)]
pub struct COREWEBVIEW2_PHYSICAL_KEY_STATUS {
    pub RepeatCount: u32,
    pub ScanCode: u32,
    pub IsExtendedKey: super::super::super::super::Windows::Win32::Foundation::BOOL,
    pub IsMenuKeyDown: super::super::super::super::Windows::Win32::Foundation::BOOL,
    pub WasKeyDown: super::super::super::super::Windows::Win32::Foundation::BOOL,
    pub IsKeyReleased: super::super::super::super::Windows::Win32::Foundation::BOOL,
}
impl ::core::marker::Copy for COREWEBVIEW2_PHYSICAL_KEY_STATUS {}
impl ::core::clone::Clone for COREWEBVIEW2_PHYSICAL_KEY_STATUS {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::fmt::Debug for COREWEBVIEW2_PHYSICAL_KEY_STATUS {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_struct("COREWEBVIEW2_PHYSICAL_KEY_STATUS")
            .field("RepeatCount", &self.RepeatCount)
            .field("ScanCode", &self.ScanCode)
            .field("IsExtendedKey", &self.IsExtendedKey)
            .field("IsMenuKeyDown", &self.IsMenuKeyDown)
            .field("WasKeyDown", &self.WasKeyDown)
            .field("IsKeyReleased", &self.IsKeyReleased)
            .finish()
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_PHYSICAL_KEY_STATUS {
    type Abi = Self;
}
impl ::core::cmp::PartialEq for COREWEBVIEW2_PHYSICAL_KEY_STATUS {
    fn eq(&self, other: &Self) -> bool {
        unsafe {
            ::windows::core::memcmp(
                self as *const _ as _,
                other as *const _ as _,
                core::mem::size_of::<COREWEBVIEW2_PHYSICAL_KEY_STATUS>(),
            ) == 0
        }
    }
}
impl ::core::cmp::Eq for COREWEBVIEW2_PHYSICAL_KEY_STATUS {}
impl ::core::default::Default for COREWEBVIEW2_PHYSICAL_KEY_STATUS {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_POINTER_EVENT_KIND(pub i32);
pub const COREWEBVIEW2_POINTER_EVENT_KIND_ACTIVATE: COREWEBVIEW2_POINTER_EVENT_KIND =
    COREWEBVIEW2_POINTER_EVENT_KIND(587i32);
pub const COREWEBVIEW2_POINTER_EVENT_KIND_DOWN: COREWEBVIEW2_POINTER_EVENT_KIND =
    COREWEBVIEW2_POINTER_EVENT_KIND(582i32);
pub const COREWEBVIEW2_POINTER_EVENT_KIND_ENTER: COREWEBVIEW2_POINTER_EVENT_KIND =
    COREWEBVIEW2_POINTER_EVENT_KIND(585i32);
pub const COREWEBVIEW2_POINTER_EVENT_KIND_LEAVE: COREWEBVIEW2_POINTER_EVENT_KIND =
    COREWEBVIEW2_POINTER_EVENT_KIND(586i32);
pub const COREWEBVIEW2_POINTER_EVENT_KIND_UP: COREWEBVIEW2_POINTER_EVENT_KIND =
    COREWEBVIEW2_POINTER_EVENT_KIND(583i32);
pub const COREWEBVIEW2_POINTER_EVENT_KIND_UPDATE: COREWEBVIEW2_POINTER_EVENT_KIND =
    COREWEBVIEW2_POINTER_EVENT_KIND(581i32);
impl ::core::marker::Copy for COREWEBVIEW2_POINTER_EVENT_KIND {}
impl ::core::clone::Clone for COREWEBVIEW2_POINTER_EVENT_KIND {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_POINTER_EVENT_KIND {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_POINTER_EVENT_KIND {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_POINTER_EVENT_KIND {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_POINTER_EVENT_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_PRINT_ORIENTATION(pub i32);
pub const COREWEBVIEW2_PRINT_ORIENTATION_PORTRAIT: COREWEBVIEW2_PRINT_ORIENTATION =
    COREWEBVIEW2_PRINT_ORIENTATION(0i32);
pub const COREWEBVIEW2_PRINT_ORIENTATION_LANDSCAPE: COREWEBVIEW2_PRINT_ORIENTATION =
    COREWEBVIEW2_PRINT_ORIENTATION(1i32);
impl ::core::marker::Copy for COREWEBVIEW2_PRINT_ORIENTATION {}
impl ::core::clone::Clone for COREWEBVIEW2_PRINT_ORIENTATION {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_PRINT_ORIENTATION {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_PRINT_ORIENTATION {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_PRINT_ORIENTATION {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_PRINT_ORIENTATION")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_PROCESS_FAILED_KIND(pub i32);
pub const COREWEBVIEW2_PROCESS_FAILED_KIND_BROWSER_PROCESS_EXITED:
    COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(0i32);
pub const COREWEBVIEW2_PROCESS_FAILED_KIND_RENDER_PROCESS_EXITED: COREWEBVIEW2_PROCESS_FAILED_KIND =
    COREWEBVIEW2_PROCESS_FAILED_KIND(1i32);
pub const COREWEBVIEW2_PROCESS_FAILED_KIND_RENDER_PROCESS_UNRESPONSIVE:
    COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(2i32);
pub const COREWEBVIEW2_PROCESS_FAILED_KIND_FRAME_RENDER_PROCESS_EXITED:
    COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(3i32);
pub const COREWEBVIEW2_PROCESS_FAILED_KIND_UTILITY_PROCESS_EXITED:
    COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(4i32);
pub const COREWEBVIEW2_PROCESS_FAILED_KIND_SANDBOX_HELPER_PROCESS_EXITED:
    COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(5i32);
pub const COREWEBVIEW2_PROCESS_FAILED_KIND_GPU_PROCESS_EXITED: COREWEBVIEW2_PROCESS_FAILED_KIND =
    COREWEBVIEW2_PROCESS_FAILED_KIND(6i32);
pub const COREWEBVIEW2_PROCESS_FAILED_KIND_PPAPI_PLUGIN_PROCESS_EXITED:
    COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(7i32);
pub const COREWEBVIEW2_PROCESS_FAILED_KIND_PPAPI_BROKER_PROCESS_EXITED:
    COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(8i32);
pub const COREWEBVIEW2_PROCESS_FAILED_KIND_UNKNOWN_PROCESS_EXITED:
    COREWEBVIEW2_PROCESS_FAILED_KIND = COREWEBVIEW2_PROCESS_FAILED_KIND(9i32);
impl ::core::marker::Copy for COREWEBVIEW2_PROCESS_FAILED_KIND {}
impl ::core::clone::Clone for COREWEBVIEW2_PROCESS_FAILED_KIND {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_PROCESS_FAILED_KIND {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_PROCESS_FAILED_KIND {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_PROCESS_FAILED_KIND {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_PROCESS_FAILED_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_PROCESS_FAILED_REASON(pub i32);
pub const COREWEBVIEW2_PROCESS_FAILED_REASON_UNEXPECTED: COREWEBVIEW2_PROCESS_FAILED_REASON =
    COREWEBVIEW2_PROCESS_FAILED_REASON(0i32);
pub const COREWEBVIEW2_PROCESS_FAILED_REASON_UNRESPONSIVE: COREWEBVIEW2_PROCESS_FAILED_REASON =
    COREWEBVIEW2_PROCESS_FAILED_REASON(1i32);
pub const COREWEBVIEW2_PROCESS_FAILED_REASON_TERMINATED: COREWEBVIEW2_PROCESS_FAILED_REASON =
    COREWEBVIEW2_PROCESS_FAILED_REASON(2i32);
pub const COREWEBVIEW2_PROCESS_FAILED_REASON_CRASHED: COREWEBVIEW2_PROCESS_FAILED_REASON =
    COREWEBVIEW2_PROCESS_FAILED_REASON(3i32);
pub const COREWEBVIEW2_PROCESS_FAILED_REASON_LAUNCH_FAILED: COREWEBVIEW2_PROCESS_FAILED_REASON =
    COREWEBVIEW2_PROCESS_FAILED_REASON(4i32);
pub const COREWEBVIEW2_PROCESS_FAILED_REASON_OUT_OF_MEMORY: COREWEBVIEW2_PROCESS_FAILED_REASON =
    COREWEBVIEW2_PROCESS_FAILED_REASON(5i32);
impl ::core::marker::Copy for COREWEBVIEW2_PROCESS_FAILED_REASON {}
impl ::core::clone::Clone for COREWEBVIEW2_PROCESS_FAILED_REASON {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_PROCESS_FAILED_REASON {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_PROCESS_FAILED_REASON {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_PROCESS_FAILED_REASON {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_PROCESS_FAILED_REASON")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_SCRIPT_DIALOG_KIND(pub i32);
pub const COREWEBVIEW2_SCRIPT_DIALOG_KIND_ALERT: COREWEBVIEW2_SCRIPT_DIALOG_KIND =
    COREWEBVIEW2_SCRIPT_DIALOG_KIND(0i32);
pub const COREWEBVIEW2_SCRIPT_DIALOG_KIND_CONFIRM: COREWEBVIEW2_SCRIPT_DIALOG_KIND =
    COREWEBVIEW2_SCRIPT_DIALOG_KIND(1i32);
pub const COREWEBVIEW2_SCRIPT_DIALOG_KIND_PROMPT: COREWEBVIEW2_SCRIPT_DIALOG_KIND =
    COREWEBVIEW2_SCRIPT_DIALOG_KIND(2i32);
pub const COREWEBVIEW2_SCRIPT_DIALOG_KIND_BEFOREUNLOAD: COREWEBVIEW2_SCRIPT_DIALOG_KIND =
    COREWEBVIEW2_SCRIPT_DIALOG_KIND(3i32);
impl ::core::marker::Copy for COREWEBVIEW2_SCRIPT_DIALOG_KIND {}
impl ::core::clone::Clone for COREWEBVIEW2_SCRIPT_DIALOG_KIND {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_SCRIPT_DIALOG_KIND {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_SCRIPT_DIALOG_KIND {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_SCRIPT_DIALOG_KIND {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_SCRIPT_DIALOG_KIND")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_WEB_ERROR_STATUS(pub i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_UNKNOWN: COREWEBVIEW2_WEB_ERROR_STATUS =
    COREWEBVIEW2_WEB_ERROR_STATUS(0i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_CERTIFICATE_COMMON_NAME_IS_INCORRECT:
    COREWEBVIEW2_WEB_ERROR_STATUS = COREWEBVIEW2_WEB_ERROR_STATUS(1i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_CERTIFICATE_EXPIRED: COREWEBVIEW2_WEB_ERROR_STATUS =
    COREWEBVIEW2_WEB_ERROR_STATUS(2i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_CLIENT_CERTIFICATE_CONTAINS_ERRORS:
    COREWEBVIEW2_WEB_ERROR_STATUS = COREWEBVIEW2_WEB_ERROR_STATUS(3i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_CERTIFICATE_REVOKED: COREWEBVIEW2_WEB_ERROR_STATUS =
    COREWEBVIEW2_WEB_ERROR_STATUS(4i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_CERTIFICATE_IS_INVALID: COREWEBVIEW2_WEB_ERROR_STATUS =
    COREWEBVIEW2_WEB_ERROR_STATUS(5i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_SERVER_UNREACHABLE: COREWEBVIEW2_WEB_ERROR_STATUS =
    COREWEBVIEW2_WEB_ERROR_STATUS(6i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_TIMEOUT: COREWEBVIEW2_WEB_ERROR_STATUS =
    COREWEBVIEW2_WEB_ERROR_STATUS(7i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_ERROR_HTTP_INVALID_SERVER_RESPONSE:
    COREWEBVIEW2_WEB_ERROR_STATUS = COREWEBVIEW2_WEB_ERROR_STATUS(8i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_CONNECTION_ABORTED: COREWEBVIEW2_WEB_ERROR_STATUS =
    COREWEBVIEW2_WEB_ERROR_STATUS(9i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_CONNECTION_RESET: COREWEBVIEW2_WEB_ERROR_STATUS =
    COREWEBVIEW2_WEB_ERROR_STATUS(10i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_DISCONNECTED: COREWEBVIEW2_WEB_ERROR_STATUS =
    COREWEBVIEW2_WEB_ERROR_STATUS(11i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_CANNOT_CONNECT: COREWEBVIEW2_WEB_ERROR_STATUS =
    COREWEBVIEW2_WEB_ERROR_STATUS(12i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_HOST_NAME_NOT_RESOLVED: COREWEBVIEW2_WEB_ERROR_STATUS =
    COREWEBVIEW2_WEB_ERROR_STATUS(13i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_OPERATION_CANCELED: COREWEBVIEW2_WEB_ERROR_STATUS =
    COREWEBVIEW2_WEB_ERROR_STATUS(14i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_REDIRECT_FAILED: COREWEBVIEW2_WEB_ERROR_STATUS =
    COREWEBVIEW2_WEB_ERROR_STATUS(15i32);
pub const COREWEBVIEW2_WEB_ERROR_STATUS_UNEXPECTED_ERROR: COREWEBVIEW2_WEB_ERROR_STATUS =
    COREWEBVIEW2_WEB_ERROR_STATUS(16i32);
impl ::core::marker::Copy for COREWEBVIEW2_WEB_ERROR_STATUS {}
impl ::core::clone::Clone for COREWEBVIEW2_WEB_ERROR_STATUS {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_WEB_ERROR_STATUS {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_WEB_ERROR_STATUS {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_WEB_ERROR_STATUS {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_WEB_ERROR_STATUS")
            .field(&self.0)
            .finish()
    }
}
#[repr(transparent)]
#[derive(:: core :: cmp :: PartialEq, :: core :: cmp :: Eq)]
pub struct COREWEBVIEW2_WEB_RESOURCE_CONTEXT(pub i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_ALL: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(0i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_DOCUMENT: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(1i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_STYLESHEET: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(2i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_IMAGE: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(3i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_MEDIA: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(4i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_FONT: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(5i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_SCRIPT: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(6i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_XML_HTTP_REQUEST: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(7i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_FETCH: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(8i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_TEXT_TRACK: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(9i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_EVENT_SOURCE: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(10i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_WEBSOCKET: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(11i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_MANIFEST: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(12i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_SIGNED_EXCHANGE: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(13i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_PING: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(14i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_CSP_VIOLATION_REPORT:
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT = COREWEBVIEW2_WEB_RESOURCE_CONTEXT(15i32);
pub const COREWEBVIEW2_WEB_RESOURCE_CONTEXT_OTHER: COREWEBVIEW2_WEB_RESOURCE_CONTEXT =
    COREWEBVIEW2_WEB_RESOURCE_CONTEXT(16i32);
impl ::core::marker::Copy for COREWEBVIEW2_WEB_RESOURCE_CONTEXT {}
impl ::core::clone::Clone for COREWEBVIEW2_WEB_RESOURCE_CONTEXT {
    fn clone(&self) -> Self {
        *self
    }
}
impl ::core::default::Default for COREWEBVIEW2_WEB_RESOURCE_CONTEXT {
    fn default() -> Self {
        Self(0)
    }
}
unsafe impl ::windows::core::Abi for COREWEBVIEW2_WEB_RESOURCE_CONTEXT {
    type Abi = Self;
}
impl ::core::fmt::Debug for COREWEBVIEW2_WEB_RESOURCE_CONTEXT {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("COREWEBVIEW2_WEB_RESOURCE_CONTEXT")
            .field(&self.0)
            .finish()
    }
}
pub const CORE_WEBVIEW_TARGET_PRODUCT_VERSION: &'static str = "97.0.1072.54";
#[inline]
pub unsafe fn CompareBrowserVersions<
    'a,
    Param0: ::windows::core::IntoParam<'a, super::super::super::super::Windows::Win32::Foundation::PWSTR>,
    Param1: ::windows::core::IntoParam<'a, super::super::super::super::Windows::Win32::Foundation::PWSTR>,
>(
    version1: Param0,
    version2: Param1,
    result: *mut i32,
) -> ::windows::core::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "WebView2LoaderStatic", kind = "static")]
        extern "system" {
            fn CompareBrowserVersions(
                version1: super::super::super::super::Windows::Win32::Foundation::PWSTR,
                version2: super::super::super::super::Windows::Win32::Foundation::PWSTR,
                result: *mut i32,
            ) -> ::windows::core::HRESULT;
        }
        CompareBrowserVersions(
            version1.into_param().abi(),
            version2.into_param().abi(),
            ::core::mem::transmute(result),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn CreateCoreWebView2Environment<
    'a,
    Param0: ::windows::core::IntoParam<'a, ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler>,
>(
    environmentcreatedhandler: Param0,
) -> ::windows::core::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "WebView2LoaderStatic", kind = "static")]
        extern "system" {
            fn CreateCoreWebView2Environment(
                environmentcreatedhandler: ::windows::core::RawPtr,
            ) -> ::windows::core::HRESULT;
        }
        CreateCoreWebView2Environment(environmentcreatedhandler.into_param().abi()).ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn CreateCoreWebView2EnvironmentWithOptions<
    'a,
    Param0: ::windows::core::IntoParam<'a, super::super::super::super::Windows::Win32::Foundation::PWSTR>,
    Param1: ::windows::core::IntoParam<'a, super::super::super::super::Windows::Win32::Foundation::PWSTR>,
    Param2: ::windows::core::IntoParam<'a, ICoreWebView2EnvironmentOptions>,
    Param3: ::windows::core::IntoParam<'a, ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler>,
>(
    browserexecutablefolder: Param0,
    userdatafolder: Param1,
    environmentoptions: Param2,
    environmentcreatedhandler: Param3,
) -> ::windows::core::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "WebView2LoaderStatic", kind = "static")]
        extern "system" {
            fn CreateCoreWebView2EnvironmentWithOptions(
                browserexecutablefolder : super::super::super::super::Windows::Win32::Foundation:: PWSTR,
                userdatafolder: super::super::super::super::Windows::Win32::Foundation::PWSTR,
                environmentoptions: ::windows::core::RawPtr,
                environmentcreatedhandler: ::windows::core::RawPtr,
            ) -> ::windows::core::HRESULT;
        }
        CreateCoreWebView2EnvironmentWithOptions(
            browserexecutablefolder.into_param().abi(),
            userdatafolder.into_param().abi(),
            environmentoptions.into_param().abi(),
            environmentcreatedhandler.into_param().abi(),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[inline]
pub unsafe fn GetAvailableCoreWebView2BrowserVersionString<
    'a,
    Param0: ::windows::core::IntoParam<'a, super::super::super::super::Windows::Win32::Foundation::PWSTR>,
>(
    browserexecutablefolder: Param0,
    versioninfo: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
) -> ::windows::core::Result<()> {
    #[cfg(windows)]
    {
        #[link(name = "WebView2LoaderStatic", kind = "static")]
        extern "system" {
            fn GetAvailableCoreWebView2BrowserVersionString(
                browserexecutablefolder : super::super::super::super::Windows::Win32::Foundation:: PWSTR,
                versioninfo: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
            ) -> ::windows::core::HRESULT;
        }
        GetAvailableCoreWebView2BrowserVersionString(
            browserexecutablefolder.into_param().abi(),
            ::core::mem::transmute(versioninfo),
        )
        .ok()
    }
    #[cfg(not(windows))]
    unimplemented!("Unsupported target OS");
}
#[repr(transparent)]
pub struct ICoreWebView2(::windows::core::IUnknown);
impl ICoreWebView2 {
    pub unsafe fn Settings(&self) -> ::windows::core::Result<ICoreWebView2Settings> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).Settings)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Settings>(result__)
    }
    pub unsafe fn Source(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Source)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn Navigate<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Navigate)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigateToString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        htmlcontent: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).NavigateToString)(
            ::core::mem::transmute_copy(self),
            htmlcontent.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).NavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveNavigationStarting)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContentLoadingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ContentLoading)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveContentLoading)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn SourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2SourceChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SourceChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveSourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveSourceChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn HistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2HistoryChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).HistoryChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveHistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveHistoryChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).NavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).FrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveFrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).FrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveFrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ScriptDialogOpeningEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ScriptDialogOpening)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveScriptDialogOpening)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn PermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2PermissionRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PermissionRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemovePermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemovePermissionRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ProcessFailedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ProcessFailed)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveProcessFailed)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler,
        >,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AddScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        id: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            id.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ExecuteScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2ExecuteScriptCompletedHandler>,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ExecuteScript)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CapturePreview<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CapturePreviewCompletedHandler>,
    >(
        &self,
        imageformat: COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT,
        imagestream: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CapturePreview)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(imageformat),
            imagestream.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Reload(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Reload)(::core::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn PostWebMessageAsJson<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasjson: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PostWebMessageAsJson)(
            ::core::mem::transmute_copy(self),
            webmessageasjson.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn PostWebMessageAsString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasstring: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PostWebMessageAsString)(
            ::core::mem::transmute_copy(self),
            webmessageasstring.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebMessageReceivedEventHandler>,
    >(
        &self,
        handler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).WebMessageReceived)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveWebMessageReceived)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CallDevToolsProtocolMethod<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>,
    >(
        &self,
        methodname: Param0,
        parametersasjson: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CallDevToolsProtocolMethod)(
            ::core::mem::transmute_copy(self),
            methodname.into_param().abi(),
            parametersasjson.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn BrowserProcessId(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).BrowserProcessId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn CanGoBack(
        &self,
        cangoback: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CanGoBack)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoback),
        )
        .ok()
    }
    pub unsafe fn CanGoForward(
        &self,
        cangoforward: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CanGoForward)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoforward),
        )
        .ok()
    }
    pub unsafe fn GoBack(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GoBack)(::core::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn GoForward(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GoForward)(::core::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn GetDevToolsProtocolEventReceiver<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        eventname: Param0,
    ) -> ::windows::core::Result<ICoreWebView2DevToolsProtocolEventReceiver> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetDevToolsProtocolEventReceiver)(
            ::core::mem::transmute_copy(self),
            eventname.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2DevToolsProtocolEventReceiver>(result__)
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Stop)(::core::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn NewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewWindowRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).NewWindowRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveNewWindowRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DocumentTitleChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveDocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DocumentTitle(
        &self,
        title: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DocumentTitle)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(title),
        )
        .ok()
    }
    pub unsafe fn AddHostObjectToScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        object: *mut super::super::super::super::Windows::Win32::System::Com::VARIANT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AddHostObjectToScript)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(object),
        )
        .ok()
    }
    pub unsafe fn RemoveHostObjectFromScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveHostObjectFromScript)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn OpenDevToolsWindow(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).OpenDevToolsWindow)(::core::mem::transmute_copy(
            self,
        ))
        .ok()
    }
    pub unsafe fn ContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContainsFullScreenElementChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ContainsFullScreenElement(
        &self,
        containsfullscreenelement : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ContainsFullScreenElement)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(containsfullscreenelement),
        )
        .ok()
    }
    pub unsafe fn WebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).WebResourceRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveWebResourceRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AddWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn WindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WindowCloseRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).WindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveWindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2 {}
impl ::core::fmt::Debug for ICoreWebView2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2 {
    type Vtable = ICoreWebView2_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x76eceacb_0462_4d94_ac83_423a6793775e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_Vtbl where { pub base : :: windows :: core :: IUnknownVtbl , pub Settings : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , settings : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT , pub Source : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , uri : * mut super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub Navigate : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , uri : super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub NavigateToString : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , htmlcontent : super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub NavigationStarting : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveNavigationStarting : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub ContentLoading : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveContentLoading : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub SourceChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveSourceChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub HistoryChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveHistoryChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub NavigationCompleted : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveNavigationCompleted : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub FrameNavigationStarting : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveFrameNavigationStarting : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub FrameNavigationCompleted : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveFrameNavigationCompleted : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub ScriptDialogOpening : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveScriptDialogOpening : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub PermissionRequested : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemovePermissionRequested : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub ProcessFailed : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveProcessFailed : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub AddScriptToExecuteOnDocumentCreated : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , javascript : super::super::super::super::Windows::Win32::Foundation:: PWSTR , handler : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT , pub RemoveScriptToExecuteOnDocumentCreated : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , id : super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub ExecuteScript : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , javascript : super::super::super::super::Windows::Win32::Foundation:: PWSTR , handler : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT , pub CapturePreview : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , imageformat : COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT , imagestream : :: windows :: core :: RawPtr , handler : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT , pub Reload : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT , pub PostWebMessageAsJson : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , webmessageasjson : super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub PostWebMessageAsString : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , webmessageasstring : super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub WebMessageReceived : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , handler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveWebMessageReceived : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub CallDevToolsProtocolMethod : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , methodname : super::super::super::super::Windows::Win32::Foundation:: PWSTR , parametersasjson : super::super::super::super::Windows::Win32::Foundation:: PWSTR , handler : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT , pub BrowserProcessId : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , value : * mut u32 , ) -> :: windows :: core :: HRESULT , pub CanGoBack : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , cangoback : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub CanGoForward : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , cangoforward : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub GoBack : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT , pub GoForward : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT , pub GetDevToolsProtocolEventReceiver : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventname : super::super::super::super::Windows::Win32::Foundation:: PWSTR , receiver : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT , pub Stop : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT , pub NewWindowRequested : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveNewWindowRequested : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub DocumentTitleChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveDocumentTitleChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub DocumentTitle : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , title : * mut super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub AddHostObjectToScript : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , name : super::super::super::super::Windows::Win32::Foundation:: PWSTR , object : * mut super::super::super::super::Windows::Win32::System::Com:: VARIANT , ) -> :: windows :: core :: HRESULT , pub RemoveHostObjectFromScript : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , name : super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub OpenDevToolsWindow : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT , pub ContainsFullScreenElementChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveContainsFullScreenElementChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub ContainsFullScreenElement : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , containsfullscreenelement : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub WebResourceRequested : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveWebResourceRequested : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub AddWebResourceRequestedFilter : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , uri : super::super::super::super::Windows::Win32::Foundation:: PWSTR , resourcecontext : COREWEBVIEW2_WEB_RESOURCE_CONTEXT , ) -> :: windows :: core :: HRESULT , pub RemoveWebResourceRequestedFilter : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , uri : super::super::super::super::Windows::Win32::Foundation:: PWSTR , resourcecontext : COREWEBVIEW2_WEB_RESOURCE_CONTEXT , ) -> :: windows :: core :: HRESULT , pub WindowCloseRequested : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveWindowCloseRequested : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2AcceleratorKeyPressedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2AcceleratorKeyPressedEventArgs {
    pub unsafe fn KeyEventKind(
        &self,
        keyeventkind: *mut COREWEBVIEW2_KEY_EVENT_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).KeyEventKind)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(keyeventkind),
        )
        .ok()
    }
    pub unsafe fn VirtualKey(&self, virtualkey: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).VirtualKey)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(virtualkey),
        )
        .ok()
    }
    pub unsafe fn KeyEventLParam(&self, lparam: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).KeyEventLParam)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(lparam),
        )
        .ok()
    }
    pub unsafe fn PhysicalKeyStatus(
        &self,
        physicalkeystatus: *mut COREWEBVIEW2_PHYSICAL_KEY_STATUS,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PhysicalKeyStatus)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(physicalkeystatus),
        )
        .ok()
    }
    pub unsafe fn Handled(
        &self,
        handled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Handled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(handled),
        )
        .ok()
    }
    pub unsafe fn SetHandled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        handled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetHandled)(
            ::core::mem::transmute_copy(self),
            handled.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2AcceleratorKeyPressedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2AcceleratorKeyPressedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2AcceleratorKeyPressedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2AcceleratorKeyPressedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2AcceleratorKeyPressedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2AcceleratorKeyPressedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2AcceleratorKeyPressedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2AcceleratorKeyPressedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2AcceleratorKeyPressedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2AcceleratorKeyPressedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2AcceleratorKeyPressedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2AcceleratorKeyPressedEventArgs {
    type Vtable = ICoreWebView2AcceleratorKeyPressedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9f760f8a_fb79_42be_9990_7b56900fa9c7);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2AcceleratorKeyPressedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub KeyEventKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        keyeventkind: *mut COREWEBVIEW2_KEY_EVENT_KIND,
    ) -> ::windows::core::HRESULT,
    pub VirtualKey: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        virtualkey: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub KeyEventLParam: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        lparam: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub PhysicalKeyStatus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        physicalkeystatus: *mut COREWEBVIEW2_PHYSICAL_KEY_STATUS,
    ) -> ::windows::core::HRESULT,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2AcceleratorKeyPressedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2AcceleratorKeyPressedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2Controller>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2AcceleratorKeyPressedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2AcceleratorKeyPressedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2AcceleratorKeyPressedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2AcceleratorKeyPressedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2AcceleratorKeyPressedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2AcceleratorKeyPressedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2AcceleratorKeyPressedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2AcceleratorKeyPressedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2AcceleratorKeyPressedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2AcceleratorKeyPressedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2AcceleratorKeyPressedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2AcceleratorKeyPressedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2AcceleratorKeyPressedEventHandler {
    type Vtable = ICoreWebView2AcceleratorKeyPressedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb29c7e28_fa79_41a8_8e44_65811c76dcb2);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2AcceleratorKeyPressedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler(
    ::windows::core::IUnknown,
);
impl ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler {
    pub unsafe fn Invoke<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        errorcode: ::windows::core::HRESULT,
        id: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(errorcode),
            id.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler {}
impl ::core::fmt::Debug for ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface
    for ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler
{
    type Vtable = ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb99369f3_9b11_47b5_bc6f_8e7895fcea17);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        errorcode: ::windows::core::HRESULT,
        id: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2BrowserProcessExitedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2BrowserProcessExitedEventArgs {
    pub unsafe fn BrowserProcessExitKind(
        &self,
        browserprocessexitkind: *mut COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).BrowserProcessExitKind)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(browserprocessexitkind),
        )
        .ok()
    }
    pub unsafe fn BrowserProcessId(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).BrowserProcessId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2BrowserProcessExitedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2BrowserProcessExitedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2BrowserProcessExitedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2BrowserProcessExitedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2BrowserProcessExitedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2BrowserProcessExitedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2BrowserProcessExitedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2BrowserProcessExitedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2BrowserProcessExitedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2BrowserProcessExitedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2BrowserProcessExitedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2BrowserProcessExitedEventArgs {
    type Vtable = ICoreWebView2BrowserProcessExitedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x1f00663f_af8c_4782_9cdd_dd01c52e34cb);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2BrowserProcessExitedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub BrowserProcessExitKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        browserprocessexitkind: *mut COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND,
    ) -> ::windows::core::HRESULT,
    pub BrowserProcessId: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut u32,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2BrowserProcessExitedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2BrowserProcessExitedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2Environment>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2BrowserProcessExitedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2BrowserProcessExitedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2BrowserProcessExitedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2BrowserProcessExitedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2BrowserProcessExitedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2BrowserProcessExitedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2BrowserProcessExitedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2BrowserProcessExitedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2BrowserProcessExitedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2BrowserProcessExitedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2BrowserProcessExitedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2BrowserProcessExitedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2BrowserProcessExitedEventHandler {
    type Vtable = ICoreWebView2BrowserProcessExitedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xfa504257_a216_4911_a860_fe8825712861);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2BrowserProcessExitedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2BytesReceivedChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2BytesReceivedChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DownloadOperation>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2BytesReceivedChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2BytesReceivedChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2BytesReceivedChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2BytesReceivedChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2BytesReceivedChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2BytesReceivedChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2BytesReceivedChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2BytesReceivedChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2BytesReceivedChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2BytesReceivedChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2BytesReceivedChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2BytesReceivedChangedEventHandler {
    type Vtable = ICoreWebView2BytesReceivedChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x828e8ab6_d94c_4264_9cef_5217170d6251);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2BytesReceivedChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2CallDevToolsProtocolMethodCompletedHandler(::windows::core::IUnknown);
impl ICoreWebView2CallDevToolsProtocolMethodCompletedHandler {
    pub unsafe fn Invoke<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        errorcode: ::windows::core::HRESULT,
        returnobjectasjson: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(errorcode),
            returnobjectasjson.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2CallDevToolsProtocolMethodCompletedHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2CallDevToolsProtocolMethodCompletedHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2CallDevToolsProtocolMethodCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2CallDevToolsProtocolMethodCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2CallDevToolsProtocolMethodCompletedHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2CallDevToolsProtocolMethodCompletedHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2CallDevToolsProtocolMethodCompletedHandler {}
impl ::core::fmt::Debug for ICoreWebView2CallDevToolsProtocolMethodCompletedHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2CallDevToolsProtocolMethodCompletedHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2CallDevToolsProtocolMethodCompletedHandler {
    type Vtable = ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5c4889f0_5ef6_4c5a_952c_d8f1b92d0574);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        errorcode: ::windows::core::HRESULT,
        returnobjectasjson: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2CapturePreviewCompletedHandler(::windows::core::IUnknown);
impl ICoreWebView2CapturePreviewCompletedHandler {
    pub unsafe fn Invoke(
        &self,
        errorcode: ::windows::core::HRESULT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(errorcode),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2CapturePreviewCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2CapturePreviewCompletedHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2CapturePreviewCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2CapturePreviewCompletedHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2CapturePreviewCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2CapturePreviewCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2CapturePreviewCompletedHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2CapturePreviewCompletedHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2CapturePreviewCompletedHandler {}
impl ::core::fmt::Debug for ICoreWebView2CapturePreviewCompletedHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2CapturePreviewCompletedHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2CapturePreviewCompletedHandler {
    type Vtable = ICoreWebView2CapturePreviewCompletedHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x697e05e9_3d8f_45fa_96f4_8ffe1ededaf5);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CapturePreviewCompletedHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        errorcode: ::windows::core::HRESULT,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2ClientCertificate(::windows::core::IUnknown);
impl ICoreWebView2ClientCertificate {
    pub unsafe fn Subject(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Subject)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn Issuer(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Issuer)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn ValidFrom(&self, value: *mut f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ValidFrom)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn ValidTo(&self, value: *mut f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ValidTo)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn DerEncodedSerialNumber(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DerEncodedSerialNumber)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn DisplayName(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DisplayName)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn ToPemEncoding(
        &self,
        pemencodeddata: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ToPemEncoding)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pemencodeddata),
        )
        .ok()
    }
    pub unsafe fn PemEncodedIssuerCertificateChain(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2StringCollection> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).PemEncodedIssuerCertificateChain)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2StringCollection>(result__)
    }
    pub unsafe fn Kind(
        &self,
        value: *mut COREWEBVIEW2_CLIENT_CERTIFICATE_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Kind)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2ClientCertificate> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2ClientCertificate) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ClientCertificate> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2ClientCertificate) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2ClientCertificate
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2ClientCertificate
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2ClientCertificate {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2ClientCertificate {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2ClientCertificate {}
impl ::core::fmt::Debug for ICoreWebView2ClientCertificate {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2ClientCertificate")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2ClientCertificate {
    type Vtable = ICoreWebView2ClientCertificate_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe7188076_bcc3_11eb_8529_0242ac130003);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ClientCertificate_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Subject: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub Issuer: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub ValidFrom: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub ValidTo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub DerEncodedSerialNumber: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub DisplayName: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub ToPemEncoding: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pemencodeddata: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub PemEncodedIssuerCertificateChain: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::windows::core::RawPtr,
    )
        -> ::windows::core::HRESULT,
    pub Kind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut COREWEBVIEW2_CLIENT_CERTIFICATE_KIND,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2ClientCertificateCollection(::windows::core::IUnknown);
impl ICoreWebView2ClientCertificateCollection {
    pub unsafe fn Count(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Count)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn GetValueAtIndex(
        &self,
        index: u32,
    ) -> ::windows::core::Result<ICoreWebView2ClientCertificate> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetValueAtIndex)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(index),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2ClientCertificate>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2ClientCertificateCollection> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2ClientCertificateCollection) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ClientCertificateCollection>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2ClientCertificateCollection) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2ClientCertificateCollection
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2ClientCertificateCollection
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2ClientCertificateCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2ClientCertificateCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2ClientCertificateCollection {}
impl ::core::fmt::Debug for ICoreWebView2ClientCertificateCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2ClientCertificateCollection")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2ClientCertificateCollection {
    type Vtable = ICoreWebView2ClientCertificateCollection_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xef5674d2_bcc3_11eb_8529_0242ac130003);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ClientCertificateCollection_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Count: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub GetValueAtIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        index: u32,
        certificate: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2ClientCertificateRequestedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2ClientCertificateRequestedEventArgs {
    pub unsafe fn Host(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Host)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn Port(&self, value: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Port)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn IsProxy(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsProxy)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn AllowedCertificateAuthorities(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2StringCollection> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).AllowedCertificateAuthorities)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2StringCollection>(result__)
    }
    pub unsafe fn MutuallyTrustedCertificates(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2ClientCertificateCollection> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).MutuallyTrustedCertificates)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2ClientCertificateCollection>(result__)
    }
    pub unsafe fn SelectedCertificate(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2ClientCertificate> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).SelectedCertificate)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2ClientCertificate>(result__)
    }
    pub unsafe fn SetSelectedCertificate<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ClientCertificate>,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetSelectedCertificate)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Cancel(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Cancel)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetCancel<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetCancel)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Handled(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Handled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetHandled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetHandled)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetDeferral(&self) -> ::windows::core::Result<ICoreWebView2Deferral> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetDeferral)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Deferral>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2ClientCertificateRequestedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2ClientCertificateRequestedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ClientCertificateRequestedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2ClientCertificateRequestedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2ClientCertificateRequestedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2ClientCertificateRequestedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2ClientCertificateRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2ClientCertificateRequestedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2ClientCertificateRequestedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2ClientCertificateRequestedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2ClientCertificateRequestedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2ClientCertificateRequestedEventArgs {
    type Vtable = ICoreWebView2ClientCertificateRequestedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbc59db28_bcc3_11eb_8529_0242ac130003);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ClientCertificateRequestedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Host: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub Port: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub IsProxy: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub AllowedCertificateAuthorities: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub MutuallyTrustedCertificates: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub SelectedCertificate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub SetSelectedCertificate: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        deferral: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2ClientCertificateRequestedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2ClientCertificateRequestedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2ClientCertificateRequestedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2ClientCertificateRequestedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2ClientCertificateRequestedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ClientCertificateRequestedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2ClientCertificateRequestedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2ClientCertificateRequestedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2ClientCertificateRequestedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2ClientCertificateRequestedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2ClientCertificateRequestedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2ClientCertificateRequestedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2ClientCertificateRequestedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2ClientCertificateRequestedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2ClientCertificateRequestedEventHandler {
    type Vtable = ICoreWebView2ClientCertificateRequestedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xd7175ba2_bcc3_11eb_8529_0242ac130003);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ClientCertificateRequestedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2CompositionController(::windows::core::IUnknown);
impl ICoreWebView2CompositionController {
    pub unsafe fn RootVisualTarget(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).RootVisualTarget)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<::windows::core::IUnknown>(result__)
    }
    pub unsafe fn SetRootVisualTarget<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        target: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetRootVisualTarget)(
            ::core::mem::transmute_copy(self),
            target.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn SendMouseInput<
        'a,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::POINT,
        >,
    >(
        &self,
        eventkind: COREWEBVIEW2_MOUSE_EVENT_KIND,
        virtualkeys: COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS,
        mousedata: u32,
        point: Param3,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SendMouseInput)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(eventkind),
            ::core::mem::transmute(virtualkeys),
            ::core::mem::transmute(mousedata),
            point.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn SendPointerInput<
        'a,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2PointerInfo>,
    >(
        &self,
        eventkind: COREWEBVIEW2_POINTER_EVENT_KIND,
        pointerinfo: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SendPointerInput)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(eventkind),
            pointerinfo.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Cursor(
        &self,
        cursor: *mut super::super::super::super::Windows::Win32::UI::WindowsAndMessaging::HCURSOR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Cursor)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cursor),
        )
        .ok()
    }
    pub unsafe fn SystemCursorId(&self, systemcursorid: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SystemCursorId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(systemcursorid),
        )
        .ok()
    }
    pub unsafe fn CursorChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2CursorChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CursorChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveCursorChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveCursorChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2CompositionController> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2CompositionController) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2CompositionController> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2CompositionController) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2CompositionController
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2CompositionController
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2CompositionController {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2CompositionController {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2CompositionController {}
impl ::core::fmt::Debug for ICoreWebView2CompositionController {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2CompositionController")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2CompositionController {
    type Vtable = ICoreWebView2CompositionController_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3df9b733_b9ae_4a15_86b4_eb9ee9826469);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CompositionController_Vtbl where { pub base : :: windows :: core :: IUnknownVtbl , pub RootVisualTarget : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , target : * mut * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT , pub SetRootVisualTarget : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , target : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT , pub SendMouseInput : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventkind : COREWEBVIEW2_MOUSE_EVENT_KIND , virtualkeys : COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS , mousedata : u32 , point : super::super::super::super::Windows::Win32::Foundation:: POINT , ) -> :: windows :: core :: HRESULT , pub SendPointerInput : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventkind : COREWEBVIEW2_POINTER_EVENT_KIND , pointerinfo : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT , pub Cursor : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , cursor : * mut super::super::super::super::Windows::Win32::UI::WindowsAndMessaging:: HCURSOR , ) -> :: windows :: core :: HRESULT , pub SystemCursorId : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , systemcursorid : * mut u32 , ) -> :: windows :: core :: HRESULT , pub CursorChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveCursorChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2CompositionController2(::windows::core::IUnknown);
impl ICoreWebView2CompositionController2 {
    pub unsafe fn RootVisualTarget(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .RootVisualTarget)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<::windows::core::IUnknown>(result__)
    }
    pub unsafe fn SetRootVisualTarget<
        'a,
        Param0: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        target: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetRootVisualTarget)(
            ::core::mem::transmute_copy(self), target.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn SendMouseInput<
        'a,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::POINT,
        >,
    >(
        &self,
        eventkind: COREWEBVIEW2_MOUSE_EVENT_KIND,
        virtualkeys: COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS,
        mousedata: u32,
        point: Param3,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.SendMouseInput)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(eventkind),
            ::core::mem::transmute(virtualkeys),
            ::core::mem::transmute(mousedata),
            point.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn SendPointerInput<
        'a,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2PointerInfo>,
    >(
        &self,
        eventkind: COREWEBVIEW2_POINTER_EVENT_KIND,
        pointerinfo: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SendPointerInput)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(eventkind),
            pointerinfo.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Cursor(
        &self,
        cursor: *mut super::super::super::super::Windows::Win32::UI::WindowsAndMessaging::HCURSOR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.Cursor)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cursor),
        )
        .ok()
    }
    pub unsafe fn SystemCursorId(&self, systemcursorid: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.SystemCursorId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(systemcursorid),
        )
        .ok()
    }
    pub unsafe fn CursorChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2CursorChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.CursorChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveCursorChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveCursorChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn UIAProvider(&self) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).UIAProvider)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<::windows::core::IUnknown>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2CompositionController2> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2CompositionController2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2CompositionController2> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2CompositionController2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2CompositionController2
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2CompositionController2
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2CompositionController2>
    for ICoreWebView2CompositionController
{
    fn from(value: ICoreWebView2CompositionController2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2CompositionController2>
    for ICoreWebView2CompositionController
{
    fn from(value: &ICoreWebView2CompositionController2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2CompositionController>
    for ICoreWebView2CompositionController2
{
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2CompositionController> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2CompositionController>
    for &ICoreWebView2CompositionController2
{
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2CompositionController> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2CompositionController2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2CompositionController2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2CompositionController2 {}
impl ::core::fmt::Debug for ICoreWebView2CompositionController2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2CompositionController2")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2CompositionController2 {
    type Vtable = ICoreWebView2CompositionController2_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0b6a3d24_49cb_4806_ba20_b5e0734a7b26);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CompositionController2_Vtbl {
    pub base: ICoreWebView2CompositionController_Vtbl,
    pub UIAProvider: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        provider: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2ContainsFullScreenElementChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2ContainsFullScreenElementChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2ContainsFullScreenElementChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2ContainsFullScreenElementChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ContainsFullScreenElementChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2ContainsFullScreenElementChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2ContainsFullScreenElementChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2ContainsFullScreenElementChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2ContainsFullScreenElementChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2ContainsFullScreenElementChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2ContainsFullScreenElementChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2ContainsFullScreenElementChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2ContainsFullScreenElementChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface
    for ICoreWebView2ContainsFullScreenElementChangedEventHandler
{
    type Vtable = ICoreWebView2ContainsFullScreenElementChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe45d98b1_afef_45be_8baf_6c7728867f73);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ContainsFullScreenElementChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2ContentLoadingEventArgs(::windows::core::IUnknown);
impl ICoreWebView2ContentLoadingEventArgs {
    pub unsafe fn IsErrorPage(
        &self,
        iserrorpage: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsErrorPage)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(iserrorpage),
        )
        .ok()
    }
    pub unsafe fn NavigationId(&self, navigationid: *mut u64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).NavigationId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(navigationid),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2ContentLoadingEventArgs> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2ContentLoadingEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ContentLoadingEventArgs> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2ContentLoadingEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2ContentLoadingEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2ContentLoadingEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2ContentLoadingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2ContentLoadingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2ContentLoadingEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2ContentLoadingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2ContentLoadingEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2ContentLoadingEventArgs {
    type Vtable = ICoreWebView2ContentLoadingEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0c8a1275_9b6b_4901_87ad_70df25bafa6e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ContentLoadingEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub IsErrorPage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        iserrorpage: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub NavigationId: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        navigationid: *mut u64,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2ContentLoadingEventHandler(::windows::core::IUnknown);
impl ICoreWebView2ContentLoadingEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2ContentLoadingEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2ContentLoadingEventHandler> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2ContentLoadingEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ContentLoadingEventHandler> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2ContentLoadingEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2ContentLoadingEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2ContentLoadingEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2ContentLoadingEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2ContentLoadingEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2ContentLoadingEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2ContentLoadingEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2ContentLoadingEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2ContentLoadingEventHandler {
    type Vtable = ICoreWebView2ContentLoadingEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x364471e7_f2be_4910_bdba_d72077d51c4b);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ContentLoadingEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2Controller(::windows::core::IUnknown);
impl ICoreWebView2Controller {
    pub unsafe fn IsVisible(
        &self,
        isvisible: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsVisible)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isvisible),
        )
        .ok()
    }
    pub unsafe fn SetIsVisible<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isvisible: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetIsVisible)(
            ::core::mem::transmute_copy(self),
            isvisible.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Bounds(
        &self,
        bounds: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Bounds)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(bounds),
        )
        .ok()
    }
    pub unsafe fn SetBounds<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::RECT,
        >,
    >(
        &self,
        bounds: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetBounds)(
            ::core::mem::transmute_copy(self),
            bounds.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ZoomFactor(&self, zoomfactor: *mut f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ZoomFactor)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(zoomfactor),
        )
        .ok()
    }
    pub unsafe fn SetZoomFactor(&self, zoomfactor: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetZoomFactor)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(zoomfactor),
        )
        .ok()
    }
    pub unsafe fn ZoomFactorChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ZoomFactorChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ZoomFactorChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveZoomFactorChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveZoomFactorChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn SetBoundsAndZoomFactor<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::RECT,
        >,
    >(
        &self,
        bounds: Param0,
        zoomfactor: f64,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetBoundsAndZoomFactor)(
            ::core::mem::transmute_copy(self),
            bounds.into_param().abi(),
            ::core::mem::transmute(zoomfactor),
        )
        .ok()
    }
    pub unsafe fn MoveFocus(
        &self,
        reason: COREWEBVIEW2_MOVE_FOCUS_REASON,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MoveFocus)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(reason),
        )
        .ok()
    }
    pub unsafe fn MoveFocusRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2MoveFocusRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MoveFocusRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveMoveFocusRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveMoveFocusRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GotFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2FocusChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GotFocus)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveGotFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveGotFocus)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn LostFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2FocusChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).LostFocus)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveLostFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveLostFocus)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AcceleratorKeyPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2AcceleratorKeyPressedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AcceleratorKeyPressed)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveAcceleratorKeyPressed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveAcceleratorKeyPressed)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ParentWindow(
        &self,
        parentwindow: *mut super::super::super::super::Windows::Win32::Foundation::HWND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ParentWindow)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(parentwindow),
        )
        .ok()
    }
    pub unsafe fn SetParentWindow<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
    >(
        &self,
        parentwindow: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetParentWindow)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NotifyParentWindowPositionChanged(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).NotifyParentWindowPositionChanged)(
            ::core::mem::transmute_copy(self),
        )
        .ok()
    }
    pub unsafe fn Close(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Close)(::core::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn CoreWebView2(&self) -> ::windows::core::Result<ICoreWebView2> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).CoreWebView2)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2Controller> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Controller) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Controller> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Controller) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Controller {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Controller {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Controller {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Controller {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Controller {}
impl ::core::fmt::Debug for ICoreWebView2Controller {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Controller")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Controller {
    type Vtable = ICoreWebView2Controller_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4d00c0d1_9434_4eb6_8078_8697a560334f);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Controller_Vtbl where { pub base : :: windows :: core :: IUnknownVtbl , pub IsVisible : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , isvisible : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetIsVisible : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , isvisible : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub Bounds : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , bounds : * mut super::super::super::super::Windows::Win32::Foundation:: RECT , ) -> :: windows :: core :: HRESULT , pub SetBounds : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , bounds : super::super::super::super::Windows::Win32::Foundation:: RECT , ) -> :: windows :: core :: HRESULT , pub ZoomFactor : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , zoomfactor : * mut f64 , ) -> :: windows :: core :: HRESULT , pub SetZoomFactor : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , zoomfactor : f64 , ) -> :: windows :: core :: HRESULT , pub ZoomFactorChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveZoomFactorChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub SetBoundsAndZoomFactor : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , bounds : super::super::super::super::Windows::Win32::Foundation:: RECT , zoomfactor : f64 , ) -> :: windows :: core :: HRESULT , pub MoveFocus : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , reason : COREWEBVIEW2_MOVE_FOCUS_REASON , ) -> :: windows :: core :: HRESULT , pub MoveFocusRequested : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveMoveFocusRequested : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub GotFocus : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveGotFocus : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub LostFocus : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveLostFocus : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub AcceleratorKeyPressed : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveAcceleratorKeyPressed : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub ParentWindow : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , parentwindow : * mut super::super::super::super::Windows::Win32::Foundation:: HWND , ) -> :: windows :: core :: HRESULT , pub SetParentWindow : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , parentwindow : super::super::super::super::Windows::Win32::Foundation:: HWND , ) -> :: windows :: core :: HRESULT , pub NotifyParentWindowPositionChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT , pub Close : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT , pub CoreWebView2 : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , corewebview2 : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2Controller2(::windows::core::IUnknown);
impl ICoreWebView2Controller2 {
    pub unsafe fn IsVisible(
        &self,
        isvisible: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.IsVisible)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isvisible),
        )
        .ok()
    }
    pub unsafe fn SetIsVisible<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isvisible: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.SetIsVisible)(
            ::core::mem::transmute_copy(self),
            isvisible.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Bounds(
        &self,
        bounds: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.Bounds)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(bounds),
        )
        .ok()
    }
    pub unsafe fn SetBounds<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::RECT,
        >,
    >(
        &self,
        bounds: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.SetBounds)(
            ::core::mem::transmute_copy(self),
            bounds.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ZoomFactor(&self, zoomfactor: *mut f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.ZoomFactor)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(zoomfactor),
        )
        .ok()
    }
    pub unsafe fn SetZoomFactor(&self, zoomfactor: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.SetZoomFactor)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(zoomfactor),
        )
        .ok()
    }
    pub unsafe fn ZoomFactorChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ZoomFactorChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .ZoomFactorChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveZoomFactorChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveZoomFactorChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn SetBoundsAndZoomFactor<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::RECT,
        >,
    >(
        &self,
        bounds: Param0,
        zoomfactor: f64,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetBoundsAndZoomFactor)(
            ::core::mem::transmute_copy(self),
            bounds.into_param().abi(),
            ::core::mem::transmute(zoomfactor),
        )
        .ok()
    }
    pub unsafe fn MoveFocus(
        &self,
        reason: COREWEBVIEW2_MOVE_FOCUS_REASON,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.MoveFocus)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(reason),
        )
        .ok()
    }
    pub unsafe fn MoveFocusRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2MoveFocusRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .MoveFocusRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveMoveFocusRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveMoveFocusRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn GotFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2FocusChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.GotFocus)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveGotFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.RemoveGotFocus)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn LostFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2FocusChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.LostFocus)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveLostFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveLostFocus)(::core::mem::transmute_copy(self), token.into_param().abi())
        .ok()
    }
    pub unsafe fn AcceleratorKeyPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2AcceleratorKeyPressedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .AcceleratorKeyPressed)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveAcceleratorKeyPressed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveAcceleratorKeyPressed)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ParentWindow(
        &self,
        parentwindow: *mut super::super::super::super::Windows::Win32::Foundation::HWND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.ParentWindow)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(parentwindow),
        )
        .ok()
    }
    pub unsafe fn SetParentWindow<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
    >(
        &self,
        parentwindow: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetParentWindow)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NotifyParentWindowPositionChanged(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .NotifyParentWindowPositionChanged)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn Close(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.Close)(::core::mem::transmute_copy(self))
            .ok()
    }
    pub unsafe fn CoreWebView2(&self) -> ::windows::core::Result<ICoreWebView2> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).base.CoreWebView2)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2>(result__)
    }
    pub unsafe fn DefaultBackgroundColor(
        &self,
        backgroundcolor: *mut COREWEBVIEW2_COLOR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DefaultBackgroundColor)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(backgroundcolor),
        )
        .ok()
    }
    pub unsafe fn SetDefaultBackgroundColor<
        'a,
        Param0: ::windows::core::IntoParam<'a, COREWEBVIEW2_COLOR>,
    >(
        &self,
        backgroundcolor: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetDefaultBackgroundColor)(
            ::core::mem::transmute_copy(self),
            backgroundcolor.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2Controller2> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Controller2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Controller2> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Controller2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Controller2 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Controller2 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Controller2> for ICoreWebView2Controller {
    fn from(value: ICoreWebView2Controller2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Controller2> for ICoreWebView2Controller {
    fn from(value: &ICoreWebView2Controller2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Controller> for ICoreWebView2Controller2 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Controller> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Controller> for &ICoreWebView2Controller2 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Controller> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Controller2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Controller2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Controller2 {}
impl ::core::fmt::Debug for ICoreWebView2Controller2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Controller2")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Controller2 {
    type Vtable = ICoreWebView2Controller2_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc979903e_d4ca_4228_92eb_47ee3fa96eab);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Controller2_Vtbl {
    pub base: ICoreWebView2Controller_Vtbl,
    pub DefaultBackgroundColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        backgroundcolor: *mut COREWEBVIEW2_COLOR,
    ) -> ::windows::core::HRESULT,
    pub SetDefaultBackgroundColor: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        backgroundcolor: COREWEBVIEW2_COLOR,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2Controller3(::windows::core::IUnknown);
impl ICoreWebView2Controller3 {
    pub unsafe fn IsVisible(
        &self,
        isvisible: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.IsVisible)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isvisible),
        )
        .ok()
    }
    pub unsafe fn SetIsVisible<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isvisible: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetIsVisible)(
            ::core::mem::transmute_copy(self),
            isvisible.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Bounds(
        &self,
        bounds: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.Bounds)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(bounds),
        )
        .ok()
    }
    pub unsafe fn SetBounds<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::RECT,
        >,
    >(
        &self,
        bounds: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.SetBounds)(
            ::core::mem::transmute_copy(self),
            bounds.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ZoomFactor(&self, zoomfactor: *mut f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .ZoomFactor)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(zoomfactor),
        )
        .ok()
    }
    pub unsafe fn SetZoomFactor(&self, zoomfactor: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetZoomFactor)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(zoomfactor),
        )
        .ok()
    }
    pub unsafe fn ZoomFactorChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ZoomFactorChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .ZoomFactorChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveZoomFactorChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveZoomFactorChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn SetBoundsAndZoomFactor<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::RECT,
        >,
    >(
        &self,
        bounds: Param0,
        zoomfactor: f64,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetBoundsAndZoomFactor)(
            ::core::mem::transmute_copy(self),
            bounds.into_param().abi(),
            ::core::mem::transmute(zoomfactor),
        )
        .ok()
    }
    pub unsafe fn MoveFocus(
        &self,
        reason: COREWEBVIEW2_MOVE_FOCUS_REASON,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.MoveFocus)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(reason),
        )
        .ok()
    }
    pub unsafe fn MoveFocusRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2MoveFocusRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .MoveFocusRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveMoveFocusRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveMoveFocusRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn GotFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2FocusChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.GotFocus)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveGotFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveGotFocus)(::core::mem::transmute_copy(self), token.into_param().abi())
        .ok()
    }
    pub unsafe fn LostFocus<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2FocusChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.LostFocus)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveLostFocus<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveLostFocus)(::core::mem::transmute_copy(self), token.into_param().abi())
        .ok()
    }
    pub unsafe fn AcceleratorKeyPressed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2AcceleratorKeyPressedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .AcceleratorKeyPressed)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveAcceleratorKeyPressed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveAcceleratorKeyPressed)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ParentWindow(
        &self,
        parentwindow: *mut super::super::super::super::Windows::Win32::Foundation::HWND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .ParentWindow)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(parentwindow),
        )
        .ok()
    }
    pub unsafe fn SetParentWindow<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
    >(
        &self,
        parentwindow: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetParentWindow)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NotifyParentWindowPositionChanged(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .NotifyParentWindowPositionChanged)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn Close(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.Close)(::core::mem::transmute_copy(
            self,
        ))
        .ok()
    }
    pub unsafe fn CoreWebView2(&self) -> ::windows::core::Result<ICoreWebView2> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .CoreWebView2)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2>(result__)
    }
    pub unsafe fn DefaultBackgroundColor(
        &self,
        backgroundcolor: *mut COREWEBVIEW2_COLOR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .DefaultBackgroundColor)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(backgroundcolor),
        )
        .ok()
    }
    pub unsafe fn SetDefaultBackgroundColor<
        'a,
        Param0: ::windows::core::IntoParam<'a, COREWEBVIEW2_COLOR>,
    >(
        &self,
        backgroundcolor: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetDefaultBackgroundColor)(
            ::core::mem::transmute_copy(self),
            backgroundcolor.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RasterizationScale(&self, scale: *mut f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RasterizationScale)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(scale),
        )
        .ok()
    }
    pub unsafe fn SetRasterizationScale(&self, scale: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetRasterizationScale)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(scale),
        )
        .ok()
    }
    pub unsafe fn ShouldDetectMonitorScaleChanges(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ShouldDetectMonitorScaleChanges)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetShouldDetectMonitorScaleChanges<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetShouldDetectMonitorScaleChanges)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RasterizationScaleChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2RasterizationScaleChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RasterizationScaleChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveRasterizationScaleChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveRasterizationScaleChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn BoundsMode(
        &self,
        boundsmode: *mut COREWEBVIEW2_BOUNDS_MODE,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).BoundsMode)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(boundsmode),
        )
        .ok()
    }
    pub unsafe fn SetBoundsMode(
        &self,
        boundsmode: COREWEBVIEW2_BOUNDS_MODE,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetBoundsMode)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(boundsmode),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2Controller3> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Controller3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Controller3> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Controller3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Controller3 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Controller3 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Controller3> for ICoreWebView2Controller {
    fn from(value: ICoreWebView2Controller3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Controller3> for ICoreWebView2Controller {
    fn from(value: &ICoreWebView2Controller3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Controller> for ICoreWebView2Controller3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Controller> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Controller> for &ICoreWebView2Controller3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Controller> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Controller3> for ICoreWebView2Controller2 {
    fn from(value: ICoreWebView2Controller3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Controller3> for ICoreWebView2Controller2 {
    fn from(value: &ICoreWebView2Controller3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Controller2> for ICoreWebView2Controller3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Controller2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Controller2> for &ICoreWebView2Controller3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Controller2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Controller3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Controller3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Controller3 {}
impl ::core::fmt::Debug for ICoreWebView2Controller3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Controller3")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Controller3 {
    type Vtable = ICoreWebView2Controller3_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xf9614724_5d2b_41dc_aef7_73d62b51543b);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Controller3_Vtbl where { pub base : ICoreWebView2Controller2_Vtbl , pub RasterizationScale : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , scale : * mut f64 , ) -> :: windows :: core :: HRESULT , pub SetRasterizationScale : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , scale : f64 , ) -> :: windows :: core :: HRESULT , pub ShouldDetectMonitorScaleChanges : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , value : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetShouldDetectMonitorScaleChanges : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , value : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub RasterizationScaleChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveRasterizationScaleChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub BoundsMode : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , boundsmode : * mut COREWEBVIEW2_BOUNDS_MODE , ) -> :: windows :: core :: HRESULT , pub SetBoundsMode : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , boundsmode : COREWEBVIEW2_BOUNDS_MODE , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2Cookie(::windows::core::IUnknown);
impl ICoreWebView2Cookie {
    pub unsafe fn Name(
        &self,
        name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Name)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(name),
        )
        .ok()
    }
    pub unsafe fn Value(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Value)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetValue<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetValue)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Domain(
        &self,
        domain: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Domain)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(domain),
        )
        .ok()
    }
    pub unsafe fn Path(
        &self,
        path: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Path)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(path),
        )
        .ok()
    }
    pub unsafe fn Expires(&self, expires: *mut f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Expires)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(expires),
        )
        .ok()
    }
    pub unsafe fn SetExpires(&self, expires: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetExpires)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(expires),
        )
        .ok()
    }
    pub unsafe fn IsHttpOnly(
        &self,
        ishttponly: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsHttpOnly)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(ishttponly),
        )
        .ok()
    }
    pub unsafe fn SetIsHttpOnly<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        ishttponly: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetIsHttpOnly)(
            ::core::mem::transmute_copy(self),
            ishttponly.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn SameSite(
        &self,
        samesite: *mut COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SameSite)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(samesite),
        )
        .ok()
    }
    pub unsafe fn SetSameSite(
        &self,
        samesite: COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetSameSite)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(samesite),
        )
        .ok()
    }
    pub unsafe fn IsSecure(
        &self,
        issecure: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsSecure)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(issecure),
        )
        .ok()
    }
    pub unsafe fn SetIsSecure<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        issecure: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetIsSecure)(
            ::core::mem::transmute_copy(self),
            issecure.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsSession(
        &self,
        issession: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsSession)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(issession),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2Cookie> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Cookie) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Cookie> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Cookie) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Cookie {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Cookie {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Cookie {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Cookie {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Cookie {}
impl ::core::fmt::Debug for ICoreWebView2Cookie {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Cookie").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Cookie {
    type Vtable = ICoreWebView2Cookie_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xad26d6be_1486_43e6_bf87_a2034006ca21);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Cookie_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Name: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub Value: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub SetValue: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub Domain: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        domain: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub Path: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        path: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub Expires: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        expires: *mut f64,
    ) -> ::windows::core::HRESULT,
    pub SetExpires: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        expires: f64,
    ) -> ::windows::core::HRESULT,
    pub IsHttpOnly: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        ishttponly: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetIsHttpOnly: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        ishttponly: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SameSite: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        samesite: *mut COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
    ) -> ::windows::core::HRESULT,
    pub SetSameSite: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        samesite: COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
    ) -> ::windows::core::HRESULT,
    pub IsSecure: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        issecure: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetIsSecure: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        issecure: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub IsSession: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        issession: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2CookieList(::windows::core::IUnknown);
impl ICoreWebView2CookieList {
    pub unsafe fn Count(&self, count: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Count)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(count),
        )
        .ok()
    }
    pub unsafe fn GetValueAtIndex(
        &self,
        index: u32,
    ) -> ::windows::core::Result<ICoreWebView2Cookie> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetValueAtIndex)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(index),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Cookie>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2CookieList> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2CookieList) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2CookieList> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2CookieList) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2CookieList {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2CookieList {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2CookieList {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2CookieList {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2CookieList {}
impl ::core::fmt::Debug for ICoreWebView2CookieList {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2CookieList")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2CookieList {
    type Vtable = ICoreWebView2CookieList_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xf7f6f714_5d2a_43c6_9503_346ece02d186);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CookieList_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Count: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        count: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub GetValueAtIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        index: u32,
        cookie: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2CookieManager(::windows::core::IUnknown);
impl ICoreWebView2CookieManager {
    pub unsafe fn CreateCookie<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        value: Param1,
        domain: Param2,
        path: Param3,
    ) -> ::windows::core::Result<ICoreWebView2Cookie> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).CreateCookie)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            value.into_param().abi(),
            domain.into_param().abi(),
            path.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Cookie>(result__)
    }
    pub unsafe fn CopyCookie<'a, Param0: ::windows::core::IntoParam<'a, ICoreWebView2Cookie>>(
        &self,
        cookieparam: Param0,
    ) -> ::windows::core::Result<ICoreWebView2Cookie> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).CopyCookie)(
            ::core::mem::transmute_copy(self),
            cookieparam.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Cookie>(result__)
    }
    pub unsafe fn GetCookies<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2GetCookiesCompletedHandler>,
    >(
        &self,
        uri: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetCookies)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddOrUpdateCookie<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2Cookie>,
    >(
        &self,
        cookie: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AddOrUpdateCookie)(
            ::core::mem::transmute_copy(self),
            cookie.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DeleteCookie<'a, Param0: ::windows::core::IntoParam<'a, ICoreWebView2Cookie>>(
        &self,
        cookie: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DeleteCookie)(
            ::core::mem::transmute_copy(self),
            cookie.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DeleteCookies<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        uri: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DeleteCookies)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            uri.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DeleteCookiesWithDomainAndPath<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        domain: Param1,
        path: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DeleteCookiesWithDomainAndPath)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            domain.into_param().abi(),
            path.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DeleteAllCookies(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DeleteAllCookies)(::core::mem::transmute_copy(
            self,
        ))
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2CookieManager> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2CookieManager) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2CookieManager> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2CookieManager) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2CookieManager {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2CookieManager {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2CookieManager {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2CookieManager {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2CookieManager {}
impl ::core::fmt::Debug for ICoreWebView2CookieManager {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2CookieManager")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2CookieManager {
    type Vtable = ICoreWebView2CookieManager_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x177cd9e7_b6f5_451a_94a0_5d7a3a4c4141);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CookieManager_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub CreateCookie: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        domain: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        path: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        cookie: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub CopyCookie: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        cookieparam: ::windows::core::RawPtr,
        cookie: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub GetCookies: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        handler: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub AddOrUpdateCookie: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        cookie: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub DeleteCookie: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        cookie: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub DeleteCookies: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub DeleteCookiesWithDomainAndPath: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        domain: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        path: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub DeleteAllCookies:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler(
    ::windows::core::IUnknown,
);
impl ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler {
    pub unsafe fn Invoke<
        'a,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2CompositionController>,
    >(
        &self,
        errorcode: ::windows::core::HRESULT,
        webview: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(errorcode),
            webview.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq
    for ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler
{
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler {}
impl ::core::fmt::Debug for ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface
    for ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler
{
    type Vtable = ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x02fab84b_1428_4fb7_ad45_1b2e64736184);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        errorcode: ::windows::core::HRESULT,
        webview: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2CreateCoreWebView2ControllerCompletedHandler(::windows::core::IUnknown);
impl ICoreWebView2CreateCoreWebView2ControllerCompletedHandler {
    pub unsafe fn Invoke<'a, Param1: ::windows::core::IntoParam<'a, ICoreWebView2Controller>>(
        &self,
        errorcode: ::windows::core::HRESULT,
        createdcontroller: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(errorcode),
            createdcontroller.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2CreateCoreWebView2ControllerCompletedHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2CreateCoreWebView2ControllerCompletedHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2CreateCoreWebView2ControllerCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2CreateCoreWebView2ControllerCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2CreateCoreWebView2ControllerCompletedHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2CreateCoreWebView2ControllerCompletedHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2CreateCoreWebView2ControllerCompletedHandler {}
impl ::core::fmt::Debug for ICoreWebView2CreateCoreWebView2ControllerCompletedHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2CreateCoreWebView2ControllerCompletedHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface
    for ICoreWebView2CreateCoreWebView2ControllerCompletedHandler
{
    type Vtable = ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x6c4819f3_c9b7_4260_8127_c9f5bde7f68c);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        errorcode: ::windows::core::HRESULT,
        createdcontroller: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler(::windows::core::IUnknown);
impl ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler {
    pub unsafe fn Invoke<'a, Param1: ::windows::core::IntoParam<'a, ICoreWebView2Environment>>(
        &self,
        errorcode: ::windows::core::HRESULT,
        createdenvironment: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(errorcode),
            createdenvironment.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler {}
impl ::core::fmt::Debug for ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface
    for ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler
{
    type Vtable = ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4e8a3389_c9d8_4bd2_b6b5_124fee6cc14d);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        errorcode: ::windows::core::HRESULT,
        createdenvironment: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2CursorChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2CursorChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2CompositionController>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2CursorChangedEventHandler> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2CursorChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2CursorChangedEventHandler> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2CursorChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2CursorChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2CursorChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2CursorChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2CursorChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2CursorChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2CursorChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2CursorChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2CursorChangedEventHandler {
    type Vtable = ICoreWebView2CursorChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9da43ccc_26e1_4dad_b56c_d8961c94c571);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2CursorChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2DOMContentLoadedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2DOMContentLoadedEventArgs {
    pub unsafe fn NavigationId(&self, navigationid: *mut u64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).NavigationId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(navigationid),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2DOMContentLoadedEventArgs> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2DOMContentLoadedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2DOMContentLoadedEventArgs> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2DOMContentLoadedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2DOMContentLoadedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2DOMContentLoadedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2DOMContentLoadedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2DOMContentLoadedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2DOMContentLoadedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2DOMContentLoadedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2DOMContentLoadedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2DOMContentLoadedEventArgs {
    type Vtable = ICoreWebView2DOMContentLoadedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x16b1e21a_c503_44f2_84c9_70aba5031283);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DOMContentLoadedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub NavigationId: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        navigationid: *mut u64,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2DOMContentLoadedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2DOMContentLoadedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2DOMContentLoadedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2DOMContentLoadedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2DOMContentLoadedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2DOMContentLoadedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2DOMContentLoadedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2DOMContentLoadedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2DOMContentLoadedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2DOMContentLoadedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2DOMContentLoadedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2DOMContentLoadedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2DOMContentLoadedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2DOMContentLoadedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2DOMContentLoadedEventHandler {
    type Vtable = ICoreWebView2DOMContentLoadedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4bac7e9c_199e_49ed_87ed_249303acf019);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DOMContentLoadedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2Deferral(::windows::core::IUnknown);
impl ICoreWebView2Deferral {
    pub unsafe fn Complete(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Complete)(::core::mem::transmute_copy(self)).ok()
    }
}
impl ::core::convert::From<ICoreWebView2Deferral> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Deferral) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Deferral> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Deferral) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Deferral {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Deferral {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Deferral {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Deferral {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Deferral {}
impl ::core::fmt::Debug for ICoreWebView2Deferral {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Deferral")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Deferral {
    type Vtable = ICoreWebView2Deferral_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc10e7f7b_b585_46f0_a623_8befbf3e4ee0);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Deferral_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Complete:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2DevToolsProtocolEventReceivedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2DevToolsProtocolEventReceivedEventArgs {
    pub unsafe fn ParameterObjectAsJson(
        &self,
        parameterobjectasjson: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ParameterObjectAsJson)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(parameterobjectasjson),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2DevToolsProtocolEventReceivedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2DevToolsProtocolEventReceivedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2DevToolsProtocolEventReceivedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2DevToolsProtocolEventReceivedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2DevToolsProtocolEventReceivedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2DevToolsProtocolEventReceivedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2DevToolsProtocolEventReceivedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2DevToolsProtocolEventReceivedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2DevToolsProtocolEventReceivedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2DevToolsProtocolEventReceivedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2DevToolsProtocolEventReceivedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2DevToolsProtocolEventReceivedEventArgs {
    type Vtable = ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x653c2959_bb3a_4377_8632_b58ada4e66c4);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub ParameterObjectAsJson: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        parameterobjectasjson: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2DevToolsProtocolEventReceivedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2DevToolsProtocolEventReceivedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2DevToolsProtocolEventReceivedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2DevToolsProtocolEventReceivedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2DevToolsProtocolEventReceivedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2DevToolsProtocolEventReceivedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2DevToolsProtocolEventReceivedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2DevToolsProtocolEventReceivedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2DevToolsProtocolEventReceivedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2DevToolsProtocolEventReceivedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2DevToolsProtocolEventReceivedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2DevToolsProtocolEventReceivedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2DevToolsProtocolEventReceivedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2DevToolsProtocolEventReceivedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2DevToolsProtocolEventReceivedEventHandler {
    type Vtable = ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe2fda4be_5456_406c_a261_3d452138362c);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2DevToolsProtocolEventReceiver(::windows::core::IUnknown);
impl ICoreWebView2DevToolsProtocolEventReceiver {
    pub unsafe fn DevToolsProtocolEventReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DevToolsProtocolEventReceivedEventHandler>,
    >(
        &self,
        handler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DevToolsProtocolEventReceived)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDevToolsProtocolEventReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveDevToolsProtocolEventReceived)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2DevToolsProtocolEventReceiver>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2DevToolsProtocolEventReceiver) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2DevToolsProtocolEventReceiver>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2DevToolsProtocolEventReceiver) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2DevToolsProtocolEventReceiver
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2DevToolsProtocolEventReceiver
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2DevToolsProtocolEventReceiver {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2DevToolsProtocolEventReceiver {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2DevToolsProtocolEventReceiver {}
impl ::core::fmt::Debug for ICoreWebView2DevToolsProtocolEventReceiver {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2DevToolsProtocolEventReceiver")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2DevToolsProtocolEventReceiver {
    type Vtable = ICoreWebView2DevToolsProtocolEventReceiver_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb32ca51a_8371_45e9_9317_af021d080367);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DevToolsProtocolEventReceiver_Vtbl where { pub base : :: windows :: core :: IUnknownVtbl , pub DevToolsProtocolEventReceived : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , handler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveDevToolsProtocolEventReceived : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2DocumentTitleChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2DocumentTitleChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2DocumentTitleChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2DocumentTitleChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2DocumentTitleChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2DocumentTitleChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2DocumentTitleChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2DocumentTitleChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2DocumentTitleChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2DocumentTitleChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2DocumentTitleChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2DocumentTitleChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2DocumentTitleChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2DocumentTitleChangedEventHandler {
    type Vtable = ICoreWebView2DocumentTitleChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xf5f2b923_953e_4042_9f95_f3a118e1afd4);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DocumentTitleChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2DownloadOperation(::windows::core::IUnknown);
impl ICoreWebView2DownloadOperation {
    pub unsafe fn BytesReceivedChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2BytesReceivedChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).BytesReceivedChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveBytesReceivedChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveBytesReceivedChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn EstimatedEndTimeChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2EstimatedEndTimeChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).EstimatedEndTimeChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveEstimatedEndTimeChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveEstimatedEndTimeChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn StateChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2StateChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).StateChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveStateChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveStateChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Uri(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Uri)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn ContentDisposition(
        &self,
        contentdisposition: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ContentDisposition)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(contentdisposition),
        )
        .ok()
    }
    pub unsafe fn MimeType(
        &self,
        mimetype: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MimeType)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(mimetype),
        )
        .ok()
    }
    pub unsafe fn TotalBytesToReceive(
        &self,
        totalbytestoreceive: *mut i64,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).TotalBytesToReceive)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(totalbytestoreceive),
        )
        .ok()
    }
    pub unsafe fn BytesReceived(&self, bytesreceived: *mut i64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).BytesReceived)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(bytesreceived),
        )
        .ok()
    }
    pub unsafe fn EstimatedEndTime(
        &self,
        estimatedendtime: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).EstimatedEndTime)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(estimatedendtime),
        )
        .ok()
    }
    pub unsafe fn ResultFilePath(
        &self,
        resultfilepath: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ResultFilePath)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(resultfilepath),
        )
        .ok()
    }
    pub unsafe fn State(
        &self,
        downloadstate: *mut COREWEBVIEW2_DOWNLOAD_STATE,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).State)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(downloadstate),
        )
        .ok()
    }
    pub unsafe fn InterruptReason(
        &self,
        interruptreason: *mut COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).InterruptReason)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(interruptreason),
        )
        .ok()
    }
    pub unsafe fn Cancel(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Cancel)(::core::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Pause(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Pause)(::core::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Resume)(::core::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn CanResume(
        &self,
        canresume: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CanResume)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(canresume),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2DownloadOperation> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2DownloadOperation) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2DownloadOperation> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2DownloadOperation) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2DownloadOperation
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2DownloadOperation
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2DownloadOperation {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2DownloadOperation {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2DownloadOperation {}
impl ::core::fmt::Debug for ICoreWebView2DownloadOperation {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2DownloadOperation")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2DownloadOperation {
    type Vtable = ICoreWebView2DownloadOperation_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3d6b6cf2_afe1_44c7_a995_c65117714336);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DownloadOperation_Vtbl where { pub base : :: windows :: core :: IUnknownVtbl , pub BytesReceivedChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveBytesReceivedChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub EstimatedEndTimeChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveEstimatedEndTimeChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub StateChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveStateChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub Uri : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , uri : * mut super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub ContentDisposition : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , contentdisposition : * mut super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub MimeType : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , mimetype : * mut super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub TotalBytesToReceive : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , totalbytestoreceive : * mut i64 , ) -> :: windows :: core :: HRESULT , pub BytesReceived : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , bytesreceived : * mut i64 , ) -> :: windows :: core :: HRESULT , pub EstimatedEndTime : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , estimatedendtime : * mut super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub ResultFilePath : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , resultfilepath : * mut super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub State : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , downloadstate : * mut COREWEBVIEW2_DOWNLOAD_STATE , ) -> :: windows :: core :: HRESULT , pub InterruptReason : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , interruptreason : * mut COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON , ) -> :: windows :: core :: HRESULT , pub Cancel : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT , pub Pause : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT , pub Resume : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT , pub CanResume : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , canresume : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2DownloadStartingEventArgs(::windows::core::IUnknown);
impl ICoreWebView2DownloadStartingEventArgs {
    pub unsafe fn DownloadOperation(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2DownloadOperation> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).DownloadOperation)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2DownloadOperation>(result__)
    }
    pub unsafe fn Cancel(
        &self,
        cancel: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Cancel)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cancel),
        )
        .ok()
    }
    pub unsafe fn SetCancel<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        cancel: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetCancel)(
            ::core::mem::transmute_copy(self),
            cancel.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ResultFilePath(
        &self,
        resultfilepath: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ResultFilePath)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(resultfilepath),
        )
        .ok()
    }
    pub unsafe fn SetResultFilePath<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        resultfilepath: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetResultFilePath)(
            ::core::mem::transmute_copy(self),
            resultfilepath.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Handled(
        &self,
        handled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Handled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(handled),
        )
        .ok()
    }
    pub unsafe fn SetHandled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        handled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetHandled)(
            ::core::mem::transmute_copy(self),
            handled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetDeferral(&self) -> ::windows::core::Result<ICoreWebView2Deferral> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetDeferral)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Deferral>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2DownloadStartingEventArgs> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2DownloadStartingEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2DownloadStartingEventArgs> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2DownloadStartingEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2DownloadStartingEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2DownloadStartingEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2DownloadStartingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2DownloadStartingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2DownloadStartingEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2DownloadStartingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2DownloadStartingEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2DownloadStartingEventArgs {
    type Vtable = ICoreWebView2DownloadStartingEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe99bbe21_43e9_4544_a732_282764eafa60);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DownloadStartingEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub DownloadOperation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        downloadoperation: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        cancel: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        cancel: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub ResultFilePath: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        resultfilepath: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub SetResultFilePath: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        resultfilepath: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        deferral: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2DownloadStartingEventHandler(::windows::core::IUnknown);
impl ICoreWebView2DownloadStartingEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2DownloadStartingEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2DownloadStartingEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2DownloadStartingEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2DownloadStartingEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2DownloadStartingEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2DownloadStartingEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2DownloadStartingEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2DownloadStartingEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2DownloadStartingEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2DownloadStartingEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2DownloadStartingEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2DownloadStartingEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2DownloadStartingEventHandler {
    type Vtable = ICoreWebView2DownloadStartingEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xefedc989_c396_41ca_83f7_07f845a55724);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2DownloadStartingEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2Environment(::windows::core::IUnknown);
impl ICoreWebView2Environment {
    pub unsafe fn CreateCoreWebView2Controller<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>,
    >(
        &self,
        parentwindow: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CreateCoreWebView2Controller)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateWebResourceResponse<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        content: Param0,
        statuscode: i32,
        reasonphrase: Param2,
        headers: Param3,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceResponse> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).CreateWebResourceResponse)(
            ::core::mem::transmute_copy(self),
            content.into_param().abi(),
            ::core::mem::transmute(statuscode),
            reasonphrase.into_param().abi(),
            headers.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceResponse>(result__)
    }
    pub unsafe fn BrowserVersionString(
        &self,
        versioninfo: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).BrowserVersionString)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(versioninfo),
        )
        .ok()
    }
    pub unsafe fn NewBrowserVersionAvailable<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewBrowserVersionAvailableEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).NewBrowserVersionAvailable)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewBrowserVersionAvailable<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveNewBrowserVersionAvailable)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2Environment> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Environment) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Environment) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Environment {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Environment {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Environment {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Environment {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Environment {}
impl ::core::fmt::Debug for ICoreWebView2Environment {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Environment")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Environment {
    type Vtable = ICoreWebView2Environment_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb96d755e_0319_4e92_a296_23436f46a1fc);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment_Vtbl where { pub base : :: windows :: core :: IUnknownVtbl , pub CreateCoreWebView2Controller : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , parentwindow : super::super::super::super::Windows::Win32::Foundation:: HWND , handler : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT , pub CreateWebResourceResponse : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , content : :: windows :: core :: RawPtr , statuscode : i32 , reasonphrase : super::super::super::super::Windows::Win32::Foundation:: PWSTR , headers : super::super::super::super::Windows::Win32::Foundation:: PWSTR , response : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT , pub BrowserVersionString : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , versioninfo : * mut super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub NewBrowserVersionAvailable : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveNewBrowserVersionAvailable : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2Environment2(::windows::core::IUnknown);
impl ICoreWebView2Environment2 {
    pub unsafe fn CreateCoreWebView2Controller<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>,
    >(
        &self,
        parentwindow: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .CreateCoreWebView2Controller)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateWebResourceResponse<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        content: Param0,
        statuscode: i32,
        reasonphrase: Param2,
        headers: Param3,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceResponse> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .CreateWebResourceResponse)(
            ::core::mem::transmute_copy(self),
            content.into_param().abi(),
            ::core::mem::transmute(statuscode),
            reasonphrase.into_param().abi(),
            headers.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceResponse>(result__)
    }
    pub unsafe fn BrowserVersionString(
        &self,
        versioninfo: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .BrowserVersionString)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(versioninfo),
        )
        .ok()
    }
    pub unsafe fn NewBrowserVersionAvailable<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewBrowserVersionAvailableEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .NewBrowserVersionAvailable)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewBrowserVersionAvailable<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveNewBrowserVersionAvailable)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateWebResourceRequest<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        method: Param1,
        postdata: Param2,
        headers: Param3,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceRequest> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).CreateWebResourceRequest)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            method.into_param().abi(),
            postdata.into_param().abi(),
            headers.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceRequest>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2Environment2> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Environment2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment2> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Environment2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Environment2 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Environment2 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment2> for ICoreWebView2Environment {
    fn from(value: ICoreWebView2Environment2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment2> for ICoreWebView2Environment {
    fn from(value: &ICoreWebView2Environment2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment> for ICoreWebView2Environment2 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment> for &ICoreWebView2Environment2 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Environment2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Environment2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Environment2 {}
impl ::core::fmt::Debug for ICoreWebView2Environment2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Environment2")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Environment2 {
    type Vtable = ICoreWebView2Environment2_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x41f3632b_5ef4_404f_ad82_2d606c5a9a21);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment2_Vtbl {
    pub base: ICoreWebView2Environment_Vtbl,
    pub CreateWebResourceRequest: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        method: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        postdata: ::windows::core::RawPtr,
        headers: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        request: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2Environment3(::windows::core::IUnknown);
impl ICoreWebView2Environment3 {
    pub unsafe fn CreateCoreWebView2Controller<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>,
    >(
        &self,
        parentwindow: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .CreateCoreWebView2Controller)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateWebResourceResponse<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        content: Param0,
        statuscode: i32,
        reasonphrase: Param2,
        headers: Param3,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceResponse> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .CreateWebResourceResponse)(
            ::core::mem::transmute_copy(self),
            content.into_param().abi(),
            ::core::mem::transmute(statuscode),
            reasonphrase.into_param().abi(),
            headers.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceResponse>(result__)
    }
    pub unsafe fn BrowserVersionString(
        &self,
        versioninfo: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .BrowserVersionString)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(versioninfo),
        )
        .ok()
    }
    pub unsafe fn NewBrowserVersionAvailable<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewBrowserVersionAvailableEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .NewBrowserVersionAvailable)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewBrowserVersionAvailable<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveNewBrowserVersionAvailable)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateWebResourceRequest<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        method: Param1,
        postdata: Param2,
        headers: Param3,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceRequest> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .CreateWebResourceRequest)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            method.into_param().abi(),
            postdata.into_param().abi(),
            headers.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceRequest>(result__)
    }
    pub unsafe fn CreateCoreWebView2CompositionController<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler,
        >,
    >(
        &self,
        parentwindow: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CreateCoreWebView2CompositionController)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateCoreWebView2PointerInfo(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2PointerInfo> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).CreateCoreWebView2PointerInfo)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2PointerInfo>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2Environment3> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Environment3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment3> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Environment3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Environment3 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Environment3 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment3> for ICoreWebView2Environment {
    fn from(value: ICoreWebView2Environment3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment3> for ICoreWebView2Environment {
    fn from(value: &ICoreWebView2Environment3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment> for ICoreWebView2Environment3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment> for &ICoreWebView2Environment3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment3> for ICoreWebView2Environment2 {
    fn from(value: ICoreWebView2Environment3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment3> for ICoreWebView2Environment2 {
    fn from(value: &ICoreWebView2Environment3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment2> for ICoreWebView2Environment3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment2> for &ICoreWebView2Environment3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Environment3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Environment3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Environment3 {}
impl ::core::fmt::Debug for ICoreWebView2Environment3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Environment3")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Environment3 {
    type Vtable = ICoreWebView2Environment3_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x80a22ae3_be7c_4ce2_afe1_5a50056cdeeb);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment3_Vtbl {
    pub base: ICoreWebView2Environment2_Vtbl,
    pub CreateCoreWebView2CompositionController:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            parentwindow: super::super::super::super::Windows::Win32::Foundation::HWND,
            handler: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT,
    pub CreateCoreWebView2PointerInfo: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pointerinfo: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2Environment4(::windows::core::IUnknown);
impl ICoreWebView2Environment4 {
    pub unsafe fn CreateCoreWebView2Controller<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>,
    >(
        &self,
        parentwindow: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .CreateCoreWebView2Controller)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateWebResourceResponse<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        content: Param0,
        statuscode: i32,
        reasonphrase: Param2,
        headers: Param3,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceResponse> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .CreateWebResourceResponse)(
            ::core::mem::transmute_copy(self),
            content.into_param().abi(),
            ::core::mem::transmute(statuscode),
            reasonphrase.into_param().abi(),
            headers.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceResponse>(result__)
    }
    pub unsafe fn BrowserVersionString(
        &self,
        versioninfo: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .BrowserVersionString)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(versioninfo),
        )
        .ok()
    }
    pub unsafe fn NewBrowserVersionAvailable<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewBrowserVersionAvailableEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .NewBrowserVersionAvailable)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewBrowserVersionAvailable<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveNewBrowserVersionAvailable)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateWebResourceRequest<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        method: Param1,
        postdata: Param2,
        headers: Param3,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceRequest> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .CreateWebResourceRequest)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            method.into_param().abi(),
            postdata.into_param().abi(),
            headers.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceRequest>(result__)
    }
    pub unsafe fn CreateCoreWebView2CompositionController<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler,
        >,
    >(
        &self,
        parentwindow: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .CreateCoreWebView2CompositionController)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateCoreWebView2PointerInfo(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2PointerInfo> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .CreateCoreWebView2PointerInfo)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2PointerInfo>(result__)
    }
    pub unsafe fn GetProviderForHwnd<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
    >(
        &self,
        hwnd: Param0,
    ) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetProviderForHwnd)(
            ::core::mem::transmute_copy(self),
            hwnd.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<::windows::core::IUnknown>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2Environment4> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Environment4) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment4> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Environment4) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Environment4 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Environment4 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment4> for ICoreWebView2Environment {
    fn from(value: ICoreWebView2Environment4) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment4> for ICoreWebView2Environment {
    fn from(value: &ICoreWebView2Environment4) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment> for ICoreWebView2Environment4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment> for &ICoreWebView2Environment4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment4> for ICoreWebView2Environment2 {
    fn from(value: ICoreWebView2Environment4) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment4> for ICoreWebView2Environment2 {
    fn from(value: &ICoreWebView2Environment4) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment2> for ICoreWebView2Environment4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment2> for &ICoreWebView2Environment4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment4> for ICoreWebView2Environment3 {
    fn from(value: ICoreWebView2Environment4) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment4> for ICoreWebView2Environment3 {
    fn from(value: &ICoreWebView2Environment4) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment3> for ICoreWebView2Environment4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment3> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment3> for &ICoreWebView2Environment4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment3> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Environment4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Environment4 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Environment4 {}
impl ::core::fmt::Debug for ICoreWebView2Environment4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Environment4")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Environment4 {
    type Vtable = ICoreWebView2Environment4_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x20944379_6dcf_41d6_a0a0_abc0fc50de0d);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment4_Vtbl {
    pub base: ICoreWebView2Environment3_Vtbl,
    pub GetProviderForHwnd: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        hwnd: super::super::super::super::Windows::Win32::Foundation::HWND,
        provider: *mut *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2Environment5(::windows::core::IUnknown);
impl ICoreWebView2Environment5 {
    pub unsafe fn CreateCoreWebView2Controller<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>,
    >(
        &self,
        parentwindow: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .CreateCoreWebView2Controller)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateWebResourceResponse<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        content: Param0,
        statuscode: i32,
        reasonphrase: Param2,
        headers: Param3,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceResponse> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .CreateWebResourceResponse)(
            ::core::mem::transmute_copy(self),
            content.into_param().abi(),
            ::core::mem::transmute(statuscode),
            reasonphrase.into_param().abi(),
            headers.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceResponse>(result__)
    }
    pub unsafe fn BrowserVersionString(
        &self,
        versioninfo: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .BrowserVersionString)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(versioninfo),
        )
        .ok()
    }
    pub unsafe fn NewBrowserVersionAvailable<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewBrowserVersionAvailableEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .NewBrowserVersionAvailable)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewBrowserVersionAvailable<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveNewBrowserVersionAvailable)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateWebResourceRequest<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        method: Param1,
        postdata: Param2,
        headers: Param3,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceRequest> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .CreateWebResourceRequest)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            method.into_param().abi(),
            postdata.into_param().abi(),
            headers.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceRequest>(result__)
    }
    pub unsafe fn CreateCoreWebView2CompositionController<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler,
        >,
    >(
        &self,
        parentwindow: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .CreateCoreWebView2CompositionController)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateCoreWebView2PointerInfo(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2PointerInfo> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .CreateCoreWebView2PointerInfo)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2PointerInfo>(result__)
    }
    pub unsafe fn GetProviderForHwnd<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
    >(
        &self,
        hwnd: Param0,
    ) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .GetProviderForHwnd)(
            ::core::mem::transmute_copy(self),
            hwnd.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<::windows::core::IUnknown>(result__)
    }
    pub unsafe fn BrowserProcessExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2BrowserProcessExitedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).BrowserProcessExited)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveBrowserProcessExited<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveBrowserProcessExited)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2Environment5> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Environment5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment5> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Environment5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Environment5 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Environment5 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment5> for ICoreWebView2Environment {
    fn from(value: ICoreWebView2Environment5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment5> for ICoreWebView2Environment {
    fn from(value: &ICoreWebView2Environment5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment> for ICoreWebView2Environment5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment> for &ICoreWebView2Environment5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment5> for ICoreWebView2Environment2 {
    fn from(value: ICoreWebView2Environment5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment5> for ICoreWebView2Environment2 {
    fn from(value: &ICoreWebView2Environment5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment2> for ICoreWebView2Environment5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment2> for &ICoreWebView2Environment5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment5> for ICoreWebView2Environment3 {
    fn from(value: ICoreWebView2Environment5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment5> for ICoreWebView2Environment3 {
    fn from(value: &ICoreWebView2Environment5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment3> for ICoreWebView2Environment5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment3> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment3> for &ICoreWebView2Environment5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment3> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment5> for ICoreWebView2Environment4 {
    fn from(value: ICoreWebView2Environment5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment5> for ICoreWebView2Environment4 {
    fn from(value: &ICoreWebView2Environment5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment4> for ICoreWebView2Environment5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment4> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment4> for &ICoreWebView2Environment5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment4> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Environment5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Environment5 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Environment5 {}
impl ::core::fmt::Debug for ICoreWebView2Environment5 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Environment5")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Environment5 {
    type Vtable = ICoreWebView2Environment5_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x319e423d_e0d7_4b8d_9254_ae9475de9b17);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment5_Vtbl where { pub base : ICoreWebView2Environment4_Vtbl , pub BrowserProcessExited : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveBrowserProcessExited : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2Environment6(::windows::core::IUnknown);
impl ICoreWebView2Environment6 {
    pub unsafe fn CreateCoreWebView2Controller<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>,
    >(
        &self,
        parentwindow: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .CreateCoreWebView2Controller)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateWebResourceResponse<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        content: Param0,
        statuscode: i32,
        reasonphrase: Param2,
        headers: Param3,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceResponse> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .CreateWebResourceResponse)(
            ::core::mem::transmute_copy(self),
            content.into_param().abi(),
            ::core::mem::transmute(statuscode),
            reasonphrase.into_param().abi(),
            headers.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceResponse>(result__)
    }
    pub unsafe fn BrowserVersionString(
        &self,
        versioninfo: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .BrowserVersionString)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(versioninfo),
        )
        .ok()
    }
    pub unsafe fn NewBrowserVersionAvailable<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewBrowserVersionAvailableEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .NewBrowserVersionAvailable)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewBrowserVersionAvailable<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveNewBrowserVersionAvailable)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateWebResourceRequest<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        method: Param1,
        postdata: Param2,
        headers: Param3,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceRequest> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .CreateWebResourceRequest)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            method.into_param().abi(),
            postdata.into_param().abi(),
            headers.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceRequest>(result__)
    }
    pub unsafe fn CreateCoreWebView2CompositionController<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler,
        >,
    >(
        &self,
        parentwindow: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .CreateCoreWebView2CompositionController)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateCoreWebView2PointerInfo(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2PointerInfo> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .CreateCoreWebView2PointerInfo)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2PointerInfo>(result__)
    }
    pub unsafe fn GetProviderForHwnd<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
    >(
        &self,
        hwnd: Param0,
    ) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .GetProviderForHwnd)(
            ::core::mem::transmute_copy(self),
            hwnd.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<::windows::core::IUnknown>(result__)
    }
    pub unsafe fn BrowserProcessExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2BrowserProcessExitedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .BrowserProcessExited)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveBrowserProcessExited<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveBrowserProcessExited)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreatePrintSettings(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2PrintSettings> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).CreatePrintSettings)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2PrintSettings>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2Environment6> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Environment6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment6> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Environment6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Environment6 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Environment6 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment6> for ICoreWebView2Environment {
    fn from(value: ICoreWebView2Environment6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment6> for ICoreWebView2Environment {
    fn from(value: &ICoreWebView2Environment6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment> for ICoreWebView2Environment6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment> for &ICoreWebView2Environment6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment6> for ICoreWebView2Environment2 {
    fn from(value: ICoreWebView2Environment6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment6> for ICoreWebView2Environment2 {
    fn from(value: &ICoreWebView2Environment6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment2> for ICoreWebView2Environment6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment2> for &ICoreWebView2Environment6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment6> for ICoreWebView2Environment3 {
    fn from(value: ICoreWebView2Environment6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment6> for ICoreWebView2Environment3 {
    fn from(value: &ICoreWebView2Environment6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment3> for ICoreWebView2Environment6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment3> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment3> for &ICoreWebView2Environment6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment3> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment6> for ICoreWebView2Environment4 {
    fn from(value: ICoreWebView2Environment6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment6> for ICoreWebView2Environment4 {
    fn from(value: &ICoreWebView2Environment6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment4> for ICoreWebView2Environment6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment4> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment4> for &ICoreWebView2Environment6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment4> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment6> for ICoreWebView2Environment5 {
    fn from(value: ICoreWebView2Environment6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment6> for ICoreWebView2Environment5 {
    fn from(value: &ICoreWebView2Environment6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment5> for ICoreWebView2Environment6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment5> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment5> for &ICoreWebView2Environment6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment5> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Environment6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Environment6 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Environment6 {}
impl ::core::fmt::Debug for ICoreWebView2Environment6 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Environment6")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Environment6 {
    type Vtable = ICoreWebView2Environment6_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe59ee362_acbd_4857_9a8e_d3644d9459a9);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment6_Vtbl {
    pub base: ICoreWebView2Environment5_Vtbl,
    pub CreatePrintSettings: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        printsettings: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2Environment7(::windows::core::IUnknown);
impl ICoreWebView2Environment7 {
    pub unsafe fn CreateCoreWebView2Controller<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>,
    >(
        &self,
        parentwindow: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .CreateCoreWebView2Controller)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateWebResourceResponse<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        content: Param0,
        statuscode: i32,
        reasonphrase: Param2,
        headers: Param3,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceResponse> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .CreateWebResourceResponse)(
            ::core::mem::transmute_copy(self),
            content.into_param().abi(),
            ::core::mem::transmute(statuscode),
            reasonphrase.into_param().abi(),
            headers.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceResponse>(result__)
    }
    pub unsafe fn BrowserVersionString(
        &self,
        versioninfo: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .BrowserVersionString)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(versioninfo),
        )
        .ok()
    }
    pub unsafe fn NewBrowserVersionAvailable<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewBrowserVersionAvailableEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .NewBrowserVersionAvailable)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewBrowserVersionAvailable<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveNewBrowserVersionAvailable)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateWebResourceRequest<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param3: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        method: Param1,
        postdata: Param2,
        headers: Param3,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceRequest> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .CreateWebResourceRequest)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            method.into_param().abi(),
            postdata.into_param().abi(),
            headers.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceRequest>(result__)
    }
    pub unsafe fn CreateCoreWebView2CompositionController<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler,
        >,
    >(
        &self,
        parentwindow: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .CreateCoreWebView2CompositionController)(
            ::core::mem::transmute_copy(self),
            parentwindow.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreateCoreWebView2PointerInfo(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2PointerInfo> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .CreateCoreWebView2PointerInfo)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2PointerInfo>(result__)
    }
    pub unsafe fn GetProviderForHwnd<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::HWND,
        >,
    >(
        &self,
        hwnd: Param0,
    ) -> ::windows::core::Result<::windows::core::IUnknown> {
        let mut result__: *mut ::core::ffi::c_void = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .GetProviderForHwnd)(
            ::core::mem::transmute_copy(self),
            hwnd.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<::windows::core::IUnknown>(result__)
    }
    pub unsafe fn BrowserProcessExited<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2BrowserProcessExitedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .BrowserProcessExited)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveBrowserProcessExited<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveBrowserProcessExited)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CreatePrintSettings(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2PrintSettings> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .CreatePrintSettings)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2PrintSettings>(result__)
    }
    pub unsafe fn UserDataFolder(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).UserDataFolder)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2Environment7> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Environment7) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment7> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Environment7) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Environment7 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Environment7 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment7> for ICoreWebView2Environment {
    fn from(value: ICoreWebView2Environment7) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment7> for ICoreWebView2Environment {
    fn from(value: &ICoreWebView2Environment7) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment> for ICoreWebView2Environment7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment> for &ICoreWebView2Environment7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment7> for ICoreWebView2Environment2 {
    fn from(value: ICoreWebView2Environment7) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment7> for ICoreWebView2Environment2 {
    fn from(value: &ICoreWebView2Environment7) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment2> for ICoreWebView2Environment7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment2> for &ICoreWebView2Environment7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment7> for ICoreWebView2Environment3 {
    fn from(value: ICoreWebView2Environment7) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment7> for ICoreWebView2Environment3 {
    fn from(value: &ICoreWebView2Environment7) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment3> for ICoreWebView2Environment7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment3> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment3> for &ICoreWebView2Environment7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment3> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment7> for ICoreWebView2Environment4 {
    fn from(value: ICoreWebView2Environment7) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment7> for ICoreWebView2Environment4 {
    fn from(value: &ICoreWebView2Environment7) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment4> for ICoreWebView2Environment7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment4> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment4> for &ICoreWebView2Environment7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment4> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment7> for ICoreWebView2Environment5 {
    fn from(value: ICoreWebView2Environment7) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment7> for ICoreWebView2Environment5 {
    fn from(value: &ICoreWebView2Environment7) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment5> for ICoreWebView2Environment7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment5> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment5> for &ICoreWebView2Environment7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment5> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Environment7> for ICoreWebView2Environment6 {
    fn from(value: ICoreWebView2Environment7) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Environment7> for ICoreWebView2Environment6 {
    fn from(value: &ICoreWebView2Environment7) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment6> for ICoreWebView2Environment7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment6> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Environment6> for &ICoreWebView2Environment7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Environment6> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Environment7 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Environment7 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Environment7 {}
impl ::core::fmt::Debug for ICoreWebView2Environment7 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Environment7")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Environment7 {
    type Vtable = ICoreWebView2Environment7_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x43c22296_3bbd_43a4_9c00_5c0df6dd29a2);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Environment7_Vtbl {
    pub base: ICoreWebView2Environment6_Vtbl,
    pub UserDataFolder: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2EnvironmentOptions(::windows::core::IUnknown);
impl ICoreWebView2EnvironmentOptions {
    pub unsafe fn AdditionalBrowserArguments(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AdditionalBrowserArguments)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetAdditionalBrowserArguments<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetAdditionalBrowserArguments)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Language(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Language)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetLanguage<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetLanguage)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn TargetCompatibleBrowserVersion(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).TargetCompatibleBrowserVersion)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetTargetCompatibleBrowserVersion<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetTargetCompatibleBrowserVersion)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AllowSingleSignOnUsingOSPrimaryAccount(
        &self,
        allow: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AllowSingleSignOnUsingOSPrimaryAccount)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(allow),
        )
        .ok()
    }
    pub unsafe fn SetAllowSingleSignOnUsingOSPrimaryAccount<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        allow: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetAllowSingleSignOnUsingOSPrimaryAccount)(
            ::core::mem::transmute_copy(self),
            allow.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2EnvironmentOptions> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2EnvironmentOptions) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2EnvironmentOptions> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2EnvironmentOptions) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2EnvironmentOptions
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2EnvironmentOptions
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2EnvironmentOptions {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2EnvironmentOptions {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2EnvironmentOptions {}
impl ::core::fmt::Debug for ICoreWebView2EnvironmentOptions {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2EnvironmentOptions")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2EnvironmentOptions {
    type Vtable = ICoreWebView2EnvironmentOptions_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x2fde08a8_1e9a_4766_8c05_95a9ceb9d1c5);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2EnvironmentOptions_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub AdditionalBrowserArguments: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub SetAdditionalBrowserArguments: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub Language: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub SetLanguage: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub TargetCompatibleBrowserVersion: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub SetTargetCompatibleBrowserVersion: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    )
        -> ::windows::core::HRESULT,
    pub AllowSingleSignOnUsingOSPrimaryAccount:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            allow: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT,
    pub SetAllowSingleSignOnUsingOSPrimaryAccount:
        unsafe extern "system" fn(
            this: *mut ::core::ffi::c_void,
            allow: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2EstimatedEndTimeChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2EstimatedEndTimeChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DownloadOperation>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2EstimatedEndTimeChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2EstimatedEndTimeChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2EstimatedEndTimeChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2EstimatedEndTimeChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2EstimatedEndTimeChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2EstimatedEndTimeChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2EstimatedEndTimeChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2EstimatedEndTimeChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2EstimatedEndTimeChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2EstimatedEndTimeChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2EstimatedEndTimeChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2EstimatedEndTimeChangedEventHandler {
    type Vtable = ICoreWebView2EstimatedEndTimeChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x28f0d425_93fe_4e63_9f8d_2aeec6d3ba1e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2EstimatedEndTimeChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2ExecuteScriptCompletedHandler(::windows::core::IUnknown);
impl ICoreWebView2ExecuteScriptCompletedHandler {
    pub unsafe fn Invoke<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        errorcode: ::windows::core::HRESULT,
        resultobjectasjson: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(errorcode),
            resultobjectasjson.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2ExecuteScriptCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2ExecuteScriptCompletedHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ExecuteScriptCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2ExecuteScriptCompletedHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2ExecuteScriptCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2ExecuteScriptCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2ExecuteScriptCompletedHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2ExecuteScriptCompletedHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2ExecuteScriptCompletedHandler {}
impl ::core::fmt::Debug for ICoreWebView2ExecuteScriptCompletedHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2ExecuteScriptCompletedHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2ExecuteScriptCompletedHandler {
    type Vtable = ICoreWebView2ExecuteScriptCompletedHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x49511172_cc67_4bca_9923_137112f4c4cc);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ExecuteScriptCompletedHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        errorcode: ::windows::core::HRESULT,
        resultobjectasjson: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2FocusChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2FocusChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2Controller>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2FocusChangedEventHandler> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2FocusChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2FocusChangedEventHandler> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2FocusChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2FocusChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2FocusChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2FocusChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2FocusChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2FocusChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2FocusChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2FocusChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2FocusChangedEventHandler {
    type Vtable = ICoreWebView2FocusChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x05ea24bd_6452_4926_9014_4b82b498135d);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2FocusChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2Frame(::windows::core::IUnknown);
impl ICoreWebView2Frame {
    pub unsafe fn Name(
        &self,
        name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Name)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(name),
        )
        .ok()
    }
    pub unsafe fn NameChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2FrameNameChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).NameChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNameChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveNameChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddHostObjectToScriptWithOrigins<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        object: *mut super::super::super::super::Windows::Win32::System::Com::VARIANT,
        originscount: u32,
        origins: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AddHostObjectToScriptWithOrigins)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(object),
            ::core::mem::transmute(originscount),
            ::core::mem::transmute(origins),
        )
        .ok()
    }
    pub unsafe fn RemoveHostObjectFromScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveHostObjectFromScript)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Destroyed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2FrameDestroyedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Destroyed)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDestroyed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveDestroyed)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsDestroyed(
        &self,
        destroyed: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsDestroyed)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(destroyed),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2Frame> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Frame) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Frame> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Frame) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Frame {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Frame {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Frame {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Frame {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Frame {}
impl ::core::fmt::Debug for ICoreWebView2Frame {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Frame").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Frame {
    type Vtable = ICoreWebView2Frame_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xf1131a5e_9ba9_11eb_a8b3_0242ac130003);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Frame_Vtbl where { pub base : :: windows :: core :: IUnknownVtbl , pub Name : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , name : * mut super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub NameChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveNameChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub AddHostObjectToScriptWithOrigins : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , name : super::super::super::super::Windows::Win32::Foundation:: PWSTR , object : * mut super::super::super::super::Windows::Win32::System::Com:: VARIANT , originscount : u32 , origins : * mut super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub RemoveHostObjectFromScript : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , name : super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub Destroyed : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveDestroyed : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub IsDestroyed : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , destroyed : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2FrameCreatedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2FrameCreatedEventArgs {
    pub unsafe fn Frame(&self) -> ::windows::core::Result<ICoreWebView2Frame> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).Frame)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Frame>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2FrameCreatedEventArgs> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2FrameCreatedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2FrameCreatedEventArgs> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2FrameCreatedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2FrameCreatedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2FrameCreatedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2FrameCreatedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2FrameCreatedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2FrameCreatedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2FrameCreatedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2FrameCreatedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2FrameCreatedEventArgs {
    type Vtable = ICoreWebView2FrameCreatedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4d6e7b5e_9baa_11eb_a8b3_0242ac130003);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2FrameCreatedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Frame: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        frame: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2FrameCreatedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2FrameCreatedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2FrameCreatedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2FrameCreatedEventHandler> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2FrameCreatedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2FrameCreatedEventHandler> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2FrameCreatedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2FrameCreatedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2FrameCreatedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2FrameCreatedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2FrameCreatedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2FrameCreatedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2FrameCreatedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2FrameCreatedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2FrameCreatedEventHandler {
    type Vtable = ICoreWebView2FrameCreatedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x38059770_9baa_11eb_a8b3_0242ac130003);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2FrameCreatedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2FrameDestroyedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2FrameDestroyedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2Frame>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2FrameDestroyedEventHandler> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2FrameDestroyedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2FrameDestroyedEventHandler> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2FrameDestroyedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2FrameDestroyedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2FrameDestroyedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2FrameDestroyedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2FrameDestroyedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2FrameDestroyedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2FrameDestroyedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2FrameDestroyedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2FrameDestroyedEventHandler {
    type Vtable = ICoreWebView2FrameDestroyedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x59dd7b4c_9baa_11eb_a8b3_0242ac130003);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2FrameDestroyedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2FrameInfo(::windows::core::IUnknown);
impl ICoreWebView2FrameInfo {
    pub unsafe fn Name(
        &self,
        name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Name)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(name),
        )
        .ok()
    }
    pub unsafe fn Source(
        &self,
        source: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Source)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(source),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2FrameInfo> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2FrameInfo) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2FrameInfo> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2FrameInfo) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2FrameInfo {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2FrameInfo {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2FrameInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2FrameInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2FrameInfo {}
impl ::core::fmt::Debug for ICoreWebView2FrameInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2FrameInfo")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2FrameInfo {
    type Vtable = ICoreWebView2FrameInfo_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xda86b8a1_bdf3_4f11_9955_528cefa59727);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2FrameInfo_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Name: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2FrameInfoCollection(::windows::core::IUnknown);
impl ICoreWebView2FrameInfoCollection {
    pub unsafe fn GetIterator(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2FrameInfoCollectionIterator> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetIterator)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2FrameInfoCollectionIterator>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2FrameInfoCollection> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2FrameInfoCollection) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2FrameInfoCollection> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2FrameInfoCollection) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2FrameInfoCollection
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2FrameInfoCollection
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2FrameInfoCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2FrameInfoCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2FrameInfoCollection {}
impl ::core::fmt::Debug for ICoreWebView2FrameInfoCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2FrameInfoCollection")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2FrameInfoCollection {
    type Vtable = ICoreWebView2FrameInfoCollection_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x8f834154_d38e_4d90_affb_6800a7272839);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2FrameInfoCollection_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub GetIterator: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        iterator: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2FrameInfoCollectionIterator(::windows::core::IUnknown);
impl ICoreWebView2FrameInfoCollectionIterator {
    pub unsafe fn HasCurrent(
        &self,
        hascurrent: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).HasCurrent)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(hascurrent),
        )
        .ok()
    }
    pub unsafe fn GetCurrent(&self) -> ::windows::core::Result<ICoreWebView2FrameInfo> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetCurrent)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2FrameInfo>(result__)
    }
    pub unsafe fn MoveNext(
        &self,
        hasnext: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MoveNext)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(hasnext),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2FrameInfoCollectionIterator> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2FrameInfoCollectionIterator) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2FrameInfoCollectionIterator>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2FrameInfoCollectionIterator) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2FrameInfoCollectionIterator
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2FrameInfoCollectionIterator
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2FrameInfoCollectionIterator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2FrameInfoCollectionIterator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2FrameInfoCollectionIterator {}
impl ::core::fmt::Debug for ICoreWebView2FrameInfoCollectionIterator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2FrameInfoCollectionIterator")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2FrameInfoCollectionIterator {
    type Vtable = ICoreWebView2FrameInfoCollectionIterator_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x1bf89e2d_1b2b_4629_b28f_05099b41bb03);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2FrameInfoCollectionIterator_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub HasCurrent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        hascurrent: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub GetCurrent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        frameinfo: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub MoveNext: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        hasnext: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2FrameNameChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2FrameNameChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2Frame>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2FrameNameChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2FrameNameChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2FrameNameChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2FrameNameChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2FrameNameChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2FrameNameChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2FrameNameChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2FrameNameChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2FrameNameChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2FrameNameChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2FrameNameChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2FrameNameChangedEventHandler {
    type Vtable = ICoreWebView2FrameNameChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x435c7dc8_9baa_11eb_a8b3_0242ac130003);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2FrameNameChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2GetCookiesCompletedHandler(::windows::core::IUnknown);
impl ICoreWebView2GetCookiesCompletedHandler {
    pub unsafe fn Invoke<'a, Param1: ::windows::core::IntoParam<'a, ICoreWebView2CookieList>>(
        &self,
        result: ::windows::core::HRESULT,
        cookielist: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(result),
            cookielist.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2GetCookiesCompletedHandler> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2GetCookiesCompletedHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2GetCookiesCompletedHandler> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2GetCookiesCompletedHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2GetCookiesCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2GetCookiesCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2GetCookiesCompletedHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2GetCookiesCompletedHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2GetCookiesCompletedHandler {}
impl ::core::fmt::Debug for ICoreWebView2GetCookiesCompletedHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2GetCookiesCompletedHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2GetCookiesCompletedHandler {
    type Vtable = ICoreWebView2GetCookiesCompletedHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5a4f5069_5c15_47c3_8646_f4de1c116670);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2GetCookiesCompletedHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        result: ::windows::core::HRESULT,
        cookielist: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2HistoryChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2HistoryChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2HistoryChangedEventHandler> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2HistoryChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2HistoryChangedEventHandler> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2HistoryChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2HistoryChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2HistoryChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2HistoryChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2HistoryChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2HistoryChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2HistoryChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2HistoryChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2HistoryChangedEventHandler {
    type Vtable = ICoreWebView2HistoryChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xc79a420c_efd9_4058_9295_3e8b4bcab645);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2HistoryChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2HttpHeadersCollectionIterator(::windows::core::IUnknown);
impl ICoreWebView2HttpHeadersCollectionIterator {
    pub unsafe fn GetCurrentHeader(
        &self,
        name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetCurrentHeader)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(name),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn HasCurrentHeader(
        &self,
        hascurrent: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).HasCurrentHeader)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(hascurrent),
        )
        .ok()
    }
    pub unsafe fn MoveNext(
        &self,
        hasnext: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MoveNext)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(hasnext),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2HttpHeadersCollectionIterator>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2HttpHeadersCollectionIterator) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2HttpHeadersCollectionIterator>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2HttpHeadersCollectionIterator) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2HttpHeadersCollectionIterator
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2HttpHeadersCollectionIterator
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2HttpHeadersCollectionIterator {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2HttpHeadersCollectionIterator {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2HttpHeadersCollectionIterator {}
impl ::core::fmt::Debug for ICoreWebView2HttpHeadersCollectionIterator {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2HttpHeadersCollectionIterator")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2HttpHeadersCollectionIterator {
    type Vtable = ICoreWebView2HttpHeadersCollectionIterator_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0702fc30_f43b_47bb_ab52_a42cb552ad9f);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2HttpHeadersCollectionIterator_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub GetCurrentHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub HasCurrentHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        hascurrent: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub MoveNext: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        hasnext: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2HttpRequestHeaders(::windows::core::IUnknown);
impl ICoreWebView2HttpRequestHeaders {
    pub unsafe fn GetHeader<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetHeader)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn GetHeaders<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<ICoreWebView2HttpHeadersCollectionIterator> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetHeaders)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2HttpHeadersCollectionIterator>(result__)
    }
    pub unsafe fn Contains<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        contains: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Contains)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(contains),
        )
        .ok()
    }
    pub unsafe fn SetHeader<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        value: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetHeader)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveHeader<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveHeader)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetIterator(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2HttpHeadersCollectionIterator> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetIterator)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2HttpHeadersCollectionIterator>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2HttpRequestHeaders> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2HttpRequestHeaders) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2HttpRequestHeaders> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2HttpRequestHeaders) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2HttpRequestHeaders
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2HttpRequestHeaders
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2HttpRequestHeaders {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2HttpRequestHeaders {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2HttpRequestHeaders {}
impl ::core::fmt::Debug for ICoreWebView2HttpRequestHeaders {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2HttpRequestHeaders")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2HttpRequestHeaders {
    type Vtable = ICoreWebView2HttpRequestHeaders_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe86cac0e_5523_465c_b536_8fb9fc8c8c60);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2HttpRequestHeaders_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub GetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub GetHeaders: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        iterator: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub Contains: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        contains: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub RemoveHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub GetIterator: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        iterator: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2HttpResponseHeaders(::windows::core::IUnknown);
impl ICoreWebView2HttpResponseHeaders {
    pub unsafe fn AppendHeader<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        value: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AppendHeader)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Contains<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        contains: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Contains)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(contains),
        )
        .ok()
    }
    pub unsafe fn GetHeader<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetHeader)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn GetHeaders<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<ICoreWebView2HttpHeadersCollectionIterator> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetHeaders)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2HttpHeadersCollectionIterator>(result__)
    }
    pub unsafe fn GetIterator(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2HttpHeadersCollectionIterator> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetIterator)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2HttpHeadersCollectionIterator>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2HttpResponseHeaders> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2HttpResponseHeaders) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2HttpResponseHeaders> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2HttpResponseHeaders) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2HttpResponseHeaders
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2HttpResponseHeaders
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2HttpResponseHeaders {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2HttpResponseHeaders {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2HttpResponseHeaders {}
impl ::core::fmt::Debug for ICoreWebView2HttpResponseHeaders {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2HttpResponseHeaders")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2HttpResponseHeaders {
    type Vtable = ICoreWebView2HttpResponseHeaders_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x03c5ff5a_9b45_4a88_881c_89a9f328619c);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2HttpResponseHeaders_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub AppendHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub Contains: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        contains: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub GetHeader: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub GetHeaders: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        iterator: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub GetIterator: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        iterator: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface
    for ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler
{
    type Vtable = ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3117da26_ae13_438d_bd46_edbeb2c4ce81);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2IsDocumentPlayingAudioChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2IsDocumentPlayingAudioChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2IsDocumentPlayingAudioChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2IsDocumentPlayingAudioChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2IsDocumentPlayingAudioChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2IsDocumentPlayingAudioChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2IsDocumentPlayingAudioChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2IsDocumentPlayingAudioChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2IsDocumentPlayingAudioChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2IsDocumentPlayingAudioChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2IsDocumentPlayingAudioChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2IsDocumentPlayingAudioChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2IsDocumentPlayingAudioChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2IsDocumentPlayingAudioChangedEventHandler {
    type Vtable = ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5def109a_2f4b_49fa_b7f6_11c39e513328);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2IsMutedChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2IsMutedChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2IsMutedChangedEventHandler> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2IsMutedChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2IsMutedChangedEventHandler> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2IsMutedChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2IsMutedChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2IsMutedChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2IsMutedChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2IsMutedChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2IsMutedChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2IsMutedChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2IsMutedChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2IsMutedChangedEventHandler {
    type Vtable = ICoreWebView2IsMutedChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x57d90347_cd0e_4952_a4a2_7483a2756f08);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2IsMutedChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2MoveFocusRequestedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2MoveFocusRequestedEventArgs {
    pub unsafe fn Reason(
        &self,
        reason: *mut COREWEBVIEW2_MOVE_FOCUS_REASON,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Reason)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(reason),
        )
        .ok()
    }
    pub unsafe fn Handled(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Handled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetHandled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetHandled)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2MoveFocusRequestedEventArgs> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2MoveFocusRequestedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2MoveFocusRequestedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2MoveFocusRequestedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2MoveFocusRequestedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2MoveFocusRequestedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2MoveFocusRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2MoveFocusRequestedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2MoveFocusRequestedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2MoveFocusRequestedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2MoveFocusRequestedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2MoveFocusRequestedEventArgs {
    type Vtable = ICoreWebView2MoveFocusRequestedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x2d6aa13b_3839_4a15_92fc_d88b3c0d9c9d);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2MoveFocusRequestedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Reason: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        reason: *mut COREWEBVIEW2_MOVE_FOCUS_REASON,
    ) -> ::windows::core::HRESULT,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2MoveFocusRequestedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2MoveFocusRequestedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2Controller>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2MoveFocusRequestedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2MoveFocusRequestedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2MoveFocusRequestedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2MoveFocusRequestedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2MoveFocusRequestedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2MoveFocusRequestedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2MoveFocusRequestedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2MoveFocusRequestedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2MoveFocusRequestedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2MoveFocusRequestedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2MoveFocusRequestedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2MoveFocusRequestedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2MoveFocusRequestedEventHandler {
    type Vtable = ICoreWebView2MoveFocusRequestedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x69035451_6dc7_4cb8_9bce_b2bd70ad289f);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2MoveFocusRequestedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2NavigationCompletedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2NavigationCompletedEventArgs {
    pub unsafe fn IsSuccess(
        &self,
        issuccess: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsSuccess)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(issuccess),
        )
        .ok()
    }
    pub unsafe fn WebErrorStatus(
        &self,
        weberrorstatus: *mut COREWEBVIEW2_WEB_ERROR_STATUS,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).WebErrorStatus)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(weberrorstatus),
        )
        .ok()
    }
    pub unsafe fn NavigationId(&self, navigationid: *mut u64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).NavigationId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(navigationid),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2NavigationCompletedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2NavigationCompletedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2NavigationCompletedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2NavigationCompletedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2NavigationCompletedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2NavigationCompletedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2NavigationCompletedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2NavigationCompletedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2NavigationCompletedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2NavigationCompletedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2NavigationCompletedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2NavigationCompletedEventArgs {
    type Vtable = ICoreWebView2NavigationCompletedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x30d68b7d_20d9_4752_a9ca_ec8448fbb5c1);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NavigationCompletedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub IsSuccess: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        issuccess: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub WebErrorStatus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        weberrorstatus: *mut COREWEBVIEW2_WEB_ERROR_STATUS,
    ) -> ::windows::core::HRESULT,
    pub NavigationId: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        navigationid: *mut u64,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2NavigationCompletedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2NavigationCompletedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2NavigationCompletedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2NavigationCompletedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2NavigationCompletedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2NavigationCompletedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2NavigationCompletedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2NavigationCompletedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2NavigationCompletedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2NavigationCompletedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2NavigationCompletedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2NavigationCompletedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2NavigationCompletedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2NavigationCompletedEventHandler {
    type Vtable = ICoreWebView2NavigationCompletedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xd33a35bf_1c49_4f98_93ab_006e0533fe1c);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NavigationCompletedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2NavigationStartingEventArgs(::windows::core::IUnknown);
impl ICoreWebView2NavigationStartingEventArgs {
    pub unsafe fn Uri(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Uri)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn IsUserInitiated(
        &self,
        isuserinitiated: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsUserInitiated)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isuserinitiated),
        )
        .ok()
    }
    pub unsafe fn IsRedirected(
        &self,
        isredirected: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsRedirected)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isredirected),
        )
        .ok()
    }
    pub unsafe fn RequestHeaders(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2HttpRequestHeaders> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).RequestHeaders)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2HttpRequestHeaders>(result__)
    }
    pub unsafe fn Cancel(
        &self,
        cancel: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Cancel)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cancel),
        )
        .ok()
    }
    pub unsafe fn SetCancel<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        cancel: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetCancel)(
            ::core::mem::transmute_copy(self),
            cancel.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigationId(&self, navigationid: *mut u64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).NavigationId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(navigationid),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2NavigationStartingEventArgs> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2NavigationStartingEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2NavigationStartingEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2NavigationStartingEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2NavigationStartingEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2NavigationStartingEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2NavigationStartingEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2NavigationStartingEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2NavigationStartingEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2NavigationStartingEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2NavigationStartingEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2NavigationStartingEventArgs {
    type Vtable = ICoreWebView2NavigationStartingEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5b495469_e119_438a_9b18_7604f25f2e49);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NavigationStartingEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub IsUserInitiated: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        isuserinitiated: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub IsRedirected: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        isredirected: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub RequestHeaders: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        requestheaders: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub Cancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        cancel: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetCancel: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        cancel: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub NavigationId: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        navigationid: *mut u64,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2NavigationStartingEventHandler(::windows::core::IUnknown);
impl ICoreWebView2NavigationStartingEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2NavigationStartingEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2NavigationStartingEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2NavigationStartingEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2NavigationStartingEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2NavigationStartingEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2NavigationStartingEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2NavigationStartingEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2NavigationStartingEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2NavigationStartingEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2NavigationStartingEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2NavigationStartingEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2NavigationStartingEventHandler {
    type Vtable = ICoreWebView2NavigationStartingEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9adbe429_f36d_432b_9ddc_f8881fbd76e3);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NavigationStartingEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2NewBrowserVersionAvailableEventHandler(::windows::core::IUnknown);
impl ICoreWebView2NewBrowserVersionAvailableEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2Environment>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2NewBrowserVersionAvailableEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2NewBrowserVersionAvailableEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2NewBrowserVersionAvailableEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2NewBrowserVersionAvailableEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2NewBrowserVersionAvailableEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2NewBrowserVersionAvailableEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2NewBrowserVersionAvailableEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2NewBrowserVersionAvailableEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2NewBrowserVersionAvailableEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2NewBrowserVersionAvailableEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2NewBrowserVersionAvailableEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2NewBrowserVersionAvailableEventHandler {
    type Vtable = ICoreWebView2NewBrowserVersionAvailableEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xf9a2976e_d34e_44fc_adee_81b6b57ca914);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NewBrowserVersionAvailableEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2NewWindowRequestedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2NewWindowRequestedEventArgs {
    pub unsafe fn Uri(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Uri)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn SetNewWindow<'a, Param0: ::windows::core::IntoParam<'a, ICoreWebView2>>(
        &self,
        newwindow: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetNewWindow)(
            ::core::mem::transmute_copy(self),
            newwindow.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NewWindow(&self) -> ::windows::core::Result<ICoreWebView2> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).NewWindow)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2>(result__)
    }
    pub unsafe fn SetHandled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        handled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetHandled)(
            ::core::mem::transmute_copy(self),
            handled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Handled(
        &self,
        handled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Handled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(handled),
        )
        .ok()
    }
    pub unsafe fn IsUserInitiated(
        &self,
        isuserinitiated: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsUserInitiated)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isuserinitiated),
        )
        .ok()
    }
    pub unsafe fn GetDeferral(&self) -> ::windows::core::Result<ICoreWebView2Deferral> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetDeferral)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Deferral>(result__)
    }
    pub unsafe fn WindowFeatures(&self) -> ::windows::core::Result<ICoreWebView2WindowFeatures> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).WindowFeatures)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WindowFeatures>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2NewWindowRequestedEventArgs> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2NewWindowRequestedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2NewWindowRequestedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2NewWindowRequestedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2NewWindowRequestedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2NewWindowRequestedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2NewWindowRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2NewWindowRequestedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2NewWindowRequestedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2NewWindowRequestedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2NewWindowRequestedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2NewWindowRequestedEventArgs {
    type Vtable = ICoreWebView2NewWindowRequestedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x34acb11c_fc37_4418_9132_f9c21d1eafb9);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NewWindowRequestedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub SetNewWindow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        newwindow: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub NewWindow: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        newwindow: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub SetHandled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub Handled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub IsUserInitiated: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        isuserinitiated: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        deferral: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub WindowFeatures: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2NewWindowRequestedEventArgs2(::windows::core::IUnknown);
impl ICoreWebView2NewWindowRequestedEventArgs2 {
    pub unsafe fn Uri(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.Uri)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn SetNewWindow<'a, Param0: ::windows::core::IntoParam<'a, ICoreWebView2>>(
        &self,
        newwindow: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.SetNewWindow)(
            ::core::mem::transmute_copy(self),
            newwindow.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NewWindow(&self) -> ::windows::core::Result<ICoreWebView2> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).base.NewWindow)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2>(result__)
    }
    pub unsafe fn SetHandled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        handled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.SetHandled)(
            ::core::mem::transmute_copy(self),
            handled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Handled(
        &self,
        handled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.Handled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(handled),
        )
        .ok()
    }
    pub unsafe fn IsUserInitiated(
        &self,
        isuserinitiated: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .IsUserInitiated)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isuserinitiated),
        )
        .ok()
    }
    pub unsafe fn GetDeferral(&self) -> ::windows::core::Result<ICoreWebView2Deferral> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).base.GetDeferral)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Deferral>(result__)
    }
    pub unsafe fn WindowFeatures(&self) -> ::windows::core::Result<ICoreWebView2WindowFeatures> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).base.WindowFeatures)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WindowFeatures>(result__)
    }
    pub unsafe fn Name(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Name)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2NewWindowRequestedEventArgs2>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2NewWindowRequestedEventArgs2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2NewWindowRequestedEventArgs2>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2NewWindowRequestedEventArgs2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2NewWindowRequestedEventArgs2
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2NewWindowRequestedEventArgs2
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2NewWindowRequestedEventArgs2>
    for ICoreWebView2NewWindowRequestedEventArgs
{
    fn from(value: ICoreWebView2NewWindowRequestedEventArgs2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2NewWindowRequestedEventArgs2>
    for ICoreWebView2NewWindowRequestedEventArgs
{
    fn from(value: &ICoreWebView2NewWindowRequestedEventArgs2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2NewWindowRequestedEventArgs>
    for ICoreWebView2NewWindowRequestedEventArgs2
{
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2NewWindowRequestedEventArgs> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2NewWindowRequestedEventArgs>
    for &ICoreWebView2NewWindowRequestedEventArgs2
{
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2NewWindowRequestedEventArgs> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2NewWindowRequestedEventArgs2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2NewWindowRequestedEventArgs2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2NewWindowRequestedEventArgs2 {}
impl ::core::fmt::Debug for ICoreWebView2NewWindowRequestedEventArgs2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2NewWindowRequestedEventArgs2")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2NewWindowRequestedEventArgs2 {
    type Vtable = ICoreWebView2NewWindowRequestedEventArgs2_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbbc7baed_74c6_4c92_b63a_7f5aeae03de3);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NewWindowRequestedEventArgs2_Vtbl {
    pub base: ICoreWebView2NewWindowRequestedEventArgs_Vtbl,
    pub Name: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2NewWindowRequestedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2NewWindowRequestedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2NewWindowRequestedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2NewWindowRequestedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2NewWindowRequestedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2NewWindowRequestedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2NewWindowRequestedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2NewWindowRequestedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2NewWindowRequestedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2NewWindowRequestedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2NewWindowRequestedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2NewWindowRequestedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2NewWindowRequestedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2NewWindowRequestedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2NewWindowRequestedEventHandler {
    type Vtable = ICoreWebView2NewWindowRequestedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xd4c185fe_c81c_4989_97af_2d3fa7ab5651);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2NewWindowRequestedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2PermissionRequestedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2PermissionRequestedEventArgs {
    pub unsafe fn Uri(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Uri)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn PermissionKind(
        &self,
        permissionkind: *mut COREWEBVIEW2_PERMISSION_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PermissionKind)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(permissionkind),
        )
        .ok()
    }
    pub unsafe fn IsUserInitiated(
        &self,
        isuserinitiated: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsUserInitiated)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isuserinitiated),
        )
        .ok()
    }
    pub unsafe fn State(
        &self,
        state: *mut COREWEBVIEW2_PERMISSION_STATE,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).State)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(state),
        )
        .ok()
    }
    pub unsafe fn SetState(
        &self,
        state: COREWEBVIEW2_PERMISSION_STATE,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetState)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(state),
        )
        .ok()
    }
    pub unsafe fn GetDeferral(&self) -> ::windows::core::Result<ICoreWebView2Deferral> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetDeferral)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Deferral>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2PermissionRequestedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2PermissionRequestedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2PermissionRequestedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2PermissionRequestedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2PermissionRequestedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2PermissionRequestedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2PermissionRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2PermissionRequestedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2PermissionRequestedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2PermissionRequestedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2PermissionRequestedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2PermissionRequestedEventArgs {
    type Vtable = ICoreWebView2PermissionRequestedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x973ae2ef_ff18_4894_8fb2_3c758f046810);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2PermissionRequestedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub PermissionKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        permissionkind: *mut COREWEBVIEW2_PERMISSION_KIND,
    ) -> ::windows::core::HRESULT,
    pub IsUserInitiated: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        isuserinitiated: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub State: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        state: *mut COREWEBVIEW2_PERMISSION_STATE,
    ) -> ::windows::core::HRESULT,
    pub SetState: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        state: COREWEBVIEW2_PERMISSION_STATE,
    ) -> ::windows::core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        deferral: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2PermissionRequestedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2PermissionRequestedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2PermissionRequestedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2PermissionRequestedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2PermissionRequestedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2PermissionRequestedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2PermissionRequestedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2PermissionRequestedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2PermissionRequestedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2PermissionRequestedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2PermissionRequestedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2PermissionRequestedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2PermissionRequestedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2PermissionRequestedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2PermissionRequestedEventHandler {
    type Vtable = ICoreWebView2PermissionRequestedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x15e1c6a3_c72a_4df3_91d7_d097fbec6bfd);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2PermissionRequestedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2PointerInfo(::windows::core::IUnknown);
impl ICoreWebView2PointerInfo {
    pub unsafe fn PointerKind(&self, pointerkind: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PointerKind)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pointerkind),
        )
        .ok()
    }
    pub unsafe fn SetPointerKind(&self, pointerkind: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPointerKind)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pointerkind),
        )
        .ok()
    }
    pub unsafe fn PointerId(&self, pointerid: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PointerId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pointerid),
        )
        .ok()
    }
    pub unsafe fn SetPointerId(&self, pointerid: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPointerId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pointerid),
        )
        .ok()
    }
    pub unsafe fn FrameId(&self, frameid: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).FrameId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(frameid),
        )
        .ok()
    }
    pub unsafe fn SetFrameId(&self, frameid: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetFrameId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(frameid),
        )
        .ok()
    }
    pub unsafe fn PointerFlags(&self, pointerflags: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PointerFlags)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pointerflags),
        )
        .ok()
    }
    pub unsafe fn SetPointerFlags(&self, pointerflags: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPointerFlags)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pointerflags),
        )
        .ok()
    }
    pub unsafe fn PointerDeviceRect(
        &self,
        pointerdevicerect: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PointerDeviceRect)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pointerdevicerect),
        )
        .ok()
    }
    pub unsafe fn SetPointerDeviceRect<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::RECT,
        >,
    >(
        &self,
        pointerdevicerect: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPointerDeviceRect)(
            ::core::mem::transmute_copy(self),
            pointerdevicerect.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DisplayRect(
        &self,
        displayrect: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DisplayRect)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(displayrect),
        )
        .ok()
    }
    pub unsafe fn SetDisplayRect<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::RECT,
        >,
    >(
        &self,
        displayrect: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetDisplayRect)(
            ::core::mem::transmute_copy(self),
            displayrect.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn PixelLocation(
        &self,
        pixellocation: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PixelLocation)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pixellocation),
        )
        .ok()
    }
    pub unsafe fn SetPixelLocation<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::POINT,
        >,
    >(
        &self,
        pixellocation: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPixelLocation)(
            ::core::mem::transmute_copy(self),
            pixellocation.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn HimetricLocation(
        &self,
        himetriclocation: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).HimetricLocation)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(himetriclocation),
        )
        .ok()
    }
    pub unsafe fn SetHimetricLocation<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::POINT,
        >,
    >(
        &self,
        himetriclocation: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetHimetricLocation)(
            ::core::mem::transmute_copy(self),
            himetriclocation.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn PixelLocationRaw(
        &self,
        pixellocationraw: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PixelLocationRaw)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pixellocationraw),
        )
        .ok()
    }
    pub unsafe fn SetPixelLocationRaw<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::POINT,
        >,
    >(
        &self,
        pixellocationraw: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPixelLocationRaw)(
            ::core::mem::transmute_copy(self),
            pixellocationraw.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn HimetricLocationRaw(
        &self,
        himetriclocationraw: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).HimetricLocationRaw)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(himetriclocationraw),
        )
        .ok()
    }
    pub unsafe fn SetHimetricLocationRaw<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::POINT,
        >,
    >(
        &self,
        himetriclocationraw: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetHimetricLocationRaw)(
            ::core::mem::transmute_copy(self),
            himetriclocationraw.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Time(&self, time: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Time)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(time),
        )
        .ok()
    }
    pub unsafe fn SetTime(&self, time: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetTime)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(time),
        )
        .ok()
    }
    pub unsafe fn HistoryCount(&self, historycount: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).HistoryCount)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(historycount),
        )
        .ok()
    }
    pub unsafe fn SetHistoryCount(&self, historycount: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetHistoryCount)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(historycount),
        )
        .ok()
    }
    pub unsafe fn InputData(&self, inputdata: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).InputData)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(inputdata),
        )
        .ok()
    }
    pub unsafe fn SetInputData(&self, inputdata: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetInputData)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(inputdata),
        )
        .ok()
    }
    pub unsafe fn KeyStates(&self, keystates: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).KeyStates)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(keystates),
        )
        .ok()
    }
    pub unsafe fn SetKeyStates(&self, keystates: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetKeyStates)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(keystates),
        )
        .ok()
    }
    pub unsafe fn PerformanceCount(
        &self,
        performancecount: *mut u64,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PerformanceCount)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(performancecount),
        )
        .ok()
    }
    pub unsafe fn SetPerformanceCount(&self, performancecount: u64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPerformanceCount)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(performancecount),
        )
        .ok()
    }
    pub unsafe fn ButtonChangeKind(
        &self,
        buttonchangekind: *mut i32,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ButtonChangeKind)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(buttonchangekind),
        )
        .ok()
    }
    pub unsafe fn SetButtonChangeKind(&self, buttonchangekind: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetButtonChangeKind)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(buttonchangekind),
        )
        .ok()
    }
    pub unsafe fn PenFlags(&self, penflags: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PenFlags)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(penflags),
        )
        .ok()
    }
    pub unsafe fn SetPenFlags(&self, penflags: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPenFlags)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(penflags),
        )
        .ok()
    }
    pub unsafe fn PenMask(&self, penmask: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PenMask)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(penmask),
        )
        .ok()
    }
    pub unsafe fn SetPenMask(&self, penmask: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPenMask)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(penmask),
        )
        .ok()
    }
    pub unsafe fn PenPressure(&self, penpressure: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PenPressure)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(penpressure),
        )
        .ok()
    }
    pub unsafe fn SetPenPressure(&self, penpressure: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPenPressure)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(penpressure),
        )
        .ok()
    }
    pub unsafe fn PenRotation(&self, penrotation: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PenRotation)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(penrotation),
        )
        .ok()
    }
    pub unsafe fn SetPenRotation(&self, penrotation: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPenRotation)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(penrotation),
        )
        .ok()
    }
    pub unsafe fn PenTiltX(&self, pentiltx: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PenTiltX)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pentiltx),
        )
        .ok()
    }
    pub unsafe fn SetPenTiltX(&self, pentiltx: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPenTiltX)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pentiltx),
        )
        .ok()
    }
    pub unsafe fn PenTiltY(&self, pentilty: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PenTiltY)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pentilty),
        )
        .ok()
    }
    pub unsafe fn SetPenTiltY(&self, pentilty: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPenTiltY)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pentilty),
        )
        .ok()
    }
    pub unsafe fn TouchFlags(&self, touchflags: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).TouchFlags)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(touchflags),
        )
        .ok()
    }
    pub unsafe fn SetTouchFlags(&self, touchflags: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetTouchFlags)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(touchflags),
        )
        .ok()
    }
    pub unsafe fn TouchMask(&self, touchmask: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).TouchMask)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(touchmask),
        )
        .ok()
    }
    pub unsafe fn SetTouchMask(&self, touchmask: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetTouchMask)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(touchmask),
        )
        .ok()
    }
    pub unsafe fn TouchContact(
        &self,
        touchcontact: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).TouchContact)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(touchcontact),
        )
        .ok()
    }
    pub unsafe fn SetTouchContact<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::RECT,
        >,
    >(
        &self,
        touchcontact: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetTouchContact)(
            ::core::mem::transmute_copy(self),
            touchcontact.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn TouchContactRaw(
        &self,
        touchcontactraw: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).TouchContactRaw)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(touchcontactraw),
        )
        .ok()
    }
    pub unsafe fn SetTouchContactRaw<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::RECT,
        >,
    >(
        &self,
        touchcontactraw: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetTouchContactRaw)(
            ::core::mem::transmute_copy(self),
            touchcontactraw.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn TouchOrientation(
        &self,
        touchorientation: *mut u32,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).TouchOrientation)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(touchorientation),
        )
        .ok()
    }
    pub unsafe fn SetTouchOrientation(&self, touchorientation: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetTouchOrientation)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(touchorientation),
        )
        .ok()
    }
    pub unsafe fn TouchPressure(&self, touchpressure: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).TouchPressure)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(touchpressure),
        )
        .ok()
    }
    pub unsafe fn SetTouchPressure(&self, touchpressure: u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetTouchPressure)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(touchpressure),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2PointerInfo> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2PointerInfo) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2PointerInfo> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2PointerInfo) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2PointerInfo {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2PointerInfo {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2PointerInfo {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2PointerInfo {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2PointerInfo {}
impl ::core::fmt::Debug for ICoreWebView2PointerInfo {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2PointerInfo")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2PointerInfo {
    type Vtable = ICoreWebView2PointerInfo_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe6995887_d10d_4f5d_9359_4ce46e4f96b9);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2PointerInfo_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub PointerKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pointerkind: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetPointerKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pointerkind: u32,
    ) -> ::windows::core::HRESULT,
    pub PointerId: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pointerid: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetPointerId: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pointerid: u32,
    ) -> ::windows::core::HRESULT,
    pub FrameId: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        frameid: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetFrameId: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        frameid: u32,
    ) -> ::windows::core::HRESULT,
    pub PointerFlags: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pointerflags: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetPointerFlags: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pointerflags: u32,
    ) -> ::windows::core::HRESULT,
    pub PointerDeviceRect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pointerdevicerect: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::HRESULT,
    pub SetPointerDeviceRect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pointerdevicerect: super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::HRESULT,
    pub DisplayRect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        displayrect: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::HRESULT,
    pub SetDisplayRect: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        displayrect: super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::HRESULT,
    pub PixelLocation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pixellocation: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::HRESULT,
    pub SetPixelLocation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pixellocation: super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::HRESULT,
    pub HimetricLocation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        himetriclocation: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::HRESULT,
    pub SetHimetricLocation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        himetriclocation: super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::HRESULT,
    pub PixelLocationRaw: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pixellocationraw: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::HRESULT,
    pub SetPixelLocationRaw: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pixellocationraw: super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::HRESULT,
    pub HimetricLocationRaw: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        himetriclocationraw: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::HRESULT,
    pub SetHimetricLocationRaw: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        himetriclocationraw: super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::HRESULT,
    pub Time: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        time: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetTime: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        time: u32,
    ) -> ::windows::core::HRESULT,
    pub HistoryCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        historycount: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetHistoryCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        historycount: u32,
    ) -> ::windows::core::HRESULT,
    pub InputData: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        inputdata: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetInputData: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        inputdata: i32,
    ) -> ::windows::core::HRESULT,
    pub KeyStates: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        keystates: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetKeyStates: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        keystates: u32,
    ) -> ::windows::core::HRESULT,
    pub PerformanceCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        performancecount: *mut u64,
    ) -> ::windows::core::HRESULT,
    pub SetPerformanceCount: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        performancecount: u64,
    ) -> ::windows::core::HRESULT,
    pub ButtonChangeKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        buttonchangekind: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetButtonChangeKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        buttonchangekind: i32,
    ) -> ::windows::core::HRESULT,
    pub PenFlags: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        penflags: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetPenFlags: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        penflags: u32,
    ) -> ::windows::core::HRESULT,
    pub PenMask: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        penmask: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetPenMask: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        penmask: u32,
    ) -> ::windows::core::HRESULT,
    pub PenPressure: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        penpressure: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetPenPressure: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        penpressure: u32,
    ) -> ::windows::core::HRESULT,
    pub PenRotation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        penrotation: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetPenRotation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        penrotation: u32,
    ) -> ::windows::core::HRESULT,
    pub PenTiltX: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pentiltx: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetPenTiltX: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pentiltx: i32,
    ) -> ::windows::core::HRESULT,
    pub PenTiltY: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pentilty: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetPenTiltY: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        pentilty: i32,
    ) -> ::windows::core::HRESULT,
    pub TouchFlags: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        touchflags: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetTouchFlags: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        touchflags: u32,
    ) -> ::windows::core::HRESULT,
    pub TouchMask: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        touchmask: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetTouchMask: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        touchmask: u32,
    ) -> ::windows::core::HRESULT,
    pub TouchContact: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        touchcontact: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::HRESULT,
    pub SetTouchContact: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        touchcontact: super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::HRESULT,
    pub TouchContactRaw: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        touchcontactraw: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::HRESULT,
    pub SetTouchContactRaw: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        touchcontactraw: super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::HRESULT,
    pub TouchOrientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        touchorientation: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetTouchOrientation: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        touchorientation: u32,
    ) -> ::windows::core::HRESULT,
    pub TouchPressure: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        touchpressure: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub SetTouchPressure: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        touchpressure: u32,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2PrintSettings(::windows::core::IUnknown);
impl ICoreWebView2PrintSettings {
    pub unsafe fn Orientation(
        &self,
        orientation: *mut COREWEBVIEW2_PRINT_ORIENTATION,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Orientation)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(orientation),
        )
        .ok()
    }
    pub unsafe fn SetOrientation(
        &self,
        orientation: COREWEBVIEW2_PRINT_ORIENTATION,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetOrientation)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(orientation),
        )
        .ok()
    }
    pub unsafe fn ScaleFactor(&self, scalefactor: *mut f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ScaleFactor)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(scalefactor),
        )
        .ok()
    }
    pub unsafe fn SetScaleFactor(&self, scalefactor: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetScaleFactor)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(scalefactor),
        )
        .ok()
    }
    pub unsafe fn PageWidth(&self, pagewidth: *mut f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PageWidth)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pagewidth),
        )
        .ok()
    }
    pub unsafe fn SetPageWidth(&self, pagewidth: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPageWidth)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pagewidth),
        )
        .ok()
    }
    pub unsafe fn PageHeight(&self, pageheight: *mut f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PageHeight)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pageheight),
        )
        .ok()
    }
    pub unsafe fn SetPageHeight(&self, pageheight: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetPageHeight)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(pageheight),
        )
        .ok()
    }
    pub unsafe fn MarginTop(&self, margintop: *mut f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MarginTop)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(margintop),
        )
        .ok()
    }
    pub unsafe fn SetMarginTop(&self, margintop: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMarginTop)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(margintop),
        )
        .ok()
    }
    pub unsafe fn MarginBottom(&self, marginbottom: *mut f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MarginBottom)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(marginbottom),
        )
        .ok()
    }
    pub unsafe fn SetMarginBottom(&self, marginbottom: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMarginBottom)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(marginbottom),
        )
        .ok()
    }
    pub unsafe fn MarginLeft(&self, marginleft: *mut f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MarginLeft)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(marginleft),
        )
        .ok()
    }
    pub unsafe fn SetMarginLeft(&self, marginleft: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMarginLeft)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(marginleft),
        )
        .ok()
    }
    pub unsafe fn MarginRight(&self, marginright: *mut f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).MarginRight)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(marginright),
        )
        .ok()
    }
    pub unsafe fn SetMarginRight(&self, marginright: f64) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMarginRight)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(marginright),
        )
        .ok()
    }
    pub unsafe fn ShouldPrintBackgrounds(
        &self,
        shouldprintbackgrounds: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ShouldPrintBackgrounds)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(shouldprintbackgrounds),
        )
        .ok()
    }
    pub unsafe fn SetShouldPrintBackgrounds<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        shouldprintbackgrounds: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetShouldPrintBackgrounds)(
            ::core::mem::transmute_copy(self),
            shouldprintbackgrounds.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ShouldPrintSelectionOnly(
        &self,
        shouldprintselectiononly: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ShouldPrintSelectionOnly)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(shouldprintselectiononly),
        )
        .ok()
    }
    pub unsafe fn SetShouldPrintSelectionOnly<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        shouldprintselectiononly: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetShouldPrintSelectionOnly)(
            ::core::mem::transmute_copy(self),
            shouldprintselectiononly.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ShouldPrintHeaderAndFooter(
        &self,
        shouldprintheaderandfooter : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ShouldPrintHeaderAndFooter)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(shouldprintheaderandfooter),
        )
        .ok()
    }
    pub unsafe fn SetShouldPrintHeaderAndFooter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        shouldprintheaderandfooter: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetShouldPrintHeaderAndFooter)(
            ::core::mem::transmute_copy(self),
            shouldprintheaderandfooter.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn HeaderTitle(
        &self,
        headertitle: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).HeaderTitle)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(headertitle),
        )
        .ok()
    }
    pub unsafe fn SetHeaderTitle<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        headertitle: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetHeaderTitle)(
            ::core::mem::transmute_copy(self),
            headertitle.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FooterUri(
        &self,
        footeruri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).FooterUri)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(footeruri),
        )
        .ok()
    }
    pub unsafe fn SetFooterUri<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        footeruri: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetFooterUri)(
            ::core::mem::transmute_copy(self),
            footeruri.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2PrintSettings> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2PrintSettings) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2PrintSettings> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2PrintSettings) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2PrintSettings {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2PrintSettings {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2PrintSettings {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2PrintSettings {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2PrintSettings {}
impl ::core::fmt::Debug for ICoreWebView2PrintSettings {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2PrintSettings")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2PrintSettings {
    type Vtable = ICoreWebView2PrintSettings_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x377f3721_c74e_48ca_8db1_df68e51d60e2);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2PrintSettings_Vtbl where { pub base : :: windows :: core :: IUnknownVtbl , pub Orientation : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , orientation : * mut COREWEBVIEW2_PRINT_ORIENTATION , ) -> :: windows :: core :: HRESULT , pub SetOrientation : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , orientation : COREWEBVIEW2_PRINT_ORIENTATION , ) -> :: windows :: core :: HRESULT , pub ScaleFactor : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , scalefactor : * mut f64 , ) -> :: windows :: core :: HRESULT , pub SetScaleFactor : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , scalefactor : f64 , ) -> :: windows :: core :: HRESULT , pub PageWidth : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , pagewidth : * mut f64 , ) -> :: windows :: core :: HRESULT , pub SetPageWidth : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , pagewidth : f64 , ) -> :: windows :: core :: HRESULT , pub PageHeight : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , pageheight : * mut f64 , ) -> :: windows :: core :: HRESULT , pub SetPageHeight : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , pageheight : f64 , ) -> :: windows :: core :: HRESULT , pub MarginTop : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , margintop : * mut f64 , ) -> :: windows :: core :: HRESULT , pub SetMarginTop : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , margintop : f64 , ) -> :: windows :: core :: HRESULT , pub MarginBottom : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , marginbottom : * mut f64 , ) -> :: windows :: core :: HRESULT , pub SetMarginBottom : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , marginbottom : f64 , ) -> :: windows :: core :: HRESULT , pub MarginLeft : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , marginleft : * mut f64 , ) -> :: windows :: core :: HRESULT , pub SetMarginLeft : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , marginleft : f64 , ) -> :: windows :: core :: HRESULT , pub MarginRight : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , marginright : * mut f64 , ) -> :: windows :: core :: HRESULT , pub SetMarginRight : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , marginright : f64 , ) -> :: windows :: core :: HRESULT , pub ShouldPrintBackgrounds : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , shouldprintbackgrounds : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetShouldPrintBackgrounds : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , shouldprintbackgrounds : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub ShouldPrintSelectionOnly : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , shouldprintselectiononly : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetShouldPrintSelectionOnly : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , shouldprintselectiononly : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub ShouldPrintHeaderAndFooter : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , shouldprintheaderandfooter : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetShouldPrintHeaderAndFooter : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , shouldprintheaderandfooter : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub HeaderTitle : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , headertitle : * mut super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub SetHeaderTitle : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , headertitle : super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub FooterUri : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , footeruri : * mut super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , pub SetFooterUri : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , footeruri : super::super::super::super::Windows::Win32::Foundation:: PWSTR , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2PrintToPdfCompletedHandler(::windows::core::IUnknown);
impl ICoreWebView2PrintToPdfCompletedHandler {
    pub unsafe fn Invoke<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        errorcode: ::windows::core::HRESULT,
        issuccessful: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(errorcode),
            issuccessful.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2PrintToPdfCompletedHandler> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2PrintToPdfCompletedHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2PrintToPdfCompletedHandler> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2PrintToPdfCompletedHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2PrintToPdfCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2PrintToPdfCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2PrintToPdfCompletedHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2PrintToPdfCompletedHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2PrintToPdfCompletedHandler {}
impl ::core::fmt::Debug for ICoreWebView2PrintToPdfCompletedHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2PrintToPdfCompletedHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2PrintToPdfCompletedHandler {
    type Vtable = ICoreWebView2PrintToPdfCompletedHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xccf1ef04_fd8e_4d5f_b2de_0983e41b8c36);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2PrintToPdfCompletedHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        errorcode: ::windows::core::HRESULT,
        issuccessful: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2ProcessFailedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2ProcessFailedEventArgs {
    pub unsafe fn ProcessFailedKind(
        &self,
        processfailedkind: *mut COREWEBVIEW2_PROCESS_FAILED_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ProcessFailedKind)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(processfailedkind),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2ProcessFailedEventArgs> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2ProcessFailedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ProcessFailedEventArgs> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2ProcessFailedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2ProcessFailedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2ProcessFailedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2ProcessFailedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2ProcessFailedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2ProcessFailedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2ProcessFailedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2ProcessFailedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2ProcessFailedEventArgs {
    type Vtable = ICoreWebView2ProcessFailedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x8155a9a4_1474_4a86_8cae_151b0fa6b8ca);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ProcessFailedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub ProcessFailedKind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        processfailedkind: *mut COREWEBVIEW2_PROCESS_FAILED_KIND,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2ProcessFailedEventArgs2(::windows::core::IUnknown);
impl ICoreWebView2ProcessFailedEventArgs2 {
    pub unsafe fn ProcessFailedKind(
        &self,
        processfailedkind: *mut COREWEBVIEW2_PROCESS_FAILED_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .ProcessFailedKind)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(processfailedkind),
        )
        .ok()
    }
    pub unsafe fn Reason(
        &self,
        reason: *mut COREWEBVIEW2_PROCESS_FAILED_REASON,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Reason)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(reason),
        )
        .ok()
    }
    pub unsafe fn ExitCode(&self, exitcode: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ExitCode)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(exitcode),
        )
        .ok()
    }
    pub unsafe fn ProcessDescription(
        &self,
        processdescription: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ProcessDescription)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(processdescription),
        )
        .ok()
    }
    pub unsafe fn FrameInfosForFailedProcess(
        &self,
    ) -> ::windows::core::Result<ICoreWebView2FrameInfoCollection> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).FrameInfosForFailedProcess)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2FrameInfoCollection>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2ProcessFailedEventArgs2> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2ProcessFailedEventArgs2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ProcessFailedEventArgs2> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2ProcessFailedEventArgs2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2ProcessFailedEventArgs2
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2ProcessFailedEventArgs2
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2ProcessFailedEventArgs2>
    for ICoreWebView2ProcessFailedEventArgs
{
    fn from(value: ICoreWebView2ProcessFailedEventArgs2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ProcessFailedEventArgs2>
    for ICoreWebView2ProcessFailedEventArgs
{
    fn from(value: &ICoreWebView2ProcessFailedEventArgs2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2ProcessFailedEventArgs>
    for ICoreWebView2ProcessFailedEventArgs2
{
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2ProcessFailedEventArgs> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2ProcessFailedEventArgs>
    for &ICoreWebView2ProcessFailedEventArgs2
{
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2ProcessFailedEventArgs> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2ProcessFailedEventArgs2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2ProcessFailedEventArgs2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2ProcessFailedEventArgs2 {}
impl ::core::fmt::Debug for ICoreWebView2ProcessFailedEventArgs2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2ProcessFailedEventArgs2")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2ProcessFailedEventArgs2 {
    type Vtable = ICoreWebView2ProcessFailedEventArgs2_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4dab9422_46fa_4c3e_a5d2_41d2071d3680);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ProcessFailedEventArgs2_Vtbl {
    pub base: ICoreWebView2ProcessFailedEventArgs_Vtbl,
    pub Reason: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        reason: *mut COREWEBVIEW2_PROCESS_FAILED_REASON,
    ) -> ::windows::core::HRESULT,
    pub ExitCode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        exitcode: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub ProcessDescription: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        processdescription: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub FrameInfosForFailedProcess: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        frames: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2ProcessFailedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2ProcessFailedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2ProcessFailedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2ProcessFailedEventHandler> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2ProcessFailedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ProcessFailedEventHandler> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2ProcessFailedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2ProcessFailedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2ProcessFailedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2ProcessFailedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2ProcessFailedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2ProcessFailedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2ProcessFailedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2ProcessFailedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2ProcessFailedEventHandler {
    type Vtable = ICoreWebView2ProcessFailedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x79e0aea4_990b_42d9_aa1d_0fcc2e5bc7f1);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ProcessFailedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2RasterizationScaleChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2RasterizationScaleChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2Controller>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2RasterizationScaleChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2RasterizationScaleChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2RasterizationScaleChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2RasterizationScaleChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2RasterizationScaleChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2RasterizationScaleChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2RasterizationScaleChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2RasterizationScaleChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2RasterizationScaleChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2RasterizationScaleChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2RasterizationScaleChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2RasterizationScaleChangedEventHandler {
    type Vtable = ICoreWebView2RasterizationScaleChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9c98c8b1_ac53_427e_a345_3049b5524bbe);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2RasterizationScaleChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2ScriptDialogOpeningEventArgs(::windows::core::IUnknown);
impl ICoreWebView2ScriptDialogOpeningEventArgs {
    pub unsafe fn Uri(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Uri)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn Kind(
        &self,
        kind: *mut COREWEBVIEW2_SCRIPT_DIALOG_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Kind)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(kind),
        )
        .ok()
    }
    pub unsafe fn Message(
        &self,
        message: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Message)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(message),
        )
        .ok()
    }
    pub unsafe fn Accept(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Accept)(::core::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn DefaultText(
        &self,
        defaulttext: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DefaultText)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(defaulttext),
        )
        .ok()
    }
    pub unsafe fn ResultText(
        &self,
        resulttext: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ResultText)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(resulttext),
        )
        .ok()
    }
    pub unsafe fn SetResultText<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        resulttext: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetResultText)(
            ::core::mem::transmute_copy(self),
            resulttext.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetDeferral(&self) -> ::windows::core::Result<ICoreWebView2Deferral> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetDeferral)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Deferral>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2ScriptDialogOpeningEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2ScriptDialogOpeningEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ScriptDialogOpeningEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2ScriptDialogOpeningEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2ScriptDialogOpeningEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2ScriptDialogOpeningEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2ScriptDialogOpeningEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2ScriptDialogOpeningEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2ScriptDialogOpeningEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2ScriptDialogOpeningEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2ScriptDialogOpeningEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2ScriptDialogOpeningEventArgs {
    type Vtable = ICoreWebView2ScriptDialogOpeningEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x7390bb70_abe0_4843_9529_f143b31b03d6);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ScriptDialogOpeningEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub Kind: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        kind: *mut COREWEBVIEW2_SCRIPT_DIALOG_KIND,
    ) -> ::windows::core::HRESULT,
    pub Message: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        message: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub Accept:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub DefaultText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        defaulttext: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub ResultText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        resulttext: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub SetResultText: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        resulttext: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        deferral: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2ScriptDialogOpeningEventHandler(::windows::core::IUnknown);
impl ICoreWebView2ScriptDialogOpeningEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2ScriptDialogOpeningEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2ScriptDialogOpeningEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2ScriptDialogOpeningEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ScriptDialogOpeningEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2ScriptDialogOpeningEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2ScriptDialogOpeningEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2ScriptDialogOpeningEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2ScriptDialogOpeningEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2ScriptDialogOpeningEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2ScriptDialogOpeningEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2ScriptDialogOpeningEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2ScriptDialogOpeningEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2ScriptDialogOpeningEventHandler {
    type Vtable = ICoreWebView2ScriptDialogOpeningEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xef381bf9_afa8_4e37_91c4_8ac48524bdfb);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ScriptDialogOpeningEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2Settings(::windows::core::IUnknown);
impl ICoreWebView2Settings {
    pub unsafe fn IsScriptEnabled(
        &self,
        isscriptenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsScriptEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isscriptenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsScriptEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isscriptenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetIsScriptEnabled)(
            ::core::mem::transmute_copy(self),
            isscriptenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsWebMessageEnabled(
        &self,
        iswebmessageenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsWebMessageEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(iswebmessageenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsWebMessageEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        iswebmessageenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetIsWebMessageEnabled)(
            ::core::mem::transmute_copy(self),
            iswebmessageenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDefaultScriptDialogsEnabled(
        &self,
        aredefaultscriptdialogsenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AreDefaultScriptDialogsEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(aredefaultscriptdialogsenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDefaultScriptDialogsEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        aredefaultscriptdialogsenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetAreDefaultScriptDialogsEnabled)(
            ::core::mem::transmute_copy(self),
            aredefaultscriptdialogsenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsStatusBarEnabled(
        &self,
        isstatusbarenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsStatusBarEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isstatusbarenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsStatusBarEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isstatusbarenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetIsStatusBarEnabled)(
            ::core::mem::transmute_copy(self),
            isstatusbarenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDevToolsEnabled(
        &self,
        aredevtoolsenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AreDevToolsEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(aredevtoolsenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDevToolsEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        aredevtoolsenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetAreDevToolsEnabled)(
            ::core::mem::transmute_copy(self),
            aredevtoolsenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDefaultContextMenusEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AreDefaultContextMenusEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDefaultContextMenusEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetAreDefaultContextMenusEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreHostObjectsAllowed(
        &self,
        allowed: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AreHostObjectsAllowed)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(allowed),
        )
        .ok()
    }
    pub unsafe fn SetAreHostObjectsAllowed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        allowed: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetAreHostObjectsAllowed)(
            ::core::mem::transmute_copy(self),
            allowed.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsZoomControlEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsZoomControlEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsZoomControlEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetIsZoomControlEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsBuiltInErrorPageEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsBuiltInErrorPageEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsBuiltInErrorPageEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetIsBuiltInErrorPageEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2Settings> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Settings) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Settings) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Settings {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Settings {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Settings {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Settings {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Settings {}
impl ::core::fmt::Debug for ICoreWebView2Settings {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Settings")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Settings {
    type Vtable = ICoreWebView2Settings_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe562e4f0_d7fa_43ac_8d71_c05150499f00);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings_Vtbl where { pub base : :: windows :: core :: IUnknownVtbl , pub IsScriptEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , isscriptenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetIsScriptEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , isscriptenabled : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub IsWebMessageEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , iswebmessageenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetIsWebMessageEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , iswebmessageenabled : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub AreDefaultScriptDialogsEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , aredefaultscriptdialogsenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetAreDefaultScriptDialogsEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , aredefaultscriptdialogsenabled : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub IsStatusBarEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , isstatusbarenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetIsStatusBarEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , isstatusbarenabled : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub AreDevToolsEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , aredevtoolsenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetAreDevToolsEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , aredevtoolsenabled : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub AreDefaultContextMenusEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , enabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetAreDefaultContextMenusEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , enabled : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub AreHostObjectsAllowed : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , allowed : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetAreHostObjectsAllowed : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , allowed : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub IsZoomControlEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , enabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetIsZoomControlEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , enabled : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub IsBuiltInErrorPageEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , enabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetIsBuiltInErrorPageEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , enabled : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2Settings2(::windows::core::IUnknown);
impl ICoreWebView2Settings2 {
    pub unsafe fn IsScriptEnabled(
        &self,
        isscriptenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .IsScriptEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isscriptenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsScriptEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isscriptenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetIsScriptEnabled)(
            ::core::mem::transmute_copy(self),
            isscriptenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsWebMessageEnabled(
        &self,
        iswebmessageenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .IsWebMessageEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(iswebmessageenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsWebMessageEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        iswebmessageenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetIsWebMessageEnabled)(
            ::core::mem::transmute_copy(self),
            iswebmessageenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDefaultScriptDialogsEnabled(
        &self,
        aredefaultscriptdialogsenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .AreDefaultScriptDialogsEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(aredefaultscriptdialogsenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDefaultScriptDialogsEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        aredefaultscriptdialogsenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetAreDefaultScriptDialogsEnabled)(
            ::core::mem::transmute_copy(self),
            aredefaultscriptdialogsenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsStatusBarEnabled(
        &self,
        isstatusbarenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .IsStatusBarEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isstatusbarenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsStatusBarEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isstatusbarenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetIsStatusBarEnabled)(
            ::core::mem::transmute_copy(self),
            isstatusbarenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDevToolsEnabled(
        &self,
        aredevtoolsenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .AreDevToolsEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(aredevtoolsenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDevToolsEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        aredevtoolsenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetAreDevToolsEnabled)(
            ::core::mem::transmute_copy(self),
            aredevtoolsenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDefaultContextMenusEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .AreDefaultContextMenusEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDefaultContextMenusEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetAreDefaultContextMenusEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreHostObjectsAllowed(
        &self,
        allowed: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .AreHostObjectsAllowed)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(allowed),
        )
        .ok()
    }
    pub unsafe fn SetAreHostObjectsAllowed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        allowed: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetAreHostObjectsAllowed)(
            ::core::mem::transmute_copy(self),
            allowed.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsZoomControlEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .IsZoomControlEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsZoomControlEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetIsZoomControlEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsBuiltInErrorPageEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .IsBuiltInErrorPageEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsBuiltInErrorPageEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetIsBuiltInErrorPageEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn UserAgent(
        &self,
        useragent: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).UserAgent)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(useragent),
        )
        .ok()
    }
    pub unsafe fn SetUserAgent<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        useragent: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetUserAgent)(
            ::core::mem::transmute_copy(self),
            useragent.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2Settings2> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Settings2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings2> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Settings2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Settings2 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Settings2 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings2> for ICoreWebView2Settings {
    fn from(value: ICoreWebView2Settings2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings2> for ICoreWebView2Settings {
    fn from(value: &ICoreWebView2Settings2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings> for ICoreWebView2Settings2 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings> for &ICoreWebView2Settings2 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Settings2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Settings2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Settings2 {}
impl ::core::fmt::Debug for ICoreWebView2Settings2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Settings2")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Settings2 {
    type Vtable = ICoreWebView2Settings2_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xee9a0f68_f46c_4e32_ac23_ef8cac224d2a);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings2_Vtbl {
    pub base: ICoreWebView2Settings_Vtbl,
    pub UserAgent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        useragent: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub SetUserAgent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        useragent: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2Settings3(::windows::core::IUnknown);
impl ICoreWebView2Settings3 {
    pub unsafe fn IsScriptEnabled(
        &self,
        isscriptenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .IsScriptEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isscriptenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsScriptEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isscriptenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetIsScriptEnabled)(
            ::core::mem::transmute_copy(self),
            isscriptenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsWebMessageEnabled(
        &self,
        iswebmessageenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .IsWebMessageEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(iswebmessageenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsWebMessageEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        iswebmessageenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetIsWebMessageEnabled)(
            ::core::mem::transmute_copy(self),
            iswebmessageenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDefaultScriptDialogsEnabled(
        &self,
        aredefaultscriptdialogsenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .AreDefaultScriptDialogsEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(aredefaultscriptdialogsenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDefaultScriptDialogsEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        aredefaultscriptdialogsenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetAreDefaultScriptDialogsEnabled)(
            ::core::mem::transmute_copy(self),
            aredefaultscriptdialogsenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsStatusBarEnabled(
        &self,
        isstatusbarenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .IsStatusBarEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isstatusbarenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsStatusBarEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isstatusbarenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetIsStatusBarEnabled)(
            ::core::mem::transmute_copy(self),
            isstatusbarenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDevToolsEnabled(
        &self,
        aredevtoolsenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .AreDevToolsEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(aredevtoolsenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDevToolsEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        aredevtoolsenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetAreDevToolsEnabled)(
            ::core::mem::transmute_copy(self),
            aredevtoolsenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDefaultContextMenusEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .AreDefaultContextMenusEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDefaultContextMenusEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetAreDefaultContextMenusEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreHostObjectsAllowed(
        &self,
        allowed: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .AreHostObjectsAllowed)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(allowed),
        )
        .ok()
    }
    pub unsafe fn SetAreHostObjectsAllowed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        allowed: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetAreHostObjectsAllowed)(
            ::core::mem::transmute_copy(self),
            allowed.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsZoomControlEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .IsZoomControlEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsZoomControlEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetIsZoomControlEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsBuiltInErrorPageEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .IsBuiltInErrorPageEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsBuiltInErrorPageEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetIsBuiltInErrorPageEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn UserAgent(
        &self,
        useragent: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.UserAgent)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(useragent),
        )
        .ok()
    }
    pub unsafe fn SetUserAgent<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        useragent: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.SetUserAgent)(
            ::core::mem::transmute_copy(self),
            useragent.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreBrowserAcceleratorKeysEnabled(
        &self,
        arebrowseracceleratorkeysenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).AreBrowserAcceleratorKeysEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(arebrowseracceleratorkeysenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreBrowserAcceleratorKeysEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        arebrowseracceleratorkeysenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetAreBrowserAcceleratorKeysEnabled)(
            ::core::mem::transmute_copy(self),
            arebrowseracceleratorkeysenabled.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2Settings3> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Settings3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings3> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Settings3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Settings3 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Settings3 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings3> for ICoreWebView2Settings {
    fn from(value: ICoreWebView2Settings3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings3> for ICoreWebView2Settings {
    fn from(value: &ICoreWebView2Settings3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings> for ICoreWebView2Settings3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings> for &ICoreWebView2Settings3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings3> for ICoreWebView2Settings2 {
    fn from(value: ICoreWebView2Settings3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings3> for ICoreWebView2Settings2 {
    fn from(value: &ICoreWebView2Settings3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings2> for ICoreWebView2Settings3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings2> for &ICoreWebView2Settings3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Settings3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Settings3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Settings3 {}
impl ::core::fmt::Debug for ICoreWebView2Settings3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Settings3")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Settings3 {
    type Vtable = ICoreWebView2Settings3_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xfdb5ab74_af33_4854_84f0_0a631deb5eba);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings3_Vtbl where { pub base : ICoreWebView2Settings2_Vtbl , pub AreBrowserAcceleratorKeysEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , arebrowseracceleratorkeysenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetAreBrowserAcceleratorKeysEnabled : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , arebrowseracceleratorkeysenabled : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2Settings4(::windows::core::IUnknown);
impl ICoreWebView2Settings4 {
    pub unsafe fn IsScriptEnabled(
        &self,
        isscriptenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .IsScriptEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isscriptenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsScriptEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isscriptenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .SetIsScriptEnabled)(
            ::core::mem::transmute_copy(self),
            isscriptenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsWebMessageEnabled(
        &self,
        iswebmessageenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .IsWebMessageEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(iswebmessageenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsWebMessageEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        iswebmessageenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .SetIsWebMessageEnabled)(
            ::core::mem::transmute_copy(self),
            iswebmessageenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDefaultScriptDialogsEnabled(
        &self,
        aredefaultscriptdialogsenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .AreDefaultScriptDialogsEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(aredefaultscriptdialogsenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDefaultScriptDialogsEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        aredefaultscriptdialogsenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .SetAreDefaultScriptDialogsEnabled)(
            ::core::mem::transmute_copy(self),
            aredefaultscriptdialogsenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsStatusBarEnabled(
        &self,
        isstatusbarenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .IsStatusBarEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isstatusbarenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsStatusBarEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isstatusbarenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .SetIsStatusBarEnabled)(
            ::core::mem::transmute_copy(self),
            isstatusbarenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDevToolsEnabled(
        &self,
        aredevtoolsenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .AreDevToolsEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(aredevtoolsenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDevToolsEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        aredevtoolsenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .SetAreDevToolsEnabled)(
            ::core::mem::transmute_copy(self),
            aredevtoolsenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDefaultContextMenusEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .AreDefaultContextMenusEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDefaultContextMenusEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .SetAreDefaultContextMenusEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreHostObjectsAllowed(
        &self,
        allowed: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .AreHostObjectsAllowed)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(allowed),
        )
        .ok()
    }
    pub unsafe fn SetAreHostObjectsAllowed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        allowed: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .SetAreHostObjectsAllowed)(
            ::core::mem::transmute_copy(self),
            allowed.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsZoomControlEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .IsZoomControlEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsZoomControlEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .SetIsZoomControlEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsBuiltInErrorPageEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .IsBuiltInErrorPageEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsBuiltInErrorPageEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .SetIsBuiltInErrorPageEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn UserAgent(
        &self,
        useragent: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.UserAgent)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(useragent),
        )
        .ok()
    }
    pub unsafe fn SetUserAgent<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        useragent: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetUserAgent)(
            ::core::mem::transmute_copy(self),
            useragent.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreBrowserAcceleratorKeysEnabled(
        &self,
        arebrowseracceleratorkeysenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .AreBrowserAcceleratorKeysEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(arebrowseracceleratorkeysenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreBrowserAcceleratorKeysEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        arebrowseracceleratorkeysenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetAreBrowserAcceleratorKeysEnabled)(
            ::core::mem::transmute_copy(self),
            arebrowseracceleratorkeysenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsPasswordAutosaveEnabled(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsPasswordAutosaveEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetIsPasswordAutosaveEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetIsPasswordAutosaveEnabled)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsGeneralAutofillEnabled(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsGeneralAutofillEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetIsGeneralAutofillEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetIsGeneralAutofillEnabled)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2Settings4> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Settings4) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings4> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Settings4) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Settings4 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Settings4 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings4> for ICoreWebView2Settings {
    fn from(value: ICoreWebView2Settings4) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings4> for ICoreWebView2Settings {
    fn from(value: &ICoreWebView2Settings4) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings> for ICoreWebView2Settings4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings> for &ICoreWebView2Settings4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings4> for ICoreWebView2Settings2 {
    fn from(value: ICoreWebView2Settings4) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings4> for ICoreWebView2Settings2 {
    fn from(value: &ICoreWebView2Settings4) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings2> for ICoreWebView2Settings4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings2> for &ICoreWebView2Settings4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings4> for ICoreWebView2Settings3 {
    fn from(value: ICoreWebView2Settings4) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings4> for ICoreWebView2Settings3 {
    fn from(value: &ICoreWebView2Settings4) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings3> for ICoreWebView2Settings4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings3> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings3> for &ICoreWebView2Settings4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings3> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Settings4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Settings4 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Settings4 {}
impl ::core::fmt::Debug for ICoreWebView2Settings4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Settings4")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Settings4 {
    type Vtable = ICoreWebView2Settings4_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xcb56846c_4168_4d53_b04f_03b6d6796ff2);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings4_Vtbl {
    pub base: ICoreWebView2Settings3_Vtbl,
    pub IsPasswordAutosaveEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetIsPasswordAutosaveEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub IsGeneralAutofillEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetIsGeneralAutofillEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2Settings5(::windows::core::IUnknown);
impl ICoreWebView2Settings5 {
    pub unsafe fn IsScriptEnabled(
        &self,
        isscriptenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .IsScriptEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isscriptenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsScriptEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isscriptenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .SetIsScriptEnabled)(
            ::core::mem::transmute_copy(self),
            isscriptenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsWebMessageEnabled(
        &self,
        iswebmessageenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .IsWebMessageEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(iswebmessageenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsWebMessageEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        iswebmessageenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .SetIsWebMessageEnabled)(
            ::core::mem::transmute_copy(self),
            iswebmessageenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDefaultScriptDialogsEnabled(
        &self,
        aredefaultscriptdialogsenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .AreDefaultScriptDialogsEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(aredefaultscriptdialogsenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDefaultScriptDialogsEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        aredefaultscriptdialogsenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .SetAreDefaultScriptDialogsEnabled)(
            ::core::mem::transmute_copy(self),
            aredefaultscriptdialogsenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsStatusBarEnabled(
        &self,
        isstatusbarenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .IsStatusBarEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isstatusbarenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsStatusBarEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isstatusbarenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .SetIsStatusBarEnabled)(
            ::core::mem::transmute_copy(self),
            isstatusbarenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDevToolsEnabled(
        &self,
        aredevtoolsenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .AreDevToolsEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(aredevtoolsenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDevToolsEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        aredevtoolsenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .SetAreDevToolsEnabled)(
            ::core::mem::transmute_copy(self),
            aredevtoolsenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDefaultContextMenusEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .AreDefaultContextMenusEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDefaultContextMenusEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .SetAreDefaultContextMenusEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreHostObjectsAllowed(
        &self,
        allowed: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .AreHostObjectsAllowed)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(allowed),
        )
        .ok()
    }
    pub unsafe fn SetAreHostObjectsAllowed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        allowed: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .SetAreHostObjectsAllowed)(
            ::core::mem::transmute_copy(self),
            allowed.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsZoomControlEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .IsZoomControlEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsZoomControlEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .SetIsZoomControlEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsBuiltInErrorPageEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .IsBuiltInErrorPageEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsBuiltInErrorPageEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .SetIsBuiltInErrorPageEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn UserAgent(
        &self,
        useragent: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .UserAgent)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(useragent),
        )
        .ok()
    }
    pub unsafe fn SetUserAgent<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        useragent: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .SetUserAgent)(
            ::core::mem::transmute_copy(self),
            useragent.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreBrowserAcceleratorKeysEnabled(
        &self,
        arebrowseracceleratorkeysenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .AreBrowserAcceleratorKeysEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(arebrowseracceleratorkeysenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreBrowserAcceleratorKeysEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        arebrowseracceleratorkeysenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetAreBrowserAcceleratorKeysEnabled)(
            ::core::mem::transmute_copy(self),
            arebrowseracceleratorkeysenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsPasswordAutosaveEnabled(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .IsPasswordAutosaveEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetIsPasswordAutosaveEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetIsPasswordAutosaveEnabled)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsGeneralAutofillEnabled(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .IsGeneralAutofillEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetIsGeneralAutofillEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetIsGeneralAutofillEnabled)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsPinchZoomEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsPinchZoomEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsPinchZoomEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetIsPinchZoomEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2Settings5> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Settings5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings5> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Settings5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Settings5 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Settings5 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings5> for ICoreWebView2Settings {
    fn from(value: ICoreWebView2Settings5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings5> for ICoreWebView2Settings {
    fn from(value: &ICoreWebView2Settings5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings> for ICoreWebView2Settings5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings> for &ICoreWebView2Settings5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings5> for ICoreWebView2Settings2 {
    fn from(value: ICoreWebView2Settings5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings5> for ICoreWebView2Settings2 {
    fn from(value: &ICoreWebView2Settings5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings2> for ICoreWebView2Settings5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings2> for &ICoreWebView2Settings5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings5> for ICoreWebView2Settings3 {
    fn from(value: ICoreWebView2Settings5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings5> for ICoreWebView2Settings3 {
    fn from(value: &ICoreWebView2Settings5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings3> for ICoreWebView2Settings5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings3> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings3> for &ICoreWebView2Settings5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings3> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings5> for ICoreWebView2Settings4 {
    fn from(value: ICoreWebView2Settings5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings5> for ICoreWebView2Settings4 {
    fn from(value: &ICoreWebView2Settings5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings4> for ICoreWebView2Settings5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings4> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings4> for &ICoreWebView2Settings5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings4> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Settings5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Settings5 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Settings5 {}
impl ::core::fmt::Debug for ICoreWebView2Settings5 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Settings5")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Settings5 {
    type Vtable = ICoreWebView2Settings5_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x183e7052_1d03_43a0_ab99_98e043b66b39);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings5_Vtbl {
    pub base: ICoreWebView2Settings4_Vtbl,
    pub IsPinchZoomEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetIsPinchZoomEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        enabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2Settings6(::windows::core::IUnknown);
impl ICoreWebView2Settings6 {
    pub unsafe fn IsScriptEnabled(
        &self,
        isscriptenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .IsScriptEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isscriptenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsScriptEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isscriptenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .SetIsScriptEnabled)(
            ::core::mem::transmute_copy(self),
            isscriptenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsWebMessageEnabled(
        &self,
        iswebmessageenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .IsWebMessageEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(iswebmessageenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsWebMessageEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        iswebmessageenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .SetIsWebMessageEnabled)(
            ::core::mem::transmute_copy(self),
            iswebmessageenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDefaultScriptDialogsEnabled(
        &self,
        aredefaultscriptdialogsenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .AreDefaultScriptDialogsEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(aredefaultscriptdialogsenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDefaultScriptDialogsEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        aredefaultscriptdialogsenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .SetAreDefaultScriptDialogsEnabled)(
            ::core::mem::transmute_copy(self),
            aredefaultscriptdialogsenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsStatusBarEnabled(
        &self,
        isstatusbarenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .IsStatusBarEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isstatusbarenabled),
        )
        .ok()
    }
    pub unsafe fn SetIsStatusBarEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        isstatusbarenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .SetIsStatusBarEnabled)(
            ::core::mem::transmute_copy(self),
            isstatusbarenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDevToolsEnabled(
        &self,
        aredevtoolsenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .AreDevToolsEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(aredevtoolsenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDevToolsEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        aredevtoolsenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .SetAreDevToolsEnabled)(
            ::core::mem::transmute_copy(self),
            aredevtoolsenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreDefaultContextMenusEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .AreDefaultContextMenusEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetAreDefaultContextMenusEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .SetAreDefaultContextMenusEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreHostObjectsAllowed(
        &self,
        allowed: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .AreHostObjectsAllowed)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(allowed),
        )
        .ok()
    }
    pub unsafe fn SetAreHostObjectsAllowed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        allowed: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .SetAreHostObjectsAllowed)(
            ::core::mem::transmute_copy(self),
            allowed.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsZoomControlEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .IsZoomControlEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsZoomControlEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .SetIsZoomControlEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsBuiltInErrorPageEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .IsBuiltInErrorPageEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsBuiltInErrorPageEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .SetIsBuiltInErrorPageEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn UserAgent(
        &self,
        useragent: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .UserAgent)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(useragent),
        )
        .ok()
    }
    pub unsafe fn SetUserAgent<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        useragent: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .SetUserAgent)(
            ::core::mem::transmute_copy(self),
            useragent.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AreBrowserAcceleratorKeysEnabled(
        &self,
        arebrowseracceleratorkeysenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .AreBrowserAcceleratorKeysEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(arebrowseracceleratorkeysenabled),
        )
        .ok()
    }
    pub unsafe fn SetAreBrowserAcceleratorKeysEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        arebrowseracceleratorkeysenabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .SetAreBrowserAcceleratorKeysEnabled)(
            ::core::mem::transmute_copy(self),
            arebrowseracceleratorkeysenabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsPasswordAutosaveEnabled(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .IsPasswordAutosaveEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetIsPasswordAutosaveEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetIsPasswordAutosaveEnabled)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsGeneralAutofillEnabled(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .IsGeneralAutofillEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetIsGeneralAutofillEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetIsGeneralAutofillEnabled)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsPinchZoomEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .IsPinchZoomEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsPinchZoomEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetIsPinchZoomEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsSwipeNavigationEnabled(
        &self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsSwipeNavigationEnabled)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(enabled),
        )
        .ok()
    }
    pub unsafe fn SetIsSwipeNavigationEnabled<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        enabled: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetIsSwipeNavigationEnabled)(
            ::core::mem::transmute_copy(self),
            enabled.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2Settings6> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2Settings6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings6> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2Settings6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2Settings6 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2Settings6 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings6> for ICoreWebView2Settings {
    fn from(value: ICoreWebView2Settings6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings6> for ICoreWebView2Settings {
    fn from(value: &ICoreWebView2Settings6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings> for ICoreWebView2Settings6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings> for &ICoreWebView2Settings6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings6> for ICoreWebView2Settings2 {
    fn from(value: ICoreWebView2Settings6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings6> for ICoreWebView2Settings2 {
    fn from(value: &ICoreWebView2Settings6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings2> for ICoreWebView2Settings6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings2> for &ICoreWebView2Settings6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings6> for ICoreWebView2Settings3 {
    fn from(value: ICoreWebView2Settings6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings6> for ICoreWebView2Settings3 {
    fn from(value: &ICoreWebView2Settings6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings3> for ICoreWebView2Settings6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings3> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings3> for &ICoreWebView2Settings6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings3> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings6> for ICoreWebView2Settings4 {
    fn from(value: ICoreWebView2Settings6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings6> for ICoreWebView2Settings4 {
    fn from(value: &ICoreWebView2Settings6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings4> for ICoreWebView2Settings6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings4> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings4> for &ICoreWebView2Settings6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings4> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2Settings6> for ICoreWebView2Settings5 {
    fn from(value: ICoreWebView2Settings6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2Settings6> for ICoreWebView2Settings5 {
    fn from(value: &ICoreWebView2Settings6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings5> for ICoreWebView2Settings6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings5> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2Settings5> for &ICoreWebView2Settings6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2Settings5> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2Settings6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2Settings6 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2Settings6 {}
impl ::core::fmt::Debug for ICoreWebView2Settings6 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2Settings6")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2Settings6 {
    type Vtable = ICoreWebView2Settings6_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x11cb3acd_9bc8_43b8_83bf_f40753714f87);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2Settings6_Vtbl {
    pub base: ICoreWebView2Settings5_Vtbl,
    pub IsSwipeNavigationEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetIsSwipeNavigationEnabled: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        enabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2SourceChangedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2SourceChangedEventArgs {
    pub unsafe fn IsNewDocument(
        &self,
        isnewdocument: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsNewDocument)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(isnewdocument),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2SourceChangedEventArgs> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2SourceChangedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2SourceChangedEventArgs> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2SourceChangedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2SourceChangedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2SourceChangedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2SourceChangedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2SourceChangedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2SourceChangedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2SourceChangedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2SourceChangedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2SourceChangedEventArgs {
    type Vtable = ICoreWebView2SourceChangedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x31e0e545_1dba_4266_8914_f63848a1f7d7);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2SourceChangedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub IsNewDocument: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        isnewdocument: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2SourceChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2SourceChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2SourceChangedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2SourceChangedEventHandler> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2SourceChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2SourceChangedEventHandler> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2SourceChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2SourceChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2SourceChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2SourceChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2SourceChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2SourceChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2SourceChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2SourceChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2SourceChangedEventHandler {
    type Vtable = ICoreWebView2SourceChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x3c067f9f_5388_4772_8b48_79f7ef1ab37c);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2SourceChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2StateChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2StateChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DownloadOperation>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2StateChangedEventHandler> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2StateChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2StateChangedEventHandler> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2StateChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2StateChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2StateChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2StateChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2StateChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2StateChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2StateChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2StateChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2StateChangedEventHandler {
    type Vtable = ICoreWebView2StateChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x81336594_7ede_4ba9_bf71_acf0a95b58dd);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2StateChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2StringCollection(::windows::core::IUnknown);
impl ICoreWebView2StringCollection {
    pub unsafe fn Count(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Count)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn GetValueAtIndex(
        &self,
        index: u32,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetValueAtIndex)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(index),
            ::core::mem::transmute(value),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2StringCollection> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2StringCollection) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2StringCollection> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2StringCollection) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2StringCollection
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2StringCollection
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2StringCollection {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2StringCollection {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2StringCollection {}
impl ::core::fmt::Debug for ICoreWebView2StringCollection {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2StringCollection")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2StringCollection {
    type Vtable = ICoreWebView2StringCollection_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xf41f3f8a_bcc3_11eb_8529_0242ac130003);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2StringCollection_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Count: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub GetValueAtIndex: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        index: u32,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2TrySuspendCompletedHandler(::windows::core::IUnknown);
impl ICoreWebView2TrySuspendCompletedHandler {
    pub unsafe fn Invoke<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        errorcode: ::windows::core::HRESULT,
        issuccessful: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(errorcode),
            issuccessful.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2TrySuspendCompletedHandler> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2TrySuspendCompletedHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2TrySuspendCompletedHandler> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2TrySuspendCompletedHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2TrySuspendCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2TrySuspendCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2TrySuspendCompletedHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2TrySuspendCompletedHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2TrySuspendCompletedHandler {}
impl ::core::fmt::Debug for ICoreWebView2TrySuspendCompletedHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2TrySuspendCompletedHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2TrySuspendCompletedHandler {
    type Vtable = ICoreWebView2TrySuspendCompletedHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x00f206a7_9d17_4605_91f6_4e8e4de192e3);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2TrySuspendCompletedHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        errorcode: ::windows::core::HRESULT,
        issuccessful: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2WebMessageReceivedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2WebMessageReceivedEventArgs {
    pub unsafe fn Source(
        &self,
        source: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Source)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(source),
        )
        .ok()
    }
    pub unsafe fn WebMessageAsJson(
        &self,
        webmessageasjson: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).WebMessageAsJson)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(webmessageasjson),
        )
        .ok()
    }
    pub unsafe fn TryGetWebMessageAsString(
        &self,
        webmessageasstring: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).TryGetWebMessageAsString)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(webmessageasstring),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2WebMessageReceivedEventArgs> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2WebMessageReceivedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2WebMessageReceivedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2WebMessageReceivedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2WebMessageReceivedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2WebMessageReceivedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2WebMessageReceivedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2WebMessageReceivedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2WebMessageReceivedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2WebMessageReceivedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2WebMessageReceivedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2WebMessageReceivedEventArgs {
    type Vtable = ICoreWebView2WebMessageReceivedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x0f99a40c_e962_4207_9e92_e3d542eff849);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebMessageReceivedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Source: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        source: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub WebMessageAsJson: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        webmessageasjson: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub TryGetWebMessageAsString: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        webmessageasstring: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2WebMessageReceivedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2WebMessageReceivedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2WebMessageReceivedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2WebMessageReceivedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2WebMessageReceivedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2WebMessageReceivedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2WebMessageReceivedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2WebMessageReceivedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2WebMessageReceivedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2WebMessageReceivedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2WebMessageReceivedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2WebMessageReceivedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2WebMessageReceivedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2WebMessageReceivedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2WebMessageReceivedEventHandler {
    type Vtable = ICoreWebView2WebMessageReceivedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x57213f19_00e6_49fa_8e07_898ea01ecbd2);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebMessageReceivedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2WebResourceRequest(::windows::core::IUnknown);
impl ICoreWebView2WebResourceRequest {
    pub unsafe fn Uri(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Uri)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn SetUri<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetUri)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Method(
        &self,
        method: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Method)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(method),
        )
        .ok()
    }
    pub unsafe fn SetMethod<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        method: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetMethod)(
            ::core::mem::transmute_copy(self),
            method.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Content(
        &self,
    ) -> ::windows::core::Result<super::super::super::super::Windows::Win32::System::Com::IStream>
    {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).Content)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<super::super::super::super::Windows::Win32::System::Com::IStream>(result__)
    }
    pub unsafe fn SetContent<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
    >(
        &self,
        content: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetContent)(
            ::core::mem::transmute_copy(self),
            content.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Headers(&self) -> ::windows::core::Result<ICoreWebView2HttpRequestHeaders> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).Headers)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2HttpRequestHeaders>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2WebResourceRequest> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2WebResourceRequest) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2WebResourceRequest> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2WebResourceRequest) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2WebResourceRequest
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2WebResourceRequest
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2WebResourceRequest {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2WebResourceRequest {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2WebResourceRequest {}
impl ::core::fmt::Debug for ICoreWebView2WebResourceRequest {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2WebResourceRequest")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2WebResourceRequest {
    type Vtable = ICoreWebView2WebResourceRequest_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x97055cd4_512c_4264_8b5f_e3f446cea6a5);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebResourceRequest_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Uri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub SetUri: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub Method: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        method: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub SetMethod: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        method: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub Content: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        content: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub SetContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        content: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub Headers: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        headers: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2WebResourceRequestedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2WebResourceRequestedEventArgs {
    pub unsafe fn Request(&self) -> ::windows::core::Result<ICoreWebView2WebResourceRequest> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).Request)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceRequest>(result__)
    }
    pub unsafe fn Response(&self) -> ::windows::core::Result<ICoreWebView2WebResourceResponse> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).Response)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceResponse>(result__)
    }
    pub unsafe fn SetResponse<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceResponse>,
    >(
        &self,
        response: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetResponse)(
            ::core::mem::transmute_copy(self),
            response.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn GetDeferral(&self) -> ::windows::core::Result<ICoreWebView2Deferral> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).GetDeferral)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Deferral>(result__)
    }
    pub unsafe fn ResourceContext(
        &self,
        context: *mut COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ResourceContext)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(context),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2WebResourceRequestedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2WebResourceRequestedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2WebResourceRequestedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2WebResourceRequestedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2WebResourceRequestedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2WebResourceRequestedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2WebResourceRequestedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2WebResourceRequestedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2WebResourceRequestedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2WebResourceRequestedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2WebResourceRequestedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2WebResourceRequestedEventArgs {
    type Vtable = ICoreWebView2WebResourceRequestedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x453e667f_12c7_49d4_be6d_ddbe7956f57a);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebResourceRequestedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Request: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        request: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub Response: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        response: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub SetResponse: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        response: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub GetDeferral: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        deferral: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub ResourceContext: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        context: *mut COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2WebResourceRequestedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2WebResourceRequestedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequestedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2WebResourceRequestedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2WebResourceRequestedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2WebResourceRequestedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2WebResourceRequestedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2WebResourceRequestedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2WebResourceRequestedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2WebResourceRequestedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2WebResourceRequestedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2WebResourceRequestedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2WebResourceRequestedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2WebResourceRequestedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2WebResourceRequestedEventHandler {
    type Vtable = ICoreWebView2WebResourceRequestedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xab00b74c_15f1_4646_80e8_e76341d25d71);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebResourceRequestedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2WebResourceResponse(::windows::core::IUnknown);
impl ICoreWebView2WebResourceResponse {
    pub unsafe fn Content(
        &self,
    ) -> ::windows::core::Result<super::super::super::super::Windows::Win32::System::Com::IStream>
    {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).Content)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<super::super::super::super::Windows::Win32::System::Com::IStream>(result__)
    }
    pub unsafe fn SetContent<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
    >(
        &self,
        content: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetContent)(
            ::core::mem::transmute_copy(self),
            content.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Headers(&self) -> ::windows::core::Result<ICoreWebView2HttpResponseHeaders> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).Headers)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2HttpResponseHeaders>(result__)
    }
    pub unsafe fn StatusCode(&self, statuscode: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).StatusCode)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(statuscode),
        )
        .ok()
    }
    pub unsafe fn SetStatusCode(&self, statuscode: i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetStatusCode)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(statuscode),
        )
        .ok()
    }
    pub unsafe fn ReasonPhrase(
        &self,
        reasonphrase: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ReasonPhrase)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(reasonphrase),
        )
        .ok()
    }
    pub unsafe fn SetReasonPhrase<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        reasonphrase: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetReasonPhrase)(
            ::core::mem::transmute_copy(self),
            reasonphrase.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2WebResourceResponse> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2WebResourceResponse) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2WebResourceResponse> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2WebResourceResponse) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2WebResourceResponse
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2WebResourceResponse
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2WebResourceResponse {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2WebResourceResponse {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2WebResourceResponse {}
impl ::core::fmt::Debug for ICoreWebView2WebResourceResponse {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2WebResourceResponse")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2WebResourceResponse {
    type Vtable = ICoreWebView2WebResourceResponse_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xaafcc94f_fa27_48fd_97df_830ef75aaec9);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebResourceResponse_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Content: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        content: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub SetContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        content: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub Headers: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        headers: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub StatusCode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        statuscode: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub SetStatusCode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        statuscode: i32,
    ) -> ::windows::core::HRESULT,
    pub ReasonPhrase: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        reasonphrase: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub SetReasonPhrase: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        reasonphrase: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2WebResourceResponseReceivedEventArgs(::windows::core::IUnknown);
impl ICoreWebView2WebResourceResponseReceivedEventArgs {
    pub unsafe fn Request(&self) -> ::windows::core::Result<ICoreWebView2WebResourceRequest> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).Request)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceRequest>(result__)
    }
    pub unsafe fn Response(&self) -> ::windows::core::Result<ICoreWebView2WebResourceResponseView> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).Response)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2WebResourceResponseView>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2WebResourceResponseReceivedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2WebResourceResponseReceivedEventArgs) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2WebResourceResponseReceivedEventArgs>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2WebResourceResponseReceivedEventArgs) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2WebResourceResponseReceivedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2WebResourceResponseReceivedEventArgs
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2WebResourceResponseReceivedEventArgs {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2WebResourceResponseReceivedEventArgs {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2WebResourceResponseReceivedEventArgs {}
impl ::core::fmt::Debug for ICoreWebView2WebResourceResponseReceivedEventArgs {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2WebResourceResponseReceivedEventArgs")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2WebResourceResponseReceivedEventArgs {
    type Vtable = ICoreWebView2WebResourceResponseReceivedEventArgs_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xd1db483d_6796_4b8b_80fc_13712bb716f4);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebResourceResponseReceivedEventArgs_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Request: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        request: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub Response: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        response: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2WebResourceResponseReceivedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2WebResourceResponseReceivedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceResponseReceivedEventArgs>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2WebResourceResponseReceivedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2WebResourceResponseReceivedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2WebResourceResponseReceivedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2WebResourceResponseReceivedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2WebResourceResponseReceivedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2WebResourceResponseReceivedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2WebResourceResponseReceivedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2WebResourceResponseReceivedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2WebResourceResponseReceivedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2WebResourceResponseReceivedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2WebResourceResponseReceivedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2WebResourceResponseReceivedEventHandler {
    type Vtable = ICoreWebView2WebResourceResponseReceivedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x7de9898a_24f5_40c3_a2de_d4f458e69828);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebResourceResponseReceivedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2WebResourceResponseView(::windows::core::IUnknown);
impl ICoreWebView2WebResourceResponseView {
    pub unsafe fn Headers(&self) -> ::windows::core::Result<ICoreWebView2HttpResponseHeaders> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).Headers)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2HttpResponseHeaders>(result__)
    }
    pub unsafe fn StatusCode(&self, statuscode: *mut i32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).StatusCode)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(statuscode),
        )
        .ok()
    }
    pub unsafe fn ReasonPhrase(
        &self,
        reasonphrase: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ReasonPhrase)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(reasonphrase),
        )
        .ok()
    }
    pub unsafe fn GetContent<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            ICoreWebView2WebResourceResponseViewGetContentCompletedHandler,
        >,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).GetContent)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2WebResourceResponseView> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2WebResourceResponseView) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2WebResourceResponseView> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2WebResourceResponseView) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2WebResourceResponseView
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2WebResourceResponseView
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2WebResourceResponseView {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2WebResourceResponseView {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2WebResourceResponseView {}
impl ::core::fmt::Debug for ICoreWebView2WebResourceResponseView {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2WebResourceResponseView")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2WebResourceResponseView {
    type Vtable = ICoreWebView2WebResourceResponseView_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x79701053_7759_4162_8f7d_f1b3f084928d);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebResourceResponseView_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Headers: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        headers: *mut ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub StatusCode: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        statuscode: *mut i32,
    ) -> ::windows::core::HRESULT,
    pub ReasonPhrase: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        reasonphrase: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::HRESULT,
    pub GetContent: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2WebResourceResponseViewGetContentCompletedHandler(
    ::windows::core::IUnknown,
);
impl ICoreWebView2WebResourceResponseViewGetContentCompletedHandler {
    pub unsafe fn Invoke<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
    >(
        &self,
        errorcode: ::windows::core::HRESULT,
        content: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(errorcode),
            content.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2WebResourceResponseViewGetContentCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2WebResourceResponseViewGetContentCompletedHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2WebResourceResponseViewGetContentCompletedHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2WebResourceResponseViewGetContentCompletedHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2WebResourceResponseViewGetContentCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2WebResourceResponseViewGetContentCompletedHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2WebResourceResponseViewGetContentCompletedHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2WebResourceResponseViewGetContentCompletedHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2WebResourceResponseViewGetContentCompletedHandler {}
impl ::core::fmt::Debug for ICoreWebView2WebResourceResponseViewGetContentCompletedHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2WebResourceResponseViewGetContentCompletedHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface
    for ICoreWebView2WebResourceResponseViewGetContentCompletedHandler
{
    type Vtable = ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x875738e1_9fa2_40e3_8b74_2e8972dd6fe7);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        errorcode: ::windows::core::HRESULT,
        content: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2WindowCloseRequestedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2WindowCloseRequestedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2WindowCloseRequestedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2WindowCloseRequestedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2WindowCloseRequestedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2WindowCloseRequestedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2WindowCloseRequestedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2WindowCloseRequestedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2WindowCloseRequestedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2WindowCloseRequestedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2WindowCloseRequestedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2WindowCloseRequestedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2WindowCloseRequestedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2WindowCloseRequestedEventHandler {
    type Vtable = ICoreWebView2WindowCloseRequestedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5c19e9e0_092f_486b_affa_ca8231913039);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WindowCloseRequestedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2WindowFeatures(::windows::core::IUnknown);
impl ICoreWebView2WindowFeatures {
    pub unsafe fn HasPosition(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).HasPosition)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn HasSize(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).HasSize)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn Left(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Left)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn Top(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Top)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn Height(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Height)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn Width(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Width)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn ShouldDisplayMenuBar(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ShouldDisplayMenuBar)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn ShouldDisplayStatus(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ShouldDisplayStatus)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn ShouldDisplayToolbar(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ShouldDisplayToolbar)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn ShouldDisplayScrollBars(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ShouldDisplayScrollBars)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2WindowFeatures> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2WindowFeatures) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2WindowFeatures> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2WindowFeatures) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2WindowFeatures {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2WindowFeatures
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2WindowFeatures {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2WindowFeatures {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2WindowFeatures {}
impl ::core::fmt::Debug for ICoreWebView2WindowFeatures {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2WindowFeatures")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2WindowFeatures {
    type Vtable = ICoreWebView2WindowFeatures_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x5eaf559f_b46e_4397_8860_e422f287ff1e);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2WindowFeatures_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub HasPosition: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub HasSize: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub Left: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub Top: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub Height: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub Width: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut u32,
    ) -> ::windows::core::HRESULT,
    pub ShouldDisplayMenuBar: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub ShouldDisplayStatus: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub ShouldDisplayToolbar: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub ShouldDisplayScrollBars: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2ZoomFactorChangedEventHandler(::windows::core::IUnknown);
impl ICoreWebView2ZoomFactorChangedEventHandler {
    pub unsafe fn Invoke<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2Controller>,
        Param1: ::windows::core::IntoParam<'a, ::windows::core::IUnknown>,
    >(
        &self,
        sender: Param0,
        args: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Invoke)(
            ::core::mem::transmute_copy(self),
            sender.into_param().abi(),
            args.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2ZoomFactorChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: ICoreWebView2ZoomFactorChangedEventHandler) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2ZoomFactorChangedEventHandler>
    for ::windows::core::IUnknown
{
    fn from(value: &ICoreWebView2ZoomFactorChangedEventHandler) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for ICoreWebView2ZoomFactorChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown>
    for &ICoreWebView2ZoomFactorChangedEventHandler
{
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2ZoomFactorChangedEventHandler {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2ZoomFactorChangedEventHandler {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2ZoomFactorChangedEventHandler {}
impl ::core::fmt::Debug for ICoreWebView2ZoomFactorChangedEventHandler {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2ZoomFactorChangedEventHandler")
            .field(&self.0)
            .finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2ZoomFactorChangedEventHandler {
    type Vtable = ICoreWebView2ZoomFactorChangedEventHandler_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xb52d71d6_c4df_4543_a90c_64a3e60f38cb);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2ZoomFactorChangedEventHandler_Vtbl {
    pub base: ::windows::core::IUnknownVtbl,
    pub Invoke: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        sender: ::windows::core::RawPtr,
        args: *mut ::core::ffi::c_void,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2_2(::windows::core::IUnknown);
impl ICoreWebView2_2 {
    pub unsafe fn Settings(&self) -> ::windows::core::Result<ICoreWebView2Settings> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).base.Settings)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Settings>(result__)
    }
    pub unsafe fn Source(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.Source)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn Navigate<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.Navigate)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigateToString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        htmlcontent: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .NavigateToString)(
            ::core::mem::transmute_copy(self),
            htmlcontent.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .NavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveNavigationStarting)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContentLoadingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.ContentLoading)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveContentLoading)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn SourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2SourceChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.SourceChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveSourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveSourceChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn HistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2HistoryChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.HistoryChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveHistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveHistoryChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn NavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .NavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveNavigationCompleted)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn FrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .FrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveFrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .FrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveFrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ScriptDialogOpeningEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .ScriptDialogOpening)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveScriptDialogOpening)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn PermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2PermissionRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .PermissionRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemovePermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemovePermissionRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ProcessFailedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.ProcessFailed)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveProcessFailed)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn AddScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler,
        >,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .AddScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        id: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            id.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ExecuteScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2ExecuteScriptCompletedHandler>,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.ExecuteScript)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CapturePreview<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CapturePreviewCompletedHandler>,
    >(
        &self,
        imageformat: COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT,
        imagestream: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.CapturePreview)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(imageformat),
            imagestream.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Reload(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.Reload)(::core::mem::transmute_copy(self))
            .ok()
    }
    pub unsafe fn PostWebMessageAsJson<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasjson: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .PostWebMessageAsJson)(
            ::core::mem::transmute_copy(self),
            webmessageasjson.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn PostWebMessageAsString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasstring: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .PostWebMessageAsString)(
            ::core::mem::transmute_copy(self),
            webmessageasstring.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebMessageReceivedEventHandler>,
    >(
        &self,
        handler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .WebMessageReceived)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveWebMessageReceived)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CallDevToolsProtocolMethod<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>,
    >(
        &self,
        methodname: Param0,
        parametersasjson: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .CallDevToolsProtocolMethod)(
            ::core::mem::transmute_copy(self),
            methodname.into_param().abi(),
            parametersasjson.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn BrowserProcessId(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .BrowserProcessId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn CanGoBack(
        &self,
        cangoback: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.CanGoBack)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoback),
        )
        .ok()
    }
    pub unsafe fn CanGoForward(
        &self,
        cangoforward: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.CanGoForward)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoforward),
        )
        .ok()
    }
    pub unsafe fn GoBack(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.GoBack)(::core::mem::transmute_copy(self))
            .ok()
    }
    pub unsafe fn GoForward(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.GoForward)(::core::mem::transmute_copy(self))
            .ok()
    }
    pub unsafe fn GetDevToolsProtocolEventReceiver<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        eventname: Param0,
    ) -> ::windows::core::Result<ICoreWebView2DevToolsProtocolEventReceiver> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .GetDevToolsProtocolEventReceiver)(
            ::core::mem::transmute_copy(self),
            eventname.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2DevToolsProtocolEventReceiver>(result__)
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.Stop)(::core::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn NewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewWindowRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .NewWindowRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveNewWindowRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn DocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DocumentTitleChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .DocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveDocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DocumentTitle(
        &self,
        title: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.DocumentTitle)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(title),
        )
        .ok()
    }
    pub unsafe fn AddHostObjectToScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        object: *mut super::super::super::super::Windows::Win32::System::Com::VARIANT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .AddHostObjectToScript)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(object),
        )
        .ok()
    }
    pub unsafe fn RemoveHostObjectFromScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveHostObjectFromScript)(
            ::core::mem::transmute_copy(self), name.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn OpenDevToolsWindow(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .OpenDevToolsWindow)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn ContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContainsFullScreenElementChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .ContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ContainsFullScreenElement(
        &self,
        containsfullscreenelement : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .ContainsFullScreenElement)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(containsfullscreenelement),
        )
        .ok()
    }
    pub unsafe fn WebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .WebResourceRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveWebResourceRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .AddWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn WindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WindowCloseRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .WindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveWindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceResponseReceivedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).WebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveWebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigateWithWebResourceRequest<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequest>,
    >(
        &self,
        request: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).NavigateWithWebResourceRequest)(
            ::core::mem::transmute_copy(self),
            request.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DOMContentLoadedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DOMContentLoaded)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveDOMContentLoaded)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CookieManager(&self) -> ::windows::core::Result<ICoreWebView2CookieManager> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).CookieManager)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2CookieManager>(result__)
    }
    pub unsafe fn Environment(&self) -> ::windows::core::Result<ICoreWebView2Environment> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).Environment)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Environment>(result__)
    }
}
impl ::core::convert::From<ICoreWebView2_2> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2_2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_2> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2_2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2_2 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2_2 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_2> for ICoreWebView2 {
    fn from(value: ICoreWebView2_2) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_2> for ICoreWebView2 {
    fn from(value: &ICoreWebView2_2) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for ICoreWebView2_2 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for &ICoreWebView2_2 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2_2 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2_2 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2_2 {}
impl ::core::fmt::Debug for ICoreWebView2_2 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2_2").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2_2 {
    type Vtable = ICoreWebView2_2_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x9e8f0cf8_e670_4b5e_b2bc_73e061e3184c);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_2_Vtbl where { pub base : ICoreWebView2_Vtbl , pub WebResourceResponseReceived : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveWebResourceResponseReceived : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub NavigateWithWebResourceRequest : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , request : :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT , pub DOMContentLoaded : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveDOMContentLoaded : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub CookieManager : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , cookiemanager : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT , pub Environment : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , environment : * mut :: windows :: core :: RawPtr , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2_3(::windows::core::IUnknown);
impl ICoreWebView2_3 {
    pub unsafe fn Settings(&self) -> ::windows::core::Result<ICoreWebView2Settings> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).base.base.Settings)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Settings>(result__)
    }
    pub unsafe fn Source(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.Source)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn Navigate<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.Navigate)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigateToString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        htmlcontent: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .NavigateToString)(
            ::core::mem::transmute_copy(self),
            htmlcontent.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .NavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveNavigationStarting)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContentLoadingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .ContentLoading)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveContentLoading)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn SourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2SourceChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SourceChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveSourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveSourceChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn HistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2HistoryChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .HistoryChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveHistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveHistoryChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn NavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .NavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveNavigationCompleted)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn FrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .FrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveFrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .FrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveFrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ScriptDialogOpeningEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .ScriptDialogOpening)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveScriptDialogOpening)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn PermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2PermissionRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .PermissionRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemovePermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemovePermissionRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ProcessFailedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .ProcessFailed)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveProcessFailed)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn AddScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler,
        >,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .AddScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        id: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            id.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ExecuteScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2ExecuteScriptCompletedHandler>,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .ExecuteScript)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CapturePreview<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CapturePreviewCompletedHandler>,
    >(
        &self,
        imageformat: COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT,
        imagestream: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .CapturePreview)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(imageformat),
            imagestream.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Reload(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.Reload)(::core::mem::transmute_copy(
            self,
        ))
        .ok()
    }
    pub unsafe fn PostWebMessageAsJson<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasjson: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .PostWebMessageAsJson)(
            ::core::mem::transmute_copy(self),
            webmessageasjson.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn PostWebMessageAsString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasstring: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .PostWebMessageAsString)(
            ::core::mem::transmute_copy(self),
            webmessageasstring.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebMessageReceivedEventHandler>,
    >(
        &self,
        handler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .WebMessageReceived)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveWebMessageReceived)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CallDevToolsProtocolMethod<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>,
    >(
        &self,
        methodname: Param0,
        parametersasjson: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .CallDevToolsProtocolMethod)(
            ::core::mem::transmute_copy(self),
            methodname.into_param().abi(),
            parametersasjson.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn BrowserProcessId(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .BrowserProcessId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn CanGoBack(
        &self,
        cangoback: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.CanGoBack)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoback),
        )
        .ok()
    }
    pub unsafe fn CanGoForward(
        &self,
        cangoforward: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .CanGoForward)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoforward),
        )
        .ok()
    }
    pub unsafe fn GoBack(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.GoBack)(::core::mem::transmute_copy(
            self,
        ))
        .ok()
    }
    pub unsafe fn GoForward(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.GoForward)(::core::mem::transmute_copy(
            self,
        ))
        .ok()
    }
    pub unsafe fn GetDevToolsProtocolEventReceiver<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        eventname: Param0,
    ) -> ::windows::core::Result<ICoreWebView2DevToolsProtocolEventReceiver> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .GetDevToolsProtocolEventReceiver)(
            ::core::mem::transmute_copy(self),
            eventname.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2DevToolsProtocolEventReceiver>(result__)
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.Stop)(::core::mem::transmute_copy(self))
            .ok()
    }
    pub unsafe fn NewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewWindowRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .NewWindowRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveNewWindowRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn DocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DocumentTitleChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .DocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveDocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DocumentTitle(
        &self,
        title: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .DocumentTitle)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(title),
        )
        .ok()
    }
    pub unsafe fn AddHostObjectToScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        object: *mut super::super::super::super::Windows::Win32::System::Com::VARIANT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .AddHostObjectToScript)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(object),
        )
        .ok()
    }
    pub unsafe fn RemoveHostObjectFromScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveHostObjectFromScript)(
            ::core::mem::transmute_copy(self), name.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn OpenDevToolsWindow(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .OpenDevToolsWindow)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn ContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContainsFullScreenElementChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .ContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ContainsFullScreenElement(
        &self,
        containsfullscreenelement : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .ContainsFullScreenElement)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(containsfullscreenelement),
        )
        .ok()
    }
    pub unsafe fn WebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .WebResourceRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveWebResourceRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .AddWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn WindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WindowCloseRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .WindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveWindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceResponseReceivedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .WebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveWebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigateWithWebResourceRequest<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequest>,
    >(
        &self,
        request: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .NavigateWithWebResourceRequest)(
            ::core::mem::transmute_copy(self),
            request.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DOMContentLoadedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .DOMContentLoaded)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveDOMContentLoaded)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CookieManager(&self) -> ::windows::core::Result<ICoreWebView2CookieManager> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).base.CookieManager)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2CookieManager>(result__)
    }
    pub unsafe fn Environment(&self) -> ::windows::core::Result<ICoreWebView2Environment> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self).base.Environment)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Environment>(result__)
    }
    pub unsafe fn TrySuspend<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2TrySuspendCompletedHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).TrySuspend)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).Resume)(::core::mem::transmute_copy(self)).ok()
    }
    pub unsafe fn IsSuspended(
        &self,
        issuspended: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsSuspended)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(issuspended),
        )
        .ok()
    }
    pub unsafe fn SetVirtualHostNameToFolderMapping<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        hostname: Param0,
        folderpath: Param1,
        accesskind: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetVirtualHostNameToFolderMapping)(
            ::core::mem::transmute_copy(self),
            hostname.into_param().abi(),
            folderpath.into_param().abi(),
            ::core::mem::transmute(accesskind),
        )
        .ok()
    }
    pub unsafe fn ClearVirtualHostNameToFolderMapping<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        hostname: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ClearVirtualHostNameToFolderMapping)(
            ::core::mem::transmute_copy(self),
            hostname.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2_3> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2_3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_3> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2_3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2_3 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2_3 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_3> for ICoreWebView2 {
    fn from(value: ICoreWebView2_3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_3> for ICoreWebView2 {
    fn from(value: &ICoreWebView2_3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for ICoreWebView2_3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for &ICoreWebView2_3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_3> for ICoreWebView2_2 {
    fn from(value: ICoreWebView2_3) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_3> for ICoreWebView2_2 {
    fn from(value: &ICoreWebView2_3) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_2> for ICoreWebView2_3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_2> for &ICoreWebView2_3 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2_3 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2_3 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2_3 {}
impl ::core::fmt::Debug for ICoreWebView2_3 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2_3").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2_3 {
    type Vtable = ICoreWebView2_3_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xa0d6df20_3b92_416d_aa0c_437a9c727857);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_3_Vtbl {
    pub base: ICoreWebView2_2_Vtbl,
    pub TrySuspend: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        handler: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
    pub Resume:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
    pub IsSuspended: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        issuspended: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::HRESULT,
    pub SetVirtualHostNameToFolderMapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        hostname: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        folderpath: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        accesskind: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND,
    )
        -> ::windows::core::HRESULT,
    pub ClearVirtualHostNameToFolderMapping: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        hostname: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    )
        -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2_4(::windows::core::IUnknown);
impl ICoreWebView2_4 {
    pub unsafe fn Settings(&self) -> ::windows::core::Result<ICoreWebView2Settings> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .Settings)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Settings>(result__)
    }
    pub unsafe fn Source(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .Source)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn Navigate<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .Navigate)(::core::mem::transmute_copy(self), uri.into_param().abi())
        .ok()
    }
    pub unsafe fn NavigateToString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        htmlcontent: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .NavigateToString)(
            ::core::mem::transmute_copy(self),
            htmlcontent.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .NavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveNavigationStarting)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContentLoadingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .ContentLoading)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveContentLoading)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn SourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2SourceChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .SourceChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveSourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveSourceChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn HistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2HistoryChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .HistoryChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveHistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveHistoryChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn NavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .NavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveNavigationCompleted)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn FrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .FrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveFrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .FrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveFrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ScriptDialogOpeningEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .ScriptDialogOpening)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveScriptDialogOpening)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn PermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2PermissionRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .PermissionRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemovePermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemovePermissionRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ProcessFailedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .ProcessFailed)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveProcessFailed)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn AddScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler,
        >,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .AddScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        id: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            id.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ExecuteScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2ExecuteScriptCompletedHandler>,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .ExecuteScript)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CapturePreview<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CapturePreviewCompletedHandler>,
    >(
        &self,
        imageformat: COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT,
        imagestream: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .CapturePreview)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(imageformat),
            imagestream.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Reload(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .Reload)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn PostWebMessageAsJson<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasjson: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .PostWebMessageAsJson)(
            ::core::mem::transmute_copy(self),
            webmessageasjson.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn PostWebMessageAsString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasstring: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .PostWebMessageAsString)(
            ::core::mem::transmute_copy(self),
            webmessageasstring.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebMessageReceivedEventHandler>,
    >(
        &self,
        handler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .WebMessageReceived)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveWebMessageReceived)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CallDevToolsProtocolMethod<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>,
    >(
        &self,
        methodname: Param0,
        parametersasjson: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .CallDevToolsProtocolMethod)(
            ::core::mem::transmute_copy(self),
            methodname.into_param().abi(),
            parametersasjson.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn BrowserProcessId(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .BrowserProcessId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn CanGoBack(
        &self,
        cangoback: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .CanGoBack)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoback),
        )
        .ok()
    }
    pub unsafe fn CanGoForward(
        &self,
        cangoforward: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .CanGoForward)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoforward),
        )
        .ok()
    }
    pub unsafe fn GoBack(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .GoBack)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn GoForward(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .GoForward)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn GetDevToolsProtocolEventReceiver<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        eventname: Param0,
    ) -> ::windows::core::Result<ICoreWebView2DevToolsProtocolEventReceiver> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .GetDevToolsProtocolEventReceiver)(
            ::core::mem::transmute_copy(self),
            eventname.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2DevToolsProtocolEventReceiver>(result__)
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.base.Stop)(::core::mem::transmute_copy(
            self,
        ))
        .ok()
    }
    pub unsafe fn NewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewWindowRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .NewWindowRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveNewWindowRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn DocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DocumentTitleChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .DocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveDocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DocumentTitle(
        &self,
        title: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .DocumentTitle)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(title),
        )
        .ok()
    }
    pub unsafe fn AddHostObjectToScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        object: *mut super::super::super::super::Windows::Win32::System::Com::VARIANT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .AddHostObjectToScript)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(object),
        )
        .ok()
    }
    pub unsafe fn RemoveHostObjectFromScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveHostObjectFromScript)(
            ::core::mem::transmute_copy(self), name.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn OpenDevToolsWindow(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .OpenDevToolsWindow)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn ContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContainsFullScreenElementChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .ContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ContainsFullScreenElement(
        &self,
        containsfullscreenelement : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .ContainsFullScreenElement)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(containsfullscreenelement),
        )
        .ok()
    }
    pub unsafe fn WebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .WebResourceRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveWebResourceRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .AddWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn WindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WindowCloseRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .WindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveWindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceResponseReceivedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .WebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveWebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigateWithWebResourceRequest<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequest>,
    >(
        &self,
        request: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .NavigateWithWebResourceRequest)(
            ::core::mem::transmute_copy(self),
            request.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DOMContentLoadedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .DOMContentLoaded)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveDOMContentLoaded)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CookieManager(&self) -> ::windows::core::Result<ICoreWebView2CookieManager> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .CookieManager)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2CookieManager>(result__)
    }
    pub unsafe fn Environment(&self) -> ::windows::core::Result<ICoreWebView2Environment> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .Environment)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Environment>(result__)
    }
    pub unsafe fn TrySuspend<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2TrySuspendCompletedHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.TrySuspend)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.Resume)(::core::mem::transmute_copy(self))
            .ok()
    }
    pub unsafe fn IsSuspended(
        &self,
        issuspended: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.IsSuspended)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(issuspended),
        )
        .ok()
    }
    pub unsafe fn SetVirtualHostNameToFolderMapping<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        hostname: Param0,
        folderpath: Param1,
        accesskind: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .SetVirtualHostNameToFolderMapping)(
            ::core::mem::transmute_copy(self),
            hostname.into_param().abi(),
            folderpath.into_param().abi(),
            ::core::mem::transmute(accesskind),
        )
        .ok()
    }
    pub unsafe fn ClearVirtualHostNameToFolderMapping<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        hostname: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .ClearVirtualHostNameToFolderMapping)(
            ::core::mem::transmute_copy(self),
            hostname.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameCreated<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2FrameCreatedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).FrameCreated)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveFrameCreated)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DownloadStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DownloadStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DownloadStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDownloadStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveDownloadStarting)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2_4> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2_4) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_4> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2_4) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2_4 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2_4 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_4> for ICoreWebView2 {
    fn from(value: ICoreWebView2_4) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_4> for ICoreWebView2 {
    fn from(value: &ICoreWebView2_4) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for ICoreWebView2_4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for &ICoreWebView2_4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_4> for ICoreWebView2_2 {
    fn from(value: ICoreWebView2_4) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_4> for ICoreWebView2_2 {
    fn from(value: &ICoreWebView2_4) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_2> for ICoreWebView2_4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_2> for &ICoreWebView2_4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_4> for ICoreWebView2_3 {
    fn from(value: ICoreWebView2_4) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_4> for ICoreWebView2_3 {
    fn from(value: &ICoreWebView2_4) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_3> for ICoreWebView2_4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_3> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_3> for &ICoreWebView2_4 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_3> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2_4 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2_4 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2_4 {}
impl ::core::fmt::Debug for ICoreWebView2_4 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2_4").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2_4 {
    type Vtable = ICoreWebView2_4_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x20d02d59_6df2_42dc_bd06_f98a694b1302);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_4_Vtbl where { pub base : ICoreWebView2_3_Vtbl , pub FrameCreated : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveFrameCreated : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub DownloadStarting : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveDownloadStarting : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2_5(::windows::core::IUnknown);
impl ICoreWebView2_5 {
    pub unsafe fn Settings(&self) -> ::windows::core::Result<ICoreWebView2Settings> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .Settings)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Settings>(result__)
    }
    pub unsafe fn Source(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .Source)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn Navigate<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .Navigate)(::core::mem::transmute_copy(self), uri.into_param().abi())
        .ok()
    }
    pub unsafe fn NavigateToString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        htmlcontent: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .NavigateToString)(
            ::core::mem::transmute_copy(self),
            htmlcontent.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .NavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveNavigationStarting)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContentLoadingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .ContentLoading)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveContentLoading)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn SourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2SourceChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .SourceChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveSourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveSourceChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn HistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2HistoryChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .HistoryChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveHistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveHistoryChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn NavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .NavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveNavigationCompleted)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn FrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .FrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveFrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .FrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveFrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ScriptDialogOpeningEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .ScriptDialogOpening)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveScriptDialogOpening)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn PermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2PermissionRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .PermissionRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemovePermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemovePermissionRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ProcessFailedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .ProcessFailed)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveProcessFailed)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn AddScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler,
        >,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .AddScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        id: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            id.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ExecuteScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2ExecuteScriptCompletedHandler>,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .ExecuteScript)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CapturePreview<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CapturePreviewCompletedHandler>,
    >(
        &self,
        imageformat: COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT,
        imagestream: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .CapturePreview)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(imageformat),
            imagestream.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Reload(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .Reload)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn PostWebMessageAsJson<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasjson: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .PostWebMessageAsJson)(
            ::core::mem::transmute_copy(self),
            webmessageasjson.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn PostWebMessageAsString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasstring: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .PostWebMessageAsString)(
            ::core::mem::transmute_copy(self),
            webmessageasstring.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebMessageReceivedEventHandler>,
    >(
        &self,
        handler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .WebMessageReceived)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveWebMessageReceived)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CallDevToolsProtocolMethod<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>,
    >(
        &self,
        methodname: Param0,
        parametersasjson: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .CallDevToolsProtocolMethod)(
            ::core::mem::transmute_copy(self),
            methodname.into_param().abi(),
            parametersasjson.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn BrowserProcessId(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .BrowserProcessId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn CanGoBack(
        &self,
        cangoback: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .CanGoBack)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoback),
        )
        .ok()
    }
    pub unsafe fn CanGoForward(
        &self,
        cangoforward: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .CanGoForward)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoforward),
        )
        .ok()
    }
    pub unsafe fn GoBack(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .GoBack)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn GoForward(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .GoForward)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn GetDevToolsProtocolEventReceiver<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        eventname: Param0,
    ) -> ::windows::core::Result<ICoreWebView2DevToolsProtocolEventReceiver> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .GetDevToolsProtocolEventReceiver)(
            ::core::mem::transmute_copy(self),
            eventname.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2DevToolsProtocolEventReceiver>(result__)
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .Stop)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn NewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewWindowRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .NewWindowRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveNewWindowRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn DocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DocumentTitleChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .DocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveDocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DocumentTitle(
        &self,
        title: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .DocumentTitle)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(title),
        )
        .ok()
    }
    pub unsafe fn AddHostObjectToScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        object: *mut super::super::super::super::Windows::Win32::System::Com::VARIANT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .AddHostObjectToScript)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(object),
        )
        .ok()
    }
    pub unsafe fn RemoveHostObjectFromScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveHostObjectFromScript)(
            ::core::mem::transmute_copy(self), name.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn OpenDevToolsWindow(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .OpenDevToolsWindow)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn ContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContainsFullScreenElementChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .ContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ContainsFullScreenElement(
        &self,
        containsfullscreenelement : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .ContainsFullScreenElement)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(containsfullscreenelement),
        )
        .ok()
    }
    pub unsafe fn WebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .WebResourceRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveWebResourceRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .AddWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn WindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WindowCloseRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .WindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveWindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceResponseReceivedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .WebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveWebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigateWithWebResourceRequest<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequest>,
    >(
        &self,
        request: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .NavigateWithWebResourceRequest)(
            ::core::mem::transmute_copy(self),
            request.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DOMContentLoadedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .DOMContentLoaded)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveDOMContentLoaded)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CookieManager(&self) -> ::windows::core::Result<ICoreWebView2CookieManager> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .CookieManager)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2CookieManager>(result__)
    }
    pub unsafe fn Environment(&self) -> ::windows::core::Result<ICoreWebView2Environment> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .Environment)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Environment>(result__)
    }
    pub unsafe fn TrySuspend<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2TrySuspendCompletedHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .TrySuspend)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.base.Resume)(::core::mem::transmute_copy(
            self,
        ))
        .ok()
    }
    pub unsafe fn IsSuspended(
        &self,
        issuspended: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .IsSuspended)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(issuspended),
        )
        .ok()
    }
    pub unsafe fn SetVirtualHostNameToFolderMapping<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        hostname: Param0,
        folderpath: Param1,
        accesskind: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .SetVirtualHostNameToFolderMapping)(
            ::core::mem::transmute_copy(self),
            hostname.into_param().abi(),
            folderpath.into_param().abi(),
            ::core::mem::transmute(accesskind),
        )
        .ok()
    }
    pub unsafe fn ClearVirtualHostNameToFolderMapping<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        hostname: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .ClearVirtualHostNameToFolderMapping)(
            ::core::mem::transmute_copy(self),
            hostname.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameCreated<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2FrameCreatedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.FrameCreated)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveFrameCreated)(::core::mem::transmute_copy(self), token.into_param().abi())
        .ok()
    }
    pub unsafe fn DownloadStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DownloadStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .DownloadStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDownloadStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveDownloadStarting)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ClientCertificateRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ClientCertificateRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).ClientCertificateRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveClientCertificateRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveClientCertificateRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2_5> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2_5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_5> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2_5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2_5 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2_5 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_5> for ICoreWebView2 {
    fn from(value: ICoreWebView2_5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_5> for ICoreWebView2 {
    fn from(value: &ICoreWebView2_5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for ICoreWebView2_5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for &ICoreWebView2_5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_5> for ICoreWebView2_2 {
    fn from(value: ICoreWebView2_5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_5> for ICoreWebView2_2 {
    fn from(value: &ICoreWebView2_5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_2> for ICoreWebView2_5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_2> for &ICoreWebView2_5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_5> for ICoreWebView2_3 {
    fn from(value: ICoreWebView2_5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_5> for ICoreWebView2_3 {
    fn from(value: &ICoreWebView2_5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_3> for ICoreWebView2_5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_3> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_3> for &ICoreWebView2_5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_3> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_5> for ICoreWebView2_4 {
    fn from(value: ICoreWebView2_5) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_5> for ICoreWebView2_4 {
    fn from(value: &ICoreWebView2_5) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_4> for ICoreWebView2_5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_4> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_4> for &ICoreWebView2_5 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_4> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2_5 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2_5 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2_5 {}
impl ::core::fmt::Debug for ICoreWebView2_5 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2_5").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2_5 {
    type Vtable = ICoreWebView2_5_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xbedb11b8_d63c_11eb_b8bc_0242ac130003);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_5_Vtbl where { pub base : ICoreWebView2_4_Vtbl , pub ClientCertificateRequested : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveClientCertificateRequested : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2_6(::windows::core::IUnknown);
impl ICoreWebView2_6 {
    pub unsafe fn Settings(&self) -> ::windows::core::Result<ICoreWebView2Settings> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .Settings)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Settings>(result__)
    }
    pub unsafe fn Source(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .Source)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn Navigate<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .Navigate)(::core::mem::transmute_copy(self), uri.into_param().abi())
        .ok()
    }
    pub unsafe fn NavigateToString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        htmlcontent: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .NavigateToString)(
            ::core::mem::transmute_copy(self),
            htmlcontent.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .NavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveNavigationStarting)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContentLoadingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .ContentLoading)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveContentLoading)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn SourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2SourceChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .SourceChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveSourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveSourceChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn HistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2HistoryChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .HistoryChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveHistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveHistoryChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn NavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .NavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveNavigationCompleted)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn FrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .FrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveFrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .FrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveFrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ScriptDialogOpeningEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .ScriptDialogOpening)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveScriptDialogOpening)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn PermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2PermissionRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .PermissionRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemovePermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemovePermissionRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ProcessFailedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .ProcessFailed)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveProcessFailed)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn AddScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler,
        >,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .AddScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        id: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            id.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ExecuteScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2ExecuteScriptCompletedHandler>,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .ExecuteScript)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CapturePreview<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CapturePreviewCompletedHandler>,
    >(
        &self,
        imageformat: COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT,
        imagestream: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .CapturePreview)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(imageformat),
            imagestream.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Reload(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .Reload)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn PostWebMessageAsJson<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasjson: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .PostWebMessageAsJson)(
            ::core::mem::transmute_copy(self),
            webmessageasjson.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn PostWebMessageAsString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasstring: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .PostWebMessageAsString)(
            ::core::mem::transmute_copy(self),
            webmessageasstring.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebMessageReceivedEventHandler>,
    >(
        &self,
        handler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .WebMessageReceived)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveWebMessageReceived)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CallDevToolsProtocolMethod<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>,
    >(
        &self,
        methodname: Param0,
        parametersasjson: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .CallDevToolsProtocolMethod)(
            ::core::mem::transmute_copy(self),
            methodname.into_param().abi(),
            parametersasjson.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn BrowserProcessId(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .BrowserProcessId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn CanGoBack(
        &self,
        cangoback: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .CanGoBack)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoback),
        )
        .ok()
    }
    pub unsafe fn CanGoForward(
        &self,
        cangoforward: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .CanGoForward)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoforward),
        )
        .ok()
    }
    pub unsafe fn GoBack(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .GoBack)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn GoForward(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .GoForward)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn GetDevToolsProtocolEventReceiver<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        eventname: Param0,
    ) -> ::windows::core::Result<ICoreWebView2DevToolsProtocolEventReceiver> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .GetDevToolsProtocolEventReceiver)(
            ::core::mem::transmute_copy(self),
            eventname.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2DevToolsProtocolEventReceiver>(result__)
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .Stop)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn NewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewWindowRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .NewWindowRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveNewWindowRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn DocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DocumentTitleChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .DocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveDocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DocumentTitle(
        &self,
        title: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .DocumentTitle)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(title),
        )
        .ok()
    }
    pub unsafe fn AddHostObjectToScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        object: *mut super::super::super::super::Windows::Win32::System::Com::VARIANT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .AddHostObjectToScript)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(object),
        )
        .ok()
    }
    pub unsafe fn RemoveHostObjectFromScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveHostObjectFromScript)(
            ::core::mem::transmute_copy(self), name.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn OpenDevToolsWindow(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .OpenDevToolsWindow)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn ContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContainsFullScreenElementChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .ContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ContainsFullScreenElement(
        &self,
        containsfullscreenelement : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .ContainsFullScreenElement)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(containsfullscreenelement),
        )
        .ok()
    }
    pub unsafe fn WebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .WebResourceRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveWebResourceRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .AddWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn WindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WindowCloseRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .WindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveWindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceResponseReceivedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .WebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveWebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigateWithWebResourceRequest<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequest>,
    >(
        &self,
        request: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .NavigateWithWebResourceRequest)(
            ::core::mem::transmute_copy(self),
            request.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DOMContentLoadedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .DOMContentLoaded)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveDOMContentLoaded)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CookieManager(&self) -> ::windows::core::Result<ICoreWebView2CookieManager> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .CookieManager)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2CookieManager>(result__)
    }
    pub unsafe fn Environment(&self) -> ::windows::core::Result<ICoreWebView2Environment> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .Environment)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Environment>(result__)
    }
    pub unsafe fn TrySuspend<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2TrySuspendCompletedHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .TrySuspend)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .Resume)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn IsSuspended(
        &self,
        issuspended: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .IsSuspended)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(issuspended),
        )
        .ok()
    }
    pub unsafe fn SetVirtualHostNameToFolderMapping<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        hostname: Param0,
        folderpath: Param1,
        accesskind: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .SetVirtualHostNameToFolderMapping)(
            ::core::mem::transmute_copy(self),
            hostname.into_param().abi(),
            folderpath.into_param().abi(),
            ::core::mem::transmute(accesskind),
        )
        .ok()
    }
    pub unsafe fn ClearVirtualHostNameToFolderMapping<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        hostname: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .ClearVirtualHostNameToFolderMapping)(
            ::core::mem::transmute_copy(self),
            hostname.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameCreated<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2FrameCreatedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .FrameCreated)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveFrameCreated)(::core::mem::transmute_copy(self), token.into_param().abi())
        .ok()
    }
    pub unsafe fn DownloadStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DownloadStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .DownloadStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDownloadStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveDownloadStarting)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ClientCertificateRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ClientCertificateRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .ClientCertificateRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveClientCertificateRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveClientCertificateRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn OpenTaskManagerWindow(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).OpenTaskManagerWindow)(
            ::core::mem::transmute_copy(self),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2_6> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2_6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_6> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2_6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2_6 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2_6 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_6> for ICoreWebView2 {
    fn from(value: ICoreWebView2_6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_6> for ICoreWebView2 {
    fn from(value: &ICoreWebView2_6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for ICoreWebView2_6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for &ICoreWebView2_6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_6> for ICoreWebView2_2 {
    fn from(value: ICoreWebView2_6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_6> for ICoreWebView2_2 {
    fn from(value: &ICoreWebView2_6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_2> for ICoreWebView2_6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_2> for &ICoreWebView2_6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_6> for ICoreWebView2_3 {
    fn from(value: ICoreWebView2_6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_6> for ICoreWebView2_3 {
    fn from(value: &ICoreWebView2_6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_3> for ICoreWebView2_6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_3> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_3> for &ICoreWebView2_6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_3> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_6> for ICoreWebView2_4 {
    fn from(value: ICoreWebView2_6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_6> for ICoreWebView2_4 {
    fn from(value: &ICoreWebView2_6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_4> for ICoreWebView2_6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_4> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_4> for &ICoreWebView2_6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_4> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_6> for ICoreWebView2_5 {
    fn from(value: ICoreWebView2_6) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_6> for ICoreWebView2_5 {
    fn from(value: &ICoreWebView2_6) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_5> for ICoreWebView2_6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_5> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_5> for &ICoreWebView2_6 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_5> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2_6 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2_6 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2_6 {}
impl ::core::fmt::Debug for ICoreWebView2_6 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2_6").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2_6 {
    type Vtable = ICoreWebView2_6_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x499aadac_d92c_4589_8a75_111bfc167795);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_6_Vtbl {
    pub base: ICoreWebView2_5_Vtbl,
    pub OpenTaskManagerWindow:
        unsafe extern "system" fn(this: *mut ::core::ffi::c_void) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2_7(::windows::core::IUnknown);
impl ICoreWebView2_7 {
    pub unsafe fn Settings(&self) -> ::windows::core::Result<ICoreWebView2Settings> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .Settings)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Settings>(result__)
    }
    pub unsafe fn Source(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .Source)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn Navigate<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .Navigate)(::core::mem::transmute_copy(self), uri.into_param().abi())
        .ok()
    }
    pub unsafe fn NavigateToString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        htmlcontent: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .NavigateToString)(
            ::core::mem::transmute_copy(self),
            htmlcontent.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .NavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveNavigationStarting)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContentLoadingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .ContentLoading)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveContentLoading)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn SourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2SourceChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .SourceChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveSourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveSourceChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn HistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2HistoryChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .HistoryChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveHistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveHistoryChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn NavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .NavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveNavigationCompleted)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn FrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .FrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveFrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .FrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveFrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ScriptDialogOpeningEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .ScriptDialogOpening)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveScriptDialogOpening)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn PermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2PermissionRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .PermissionRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemovePermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemovePermissionRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ProcessFailedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .ProcessFailed)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveProcessFailed)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn AddScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler,
        >,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .AddScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        id: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            id.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ExecuteScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2ExecuteScriptCompletedHandler>,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .ExecuteScript)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CapturePreview<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CapturePreviewCompletedHandler>,
    >(
        &self,
        imageformat: COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT,
        imagestream: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .CapturePreview)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(imageformat),
            imagestream.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Reload(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .Reload)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn PostWebMessageAsJson<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasjson: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .PostWebMessageAsJson)(
            ::core::mem::transmute_copy(self),
            webmessageasjson.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn PostWebMessageAsString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasstring: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .PostWebMessageAsString)(
            ::core::mem::transmute_copy(self),
            webmessageasstring.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebMessageReceivedEventHandler>,
    >(
        &self,
        handler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .WebMessageReceived)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveWebMessageReceived)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CallDevToolsProtocolMethod<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>,
    >(
        &self,
        methodname: Param0,
        parametersasjson: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .CallDevToolsProtocolMethod)(
            ::core::mem::transmute_copy(self),
            methodname.into_param().abi(),
            parametersasjson.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn BrowserProcessId(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .BrowserProcessId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn CanGoBack(
        &self,
        cangoback: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .CanGoBack)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoback),
        )
        .ok()
    }
    pub unsafe fn CanGoForward(
        &self,
        cangoforward: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .CanGoForward)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoforward),
        )
        .ok()
    }
    pub unsafe fn GoBack(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .GoBack)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn GoForward(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .GoForward)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn GetDevToolsProtocolEventReceiver<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        eventname: Param0,
    ) -> ::windows::core::Result<ICoreWebView2DevToolsProtocolEventReceiver> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .GetDevToolsProtocolEventReceiver)(
            ::core::mem::transmute_copy(self),
            eventname.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2DevToolsProtocolEventReceiver>(result__)
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .Stop)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn NewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewWindowRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .NewWindowRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveNewWindowRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn DocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DocumentTitleChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .DocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveDocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DocumentTitle(
        &self,
        title: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .DocumentTitle)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(title),
        )
        .ok()
    }
    pub unsafe fn AddHostObjectToScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        object: *mut super::super::super::super::Windows::Win32::System::Com::VARIANT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .AddHostObjectToScript)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(object),
        )
        .ok()
    }
    pub unsafe fn RemoveHostObjectFromScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveHostObjectFromScript)(
            ::core::mem::transmute_copy(self), name.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn OpenDevToolsWindow(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .OpenDevToolsWindow)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn ContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContainsFullScreenElementChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .ContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ContainsFullScreenElement(
        &self,
        containsfullscreenelement : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .ContainsFullScreenElement)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(containsfullscreenelement),
        )
        .ok()
    }
    pub unsafe fn WebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .WebResourceRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveWebResourceRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .AddWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn WindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WindowCloseRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .WindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveWindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceResponseReceivedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .WebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveWebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigateWithWebResourceRequest<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequest>,
    >(
        &self,
        request: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .NavigateWithWebResourceRequest)(
            ::core::mem::transmute_copy(self),
            request.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DOMContentLoadedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .DOMContentLoaded)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveDOMContentLoaded)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CookieManager(&self) -> ::windows::core::Result<ICoreWebView2CookieManager> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .CookieManager)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2CookieManager>(result__)
    }
    pub unsafe fn Environment(&self) -> ::windows::core::Result<ICoreWebView2Environment> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .Environment)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Environment>(result__)
    }
    pub unsafe fn TrySuspend<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2TrySuspendCompletedHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .TrySuspend)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .Resume)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn IsSuspended(
        &self,
        issuspended: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .IsSuspended)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(issuspended),
        )
        .ok()
    }
    pub unsafe fn SetVirtualHostNameToFolderMapping<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        hostname: Param0,
        folderpath: Param1,
        accesskind: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .SetVirtualHostNameToFolderMapping)(
            ::core::mem::transmute_copy(self),
            hostname.into_param().abi(),
            folderpath.into_param().abi(),
            ::core::mem::transmute(accesskind),
        )
        .ok()
    }
    pub unsafe fn ClearVirtualHostNameToFolderMapping<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        hostname: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .ClearVirtualHostNameToFolderMapping)(
            ::core::mem::transmute_copy(self),
            hostname.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameCreated<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2FrameCreatedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .FrameCreated)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveFrameCreated)(::core::mem::transmute_copy(self), token.into_param().abi())
        .ok()
    }
    pub unsafe fn DownloadStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DownloadStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .DownloadStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDownloadStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveDownloadStarting)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ClientCertificateRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ClientCertificateRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .ClientCertificateRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveClientCertificateRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .RemoveClientCertificateRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn OpenTaskManagerWindow(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .OpenTaskManagerWindow)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn PrintToPdf<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2PrintSettings>,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2PrintToPdfCompletedHandler>,
    >(
        &self,
        resultfilepath: Param0,
        printsettings: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).PrintToPdf)(
            ::core::mem::transmute_copy(self),
            resultfilepath.into_param().abi(),
            printsettings.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2_7> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2_7) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_7> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2_7) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2_7 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2_7 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_7> for ICoreWebView2 {
    fn from(value: ICoreWebView2_7) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_7> for ICoreWebView2 {
    fn from(value: &ICoreWebView2_7) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for ICoreWebView2_7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for &ICoreWebView2_7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_7> for ICoreWebView2_2 {
    fn from(value: ICoreWebView2_7) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_7> for ICoreWebView2_2 {
    fn from(value: &ICoreWebView2_7) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_2> for ICoreWebView2_7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_2> for &ICoreWebView2_7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_7> for ICoreWebView2_3 {
    fn from(value: ICoreWebView2_7) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_7> for ICoreWebView2_3 {
    fn from(value: &ICoreWebView2_7) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_3> for ICoreWebView2_7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_3> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_3> for &ICoreWebView2_7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_3> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_7> for ICoreWebView2_4 {
    fn from(value: ICoreWebView2_7) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_7> for ICoreWebView2_4 {
    fn from(value: &ICoreWebView2_7) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_4> for ICoreWebView2_7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_4> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_4> for &ICoreWebView2_7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_4> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_7> for ICoreWebView2_5 {
    fn from(value: ICoreWebView2_7) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_7> for ICoreWebView2_5 {
    fn from(value: &ICoreWebView2_7) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_5> for ICoreWebView2_7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_5> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_5> for &ICoreWebView2_7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_5> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_7> for ICoreWebView2_6 {
    fn from(value: ICoreWebView2_7) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_7> for ICoreWebView2_6 {
    fn from(value: &ICoreWebView2_7) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_6> for ICoreWebView2_7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_6> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_6> for &ICoreWebView2_7 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_6> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2_7 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2_7 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2_7 {}
impl ::core::fmt::Debug for ICoreWebView2_7 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2_7").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2_7 {
    type Vtable = ICoreWebView2_7_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x79c24d83_09a3_45ae_9418_487f32a58740);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_7_Vtbl {
    pub base: ICoreWebView2_6_Vtbl,
    pub PrintToPdf: unsafe extern "system" fn(
        this: *mut ::core::ffi::c_void,
        resultfilepath: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        printsettings: ::windows::core::RawPtr,
        handler: ::windows::core::RawPtr,
    ) -> ::windows::core::HRESULT,
}
#[repr(transparent)]
pub struct ICoreWebView2_8(::windows::core::IUnknown);
impl ICoreWebView2_8 {
    pub unsafe fn Settings(&self) -> ::windows::core::Result<ICoreWebView2Settings> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .Settings)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Settings>(result__)
    }
    pub unsafe fn Source(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .Source)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn Navigate<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .Navigate)(::core::mem::transmute_copy(self), uri.into_param().abi())
        .ok()
    }
    pub unsafe fn NavigateToString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        htmlcontent: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .NavigateToString)(
            ::core::mem::transmute_copy(self),
            htmlcontent.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .NavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveNavigationStarting)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContentLoadingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .ContentLoading)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveContentLoading)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn SourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2SourceChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .SourceChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveSourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveSourceChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn HistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2HistoryChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .HistoryChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveHistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveHistoryChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn NavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .NavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveNavigationCompleted)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn FrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .FrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveFrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .FrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveFrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ScriptDialogOpeningEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .ScriptDialogOpening)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveScriptDialogOpening)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn PermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2PermissionRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .PermissionRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemovePermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemovePermissionRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ProcessFailedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .ProcessFailed)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveProcessFailed)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn AddScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler,
        >,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .AddScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        id: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            id.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ExecuteScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2ExecuteScriptCompletedHandler>,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .ExecuteScript)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CapturePreview<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CapturePreviewCompletedHandler>,
    >(
        &self,
        imageformat: COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT,
        imagestream: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .CapturePreview)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(imageformat),
            imagestream.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Reload(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .Reload)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn PostWebMessageAsJson<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasjson: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .PostWebMessageAsJson)(
            ::core::mem::transmute_copy(self),
            webmessageasjson.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn PostWebMessageAsString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasstring: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .PostWebMessageAsString)(
            ::core::mem::transmute_copy(self),
            webmessageasstring.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebMessageReceivedEventHandler>,
    >(
        &self,
        handler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .WebMessageReceived)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveWebMessageReceived)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CallDevToolsProtocolMethod<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>,
    >(
        &self,
        methodname: Param0,
        parametersasjson: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .CallDevToolsProtocolMethod)(
            ::core::mem::transmute_copy(self),
            methodname.into_param().abi(),
            parametersasjson.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn BrowserProcessId(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .BrowserProcessId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn CanGoBack(
        &self,
        cangoback: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .CanGoBack)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoback),
        )
        .ok()
    }
    pub unsafe fn CanGoForward(
        &self,
        cangoforward: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .CanGoForward)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoforward),
        )
        .ok()
    }
    pub unsafe fn GoBack(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .GoBack)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn GoForward(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .GoForward)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn GetDevToolsProtocolEventReceiver<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        eventname: Param0,
    ) -> ::windows::core::Result<ICoreWebView2DevToolsProtocolEventReceiver> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .GetDevToolsProtocolEventReceiver)(
            ::core::mem::transmute_copy(self),
            eventname.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2DevToolsProtocolEventReceiver>(result__)
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .Stop)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn NewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewWindowRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .NewWindowRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveNewWindowRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn DocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DocumentTitleChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .DocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveDocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DocumentTitle(
        &self,
        title: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .DocumentTitle)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(title),
        )
        .ok()
    }
    pub unsafe fn AddHostObjectToScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        object: *mut super::super::super::super::Windows::Win32::System::Com::VARIANT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .AddHostObjectToScript)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(object),
        )
        .ok()
    }
    pub unsafe fn RemoveHostObjectFromScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveHostObjectFromScript)(
            ::core::mem::transmute_copy(self), name.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn OpenDevToolsWindow(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .OpenDevToolsWindow)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn ContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContainsFullScreenElementChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .ContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ContainsFullScreenElement(
        &self,
        containsfullscreenelement : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .ContainsFullScreenElement)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(containsfullscreenelement),
        )
        .ok()
    }
    pub unsafe fn WebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .WebResourceRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveWebResourceRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .AddWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn WindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WindowCloseRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .WindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveWindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceResponseReceivedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .WebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveWebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigateWithWebResourceRequest<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequest>,
    >(
        &self,
        request: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .NavigateWithWebResourceRequest)(
            ::core::mem::transmute_copy(self),
            request.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DOMContentLoadedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .DOMContentLoaded)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveDOMContentLoaded)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CookieManager(&self) -> ::windows::core::Result<ICoreWebView2CookieManager> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .CookieManager)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2CookieManager>(result__)
    }
    pub unsafe fn Environment(&self) -> ::windows::core::Result<ICoreWebView2Environment> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .Environment)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Environment>(result__)
    }
    pub unsafe fn TrySuspend<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2TrySuspendCompletedHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .TrySuspend)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .Resume)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn IsSuspended(
        &self,
        issuspended: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .IsSuspended)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(issuspended),
        )
        .ok()
    }
    pub unsafe fn SetVirtualHostNameToFolderMapping<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        hostname: Param0,
        folderpath: Param1,
        accesskind: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .SetVirtualHostNameToFolderMapping)(
            ::core::mem::transmute_copy(self),
            hostname.into_param().abi(),
            folderpath.into_param().abi(),
            ::core::mem::transmute(accesskind),
        )
        .ok()
    }
    pub unsafe fn ClearVirtualHostNameToFolderMapping<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        hostname: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .ClearVirtualHostNameToFolderMapping)(
            ::core::mem::transmute_copy(self),
            hostname.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameCreated<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2FrameCreatedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .FrameCreated)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveFrameCreated)(::core::mem::transmute_copy(self), token.into_param().abi())
        .ok()
    }
    pub unsafe fn DownloadStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DownloadStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .DownloadStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDownloadStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveDownloadStarting)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ClientCertificateRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ClientCertificateRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .ClientCertificateRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveClientCertificateRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .RemoveClientCertificateRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn OpenTaskManagerWindow(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .OpenTaskManagerWindow)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn PrintToPdf<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2PrintSettings>,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2PrintToPdfCompletedHandler>,
    >(
        &self,
        resultfilepath: Param0,
        printsettings: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.PrintToPdf)(
            ::core::mem::transmute_copy(self),
            resultfilepath.into_param().abi(),
            printsettings.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsMutedChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2IsMutedChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsMutedChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveIsMutedChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveIsMutedChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsMuted(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsMuted)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetIsMuted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetIsMuted)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsDocumentPlayingAudioChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2IsDocumentPlayingAudioChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsDocumentPlayingAudioChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveIsDocumentPlayingAudioChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveIsDocumentPlayingAudioChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsDocumentPlayingAudio(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsDocumentPlayingAudio)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2_8> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2_8) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_8> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2_8) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_8> for ICoreWebView2 {
    fn from(value: ICoreWebView2_8) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_8> for ICoreWebView2 {
    fn from(value: &ICoreWebView2_8) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for &ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_8> for ICoreWebView2_2 {
    fn from(value: ICoreWebView2_8) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_8> for ICoreWebView2_2 {
    fn from(value: &ICoreWebView2_8) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_2> for ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_2> for &ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_8> for ICoreWebView2_3 {
    fn from(value: ICoreWebView2_8) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_8> for ICoreWebView2_3 {
    fn from(value: &ICoreWebView2_8) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_3> for ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_3> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_3> for &ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_3> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_8> for ICoreWebView2_4 {
    fn from(value: ICoreWebView2_8) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_8> for ICoreWebView2_4 {
    fn from(value: &ICoreWebView2_8) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_4> for ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_4> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_4> for &ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_4> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_8> for ICoreWebView2_5 {
    fn from(value: ICoreWebView2_8) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_8> for ICoreWebView2_5 {
    fn from(value: &ICoreWebView2_8) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_5> for ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_5> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_5> for &ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_5> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_8> for ICoreWebView2_6 {
    fn from(value: ICoreWebView2_8) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_8> for ICoreWebView2_6 {
    fn from(value: &ICoreWebView2_8) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_6> for ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_6> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_6> for &ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_6> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_8> for ICoreWebView2_7 {
    fn from(value: ICoreWebView2_8) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_8> for ICoreWebView2_7 {
    fn from(value: &ICoreWebView2_8) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_7> for ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_7> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_7> for &ICoreWebView2_8 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_7> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2_8 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2_8 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2_8 {}
impl ::core::fmt::Debug for ICoreWebView2_8 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2_8").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2_8 {
    type Vtable = ICoreWebView2_8_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0xe9632730_6e1e_43ab_b7b8_7b2c9e62e094);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_8_Vtbl where { pub base : ICoreWebView2_7_Vtbl , pub IsMutedChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveIsMutedChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub IsMuted : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , value : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub SetIsMuted : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , value : super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub IsDocumentPlayingAudioChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , eventhandler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveIsDocumentPlayingAudioChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub IsDocumentPlayingAudio : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , value : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , }
#[repr(transparent)]
pub struct ICoreWebView2_9(::windows::core::IUnknown);
impl ICoreWebView2_9 {
    pub unsafe fn Settings(&self) -> ::windows::core::Result<ICoreWebView2Settings> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .Settings)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Settings>(result__)
    }
    pub unsafe fn Source(
        &self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .Source)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(uri),
        )
        .ok()
    }
    pub unsafe fn Navigate<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .Navigate)(::core::mem::transmute_copy(self), uri.into_param().abi())
        .ok()
    }
    pub unsafe fn NavigateToString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        htmlcontent: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .NavigateToString)(
            ::core::mem::transmute_copy(self),
            htmlcontent.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .NavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveNavigationStarting)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContentLoadingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .ContentLoading)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContentLoading<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveContentLoading)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn SourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2SourceChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .SourceChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveSourceChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveSourceChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn HistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2HistoryChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .HistoryChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveHistoryChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveHistoryChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn NavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .NavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveNavigationCompleted)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn FrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .FrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveFrameNavigationStarting)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NavigationCompletedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .FrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameNavigationCompleted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveFrameNavigationCompleted)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ScriptDialogOpeningEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .ScriptDialogOpening)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptDialogOpening<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveScriptDialogOpening)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn PermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2PermissionRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .PermissionRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemovePermissionRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemovePermissionRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ProcessFailedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .ProcessFailed)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveProcessFailed<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveProcessFailed)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn AddScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler,
        >,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .AddScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn RemoveScriptToExecuteOnDocumentCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        id: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveScriptToExecuteOnDocumentCreated)(
            ::core::mem::transmute_copy(self),
            id.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ExecuteScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2ExecuteScriptCompletedHandler>,
    >(
        &self,
        javascript: Param0,
        handler: Param1,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .ExecuteScript)(
            ::core::mem::transmute_copy(self),
            javascript.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn CapturePreview<
        'a,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CapturePreviewCompletedHandler>,
    >(
        &self,
        imageformat: COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT,
        imagestream: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .CapturePreview)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(imageformat),
            imagestream.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Reload(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .Reload)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn PostWebMessageAsJson<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasjson: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .PostWebMessageAsJson)(
            ::core::mem::transmute_copy(self),
            webmessageasjson.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn PostWebMessageAsString<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        webmessageasstring: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .PostWebMessageAsString)(
            ::core::mem::transmute_copy(self),
            webmessageasstring.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebMessageReceivedEventHandler>,
    >(
        &self,
        handler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .WebMessageReceived)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebMessageReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveWebMessageReceived)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CallDevToolsProtocolMethod<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>,
    >(
        &self,
        methodname: Param0,
        parametersasjson: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .CallDevToolsProtocolMethod)(
            ::core::mem::transmute_copy(self),
            methodname.into_param().abi(),
            parametersasjson.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn BrowserProcessId(&self, value: *mut u32) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .BrowserProcessId)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn CanGoBack(
        &self,
        cangoback: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .CanGoBack)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoback),
        )
        .ok()
    }
    pub unsafe fn CanGoForward(
        &self,
        cangoforward: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .CanGoForward)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(cangoforward),
        )
        .ok()
    }
    pub unsafe fn GoBack(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .GoBack)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn GoForward(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .GoForward)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn GetDevToolsProtocolEventReceiver<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        eventname: Param0,
    ) -> ::windows::core::Result<ICoreWebView2DevToolsProtocolEventReceiver> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .GetDevToolsProtocolEventReceiver)(
            ::core::mem::transmute_copy(self),
            eventname.into_param().abi(),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2DevToolsProtocolEventReceiver>(result__)
    }
    pub unsafe fn Stop(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .Stop)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn NewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2NewWindowRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .NewWindowRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveNewWindowRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveNewWindowRequested)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn DocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DocumentTitleChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .DocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDocumentTitleChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveDocumentTitleChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DocumentTitle(
        &self,
        title: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .DocumentTitle)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(title),
        )
        .ok()
    }
    pub unsafe fn AddHostObjectToScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
        object: *mut super::super::super::super::Windows::Win32::System::Com::VARIANT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .AddHostObjectToScript)(
            ::core::mem::transmute_copy(self),
            name.into_param().abi(),
            ::core::mem::transmute(object),
        )
        .ok()
    }
    pub unsafe fn RemoveHostObjectFromScript<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        name: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveHostObjectFromScript)(
            ::core::mem::transmute_copy(self), name.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn OpenDevToolsWindow(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .OpenDevToolsWindow)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn ContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ContainsFullScreenElementChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .ContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveContainsFullScreenElementChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveContainsFullScreenElementChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn ContainsFullScreenElement(
        &self,
        containsfullscreenelement : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .ContainsFullScreenElement)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(containsfullscreenelement),
        )
        .ok()
    }
    pub unsafe fn WebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .WebResourceRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveWebResourceRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn AddWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .AddWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceRequestedFilter<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        uri: Param0,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveWebResourceRequestedFilter)(
            ::core::mem::transmute_copy(self),
            uri.into_param().abi(),
            ::core::mem::transmute(resourcecontext),
        )
        .ok()
    }
    pub unsafe fn WindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WindowCloseRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .WindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWindowCloseRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveWindowCloseRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn WebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceResponseReceivedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .WebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveWebResourceResponseReceived<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveWebResourceResponseReceived)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn NavigateWithWebResourceRequest<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2WebResourceRequest>,
    >(
        &self,
        request: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .NavigateWithWebResourceRequest)(
            ::core::mem::transmute_copy(self),
            request.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn DOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DOMContentLoadedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .DOMContentLoaded)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDOMContentLoaded<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .RemoveDOMContentLoaded)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn CookieManager(&self) -> ::windows::core::Result<ICoreWebView2CookieManager> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .CookieManager)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2CookieManager>(result__)
    }
    pub unsafe fn Environment(&self) -> ::windows::core::Result<ICoreWebView2Environment> {
        let mut result__: ::windows::core::RawPtr = ::core::mem::zeroed();
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .base
            .Environment)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(&mut result__),
        )
        .from_abi::<ICoreWebView2Environment>(result__)
    }
    pub unsafe fn TrySuspend<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2TrySuspendCompletedHandler>,
    >(
        &self,
        handler: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .TrySuspend)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn Resume(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .Resume)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn IsSuspended(
        &self,
        issuspended: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .IsSuspended)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(issuspended),
        )
        .ok()
    }
    pub unsafe fn SetVirtualHostNameToFolderMapping<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        hostname: Param0,
        folderpath: Param1,
        accesskind: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .SetVirtualHostNameToFolderMapping)(
            ::core::mem::transmute_copy(self),
            hostname.into_param().abi(),
            folderpath.into_param().abi(),
            ::core::mem::transmute(accesskind),
        )
        .ok()
    }
    pub unsafe fn ClearVirtualHostNameToFolderMapping<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
    >(
        &self,
        hostname: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .base
            .ClearVirtualHostNameToFolderMapping)(
            ::core::mem::transmute_copy(self),
            hostname.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn FrameCreated<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2FrameCreatedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .FrameCreated)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveFrameCreated<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveFrameCreated)(::core::mem::transmute_copy(self), token.into_param().abi())
        .ok()
    }
    pub unsafe fn DownloadStarting<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2DownloadStartingEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .DownloadStarting)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveDownloadStarting<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .base
            .RemoveDownloadStarting)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn ClientCertificateRequested<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2ClientCertificateRequestedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .ClientCertificateRequested)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveClientCertificateRequested<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .base
            .RemoveClientCertificateRequested)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn OpenTaskManagerWindow(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .base
            .OpenTaskManagerWindow)(::core::mem::transmute_copy(self))
        .ok()
    }
    pub unsafe fn PrintToPdf<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::PWSTR,
        >,
        Param1: ::windows::core::IntoParam<'a, ICoreWebView2PrintSettings>,
        Param2: ::windows::core::IntoParam<'a, ICoreWebView2PrintToPdfCompletedHandler>,
    >(
        &self,
        resultfilepath: Param0,
        printsettings: Param1,
        handler: Param2,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .base
            .PrintToPdf)(
            ::core::mem::transmute_copy(self),
            resultfilepath.into_param().abi(),
            printsettings.into_param().abi(),
            handler.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsMutedChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2IsMutedChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.IsMutedChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveIsMutedChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveIsMutedChanged)(
            ::core::mem::transmute_copy(self), token.into_param().abi()
        )
        .ok()
    }
    pub unsafe fn IsMuted(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.IsMuted)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetIsMuted<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::BOOL,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).base.SetIsMuted)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsDocumentPlayingAudioChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2IsDocumentPlayingAudioChangedEventHandler>,
    >(
        &self,
        eventhandler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .IsDocumentPlayingAudioChanged)(
            ::core::mem::transmute_copy(self),
            eventhandler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveIsDocumentPlayingAudioChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .RemoveIsDocumentPlayingAudioChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsDocumentPlayingAudio(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self)
            .base
            .IsDocumentPlayingAudio)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn IsDefaultDownloadDialogOpenChanged<
        'a,
        Param0: ::windows::core::IntoParam<'a, ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler>,
    >(
        &self,
        handler: Param0,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsDefaultDownloadDialogOpenChanged)(
            ::core::mem::transmute_copy(self),
            handler.into_param().abi(),
            ::core::mem::transmute(token),
        )
        .ok()
    }
    pub unsafe fn RemoveIsDefaultDownloadDialogOpenChanged<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
        >,
    >(
        &self,
        token: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).RemoveIsDefaultDownloadDialogOpenChanged)(
            ::core::mem::transmute_copy(self),
            token.into_param().abi(),
        )
        .ok()
    }
    pub unsafe fn IsDefaultDownloadDialogOpen(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).IsDefaultDownloadDialogOpen)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn OpenDefaultDownloadDialog(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).OpenDefaultDownloadDialog)(
            ::core::mem::transmute_copy(self),
        )
        .ok()
    }
    pub unsafe fn CloseDefaultDownloadDialog(&self) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).CloseDefaultDownloadDialog)(
            ::core::mem::transmute_copy(self),
        )
        .ok()
    }
    pub unsafe fn DefaultDownloadDialogCornerAlignment(
        &self,
        value: *mut COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DefaultDownloadDialogCornerAlignment)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetDefaultDownloadDialogCornerAlignment(
        &self,
        value: COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetDefaultDownloadDialogCornerAlignment)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn DefaultDownloadDialogMargin(
        &self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).DefaultDownloadDialogMargin)(
            ::core::mem::transmute_copy(self),
            ::core::mem::transmute(value),
        )
        .ok()
    }
    pub unsafe fn SetDefaultDownloadDialogMargin<
        'a,
        Param0: ::windows::core::IntoParam<
            'a,
            super::super::super::super::Windows::Win32::Foundation::POINT,
        >,
    >(
        &self,
        value: Param0,
    ) -> ::windows::core::Result<()> {
        (::windows::core::Interface::vtable(self).SetDefaultDownloadDialogMargin)(
            ::core::mem::transmute_copy(self),
            value.into_param().abi(),
        )
        .ok()
    }
}
impl ::core::convert::From<ICoreWebView2_9> for ::windows::core::IUnknown {
    fn from(value: ICoreWebView2_9) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_9> for ::windows::core::IUnknown {
    fn from(value: &ICoreWebView2_9) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ::windows::core::IUnknown> for &ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ::windows::core::IUnknown> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_9> for ICoreWebView2 {
    fn from(value: ICoreWebView2_9) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_9> for ICoreWebView2 {
    fn from(value: &ICoreWebView2_9) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2> for &ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_9> for ICoreWebView2_2 {
    fn from(value: ICoreWebView2_9) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_9> for ICoreWebView2_2 {
    fn from(value: &ICoreWebView2_9) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_2> for ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_2> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_2> for &ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_2> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_9> for ICoreWebView2_3 {
    fn from(value: ICoreWebView2_9) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_9> for ICoreWebView2_3 {
    fn from(value: &ICoreWebView2_9) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_3> for ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_3> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_3> for &ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_3> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_9> for ICoreWebView2_4 {
    fn from(value: ICoreWebView2_9) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_9> for ICoreWebView2_4 {
    fn from(value: &ICoreWebView2_9) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_4> for ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_4> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_4> for &ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_4> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_9> for ICoreWebView2_5 {
    fn from(value: ICoreWebView2_9) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_9> for ICoreWebView2_5 {
    fn from(value: &ICoreWebView2_9) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_5> for ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_5> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_5> for &ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_5> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_9> for ICoreWebView2_6 {
    fn from(value: ICoreWebView2_9) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_9> for ICoreWebView2_6 {
    fn from(value: &ICoreWebView2_9) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_6> for ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_6> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_6> for &ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_6> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_9> for ICoreWebView2_7 {
    fn from(value: ICoreWebView2_9) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_9> for ICoreWebView2_7 {
    fn from(value: &ICoreWebView2_9) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_7> for ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_7> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_7> for &ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_7> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::convert::From<ICoreWebView2_9> for ICoreWebView2_8 {
    fn from(value: ICoreWebView2_9) -> Self {
        unsafe { ::core::mem::transmute(value) }
    }
}
impl ::core::convert::From<&ICoreWebView2_9> for ICoreWebView2_8 {
    fn from(value: &ICoreWebView2_9) -> Self {
        ::core::convert::From::from(::core::clone::Clone::clone(value))
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_8> for ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_8> {
        ::windows::core::Param::Owned(unsafe { ::core::mem::transmute(self) })
    }
}
impl<'a> ::windows::core::IntoParam<'a, ICoreWebView2_8> for &ICoreWebView2_9 {
    fn into_param(self) -> ::windows::core::Param<'a, ICoreWebView2_8> {
        ::windows::core::Param::Borrowed(unsafe { ::core::mem::transmute(self) })
    }
}
impl ::core::clone::Clone for ICoreWebView2_9 {
    fn clone(&self) -> Self {
        Self(self.0.clone())
    }
}
impl ::core::cmp::PartialEq for ICoreWebView2_9 {
    fn eq(&self, other: &Self) -> bool {
        self.0 == other.0
    }
}
impl ::core::cmp::Eq for ICoreWebView2_9 {}
impl ::core::fmt::Debug for ICoreWebView2_9 {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        f.debug_tuple("ICoreWebView2_9").field(&self.0).finish()
    }
}
unsafe impl ::windows::core::Interface for ICoreWebView2_9 {
    type Vtable = ICoreWebView2_9_Vtbl;
    const IID: ::windows::core::GUID =
        ::windows::core::GUID::from_u128(0x4d7b2eab_9fdc_468d_b998_a9260b5ed651);
}
#[repr(C)]
#[doc(hidden)]
pub struct ICoreWebView2_9_Vtbl where { pub base : ICoreWebView2_8_Vtbl , pub IsDefaultDownloadDialogOpenChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , handler : :: windows :: core :: RawPtr , token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub RemoveIsDefaultDownloadDialogOpenChanged : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken , ) -> :: windows :: core :: HRESULT , pub IsDefaultDownloadDialogOpen : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , value : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL , ) -> :: windows :: core :: HRESULT , pub OpenDefaultDownloadDialog : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT , pub CloseDefaultDownloadDialog : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , ) -> :: windows :: core :: HRESULT , pub DefaultDownloadDialogCornerAlignment : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , value : * mut COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT , ) -> :: windows :: core :: HRESULT , pub SetDefaultDownloadDialogCornerAlignment : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , value : COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT , ) -> :: windows :: core :: HRESULT , pub DefaultDownloadDialogMargin : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , value : * mut super::super::super::super::Windows::Win32::Foundation:: POINT , ) -> :: windows :: core :: HRESULT , pub SetDefaultDownloadDialogMargin : unsafe extern "system" fn ( this : * mut :: core :: ffi :: c_void , value : super::super::super::super::Windows::Win32::Foundation:: POINT , ) -> :: windows :: core :: HRESULT , }
pub trait ICoreWebView2_Impl: Sized {
    fn Settings(&mut self) -> ::windows::core::Result<ICoreWebView2Settings>;
    fn Source(
        &mut self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Navigate(
        &mut self,
        uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn NavigateToString(
        &mut self,
        htmlcontent: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn NavigationStarting(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2NavigationStartingEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveNavigationStarting(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn ContentLoading(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2ContentLoadingEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveContentLoading(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn SourceChanged(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2SourceChangedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveSourceChanged(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn HistoryChanged(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2HistoryChangedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveHistoryChanged(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn NavigationCompleted(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2NavigationCompletedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveNavigationCompleted(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn FrameNavigationStarting(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2NavigationStartingEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveFrameNavigationStarting(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn FrameNavigationCompleted(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2NavigationCompletedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveFrameNavigationCompleted(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn ScriptDialogOpening(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2ScriptDialogOpeningEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveScriptDialogOpening(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn PermissionRequested(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2PermissionRequestedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemovePermissionRequested(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn ProcessFailed(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2ProcessFailedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveProcessFailed(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn AddScriptToExecuteOnDocumentCreated(
        &mut self,
        javascript: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        handler: &::core::option::Option<
            ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler,
        >,
    ) -> ::windows::core::Result<()>;
    fn RemoveScriptToExecuteOnDocumentCreated(
        &mut self,
        id: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn ExecuteScript(
        &mut self,
        javascript: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        handler: &::core::option::Option<ICoreWebView2ExecuteScriptCompletedHandler>,
    ) -> ::windows::core::Result<()>;
    fn CapturePreview(
        &mut self,
        imageformat: COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT,
        imagestream: &::core::option::Option<
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        handler: &::core::option::Option<ICoreWebView2CapturePreviewCompletedHandler>,
    ) -> ::windows::core::Result<()>;
    fn Reload(&mut self) -> ::windows::core::Result<()>;
    fn PostWebMessageAsJson(
        &mut self,
        webmessageasjson: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn PostWebMessageAsString(
        &mut self,
        webmessageasstring: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn WebMessageReceived(
        &mut self,
        handler: &::core::option::Option<ICoreWebView2WebMessageReceivedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveWebMessageReceived(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn CallDevToolsProtocolMethod(
        &mut self,
        methodname: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        parametersasjson: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        handler: &::core::option::Option<ICoreWebView2CallDevToolsProtocolMethodCompletedHandler>,
    ) -> ::windows::core::Result<()>;
    fn BrowserProcessId(&mut self, value: *mut u32) -> ::windows::core::Result<()>;
    fn CanGoBack(
        &mut self,
        cangoback: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn CanGoForward(
        &mut self,
        cangoforward: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn GoBack(&mut self) -> ::windows::core::Result<()>;
    fn GoForward(&mut self) -> ::windows::core::Result<()>;
    fn GetDevToolsProtocolEventReceiver(
        &mut self,
        eventname: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<ICoreWebView2DevToolsProtocolEventReceiver>;
    fn Stop(&mut self) -> ::windows::core::Result<()>;
    fn NewWindowRequested(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2NewWindowRequestedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveNewWindowRequested(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn DocumentTitleChanged(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2DocumentTitleChangedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveDocumentTitleChanged(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn DocumentTitle(
        &mut self,
        title: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn AddHostObjectToScript(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        object: *mut super::super::super::super::Windows::Win32::System::Com::VARIANT,
    ) -> ::windows::core::Result<()>;
    fn RemoveHostObjectFromScript(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn OpenDevToolsWindow(&mut self) -> ::windows::core::Result<()>;
    fn ContainsFullScreenElementChanged(
        &mut self,
        eventhandler: &::core::option::Option<
            ICoreWebView2ContainsFullScreenElementChangedEventHandler,
        >,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveContainsFullScreenElementChanged(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn ContainsFullScreenElement(
        &mut self,
        containsfullscreenelement : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()>;
    fn WebResourceRequested(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2WebResourceRequestedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveWebResourceRequested(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn AddWebResourceRequestedFilter(
        &mut self,
        uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()>;
    fn RemoveWebResourceRequestedFilter(
        &mut self,
        uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()>;
    fn WindowCloseRequested(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2WindowCloseRequestedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveWindowCloseRequested(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2_Vtbl {
        unsafe extern "system" fn Settings<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            settings: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).Settings() {
                ::core::result::Result::Ok(ok__) => {
                    *settings = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Source<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Source(::core::mem::transmute_copy(&uri)).into()
        }
        unsafe extern "system" fn Navigate<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Navigate(::core::mem::transmute_copy(&uri)).into()
        }
        unsafe extern "system" fn NavigateToString<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            htmlcontent: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .NavigateToString(::core::mem::transmute_copy(&htmlcontent))
                .into()
        }
        unsafe extern "system" fn NavigationStarting<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .NavigationStarting(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveNavigationStarting<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveNavigationStarting(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn ContentLoading<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ContentLoading(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveContentLoading<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveContentLoading(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn SourceChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SourceChanged(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveSourceChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveSourceChanged(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn HistoryChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .HistoryChanged(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveHistoryChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveHistoryChanged(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn NavigationCompleted<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .NavigationCompleted(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveNavigationCompleted<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveNavigationCompleted(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn FrameNavigationStarting<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .FrameNavigationStarting(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveFrameNavigationStarting<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveFrameNavigationStarting(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn FrameNavigationCompleted<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .FrameNavigationCompleted(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveFrameNavigationCompleted<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveFrameNavigationCompleted(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn ScriptDialogOpening<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ScriptDialogOpening(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveScriptDialogOpening<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveScriptDialogOpening(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn PermissionRequested<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PermissionRequested(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemovePermissionRequested<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemovePermissionRequested(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn ProcessFailed<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ProcessFailed(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveProcessFailed<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveProcessFailed(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn AddScriptToExecuteOnDocumentCreated<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            javascript: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            handler: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .AddScriptToExecuteOnDocumentCreated(
                    ::core::mem::transmute_copy(&javascript),
                    ::core::mem::transmute(&handler),
                )
                .into()
        }
        unsafe extern "system" fn RemoveScriptToExecuteOnDocumentCreated<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            id: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveScriptToExecuteOnDocumentCreated(::core::mem::transmute_copy(&id))
                .into()
        }
        unsafe extern "system" fn ExecuteScript<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            javascript: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            handler: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ExecuteScript(
                    ::core::mem::transmute_copy(&javascript),
                    ::core::mem::transmute(&handler),
                )
                .into()
        }
        unsafe extern "system" fn CapturePreview<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            imageformat: COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT,
            imagestream: ::windows::core::RawPtr,
            handler: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .CapturePreview(
                    ::core::mem::transmute_copy(&imageformat),
                    ::core::mem::transmute(&imagestream),
                    ::core::mem::transmute(&handler),
                )
                .into()
        }
        unsafe extern "system" fn Reload<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Reload().into()
        }
        unsafe extern "system" fn PostWebMessageAsJson<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            webmessageasjson: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PostWebMessageAsJson(::core::mem::transmute_copy(&webmessageasjson))
                .into()
        }
        unsafe extern "system" fn PostWebMessageAsString<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            webmessageasstring: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PostWebMessageAsString(::core::mem::transmute_copy(&webmessageasstring))
                .into()
        }
        unsafe extern "system" fn WebMessageReceived<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            handler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .WebMessageReceived(
                    ::core::mem::transmute(&handler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveWebMessageReceived<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveWebMessageReceived(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn CallDevToolsProtocolMethod<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            methodname: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            parametersasjson: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            handler: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .CallDevToolsProtocolMethod(
                    ::core::mem::transmute_copy(&methodname),
                    ::core::mem::transmute_copy(&parametersasjson),
                    ::core::mem::transmute(&handler),
                )
                .into()
        }
        unsafe extern "system" fn BrowserProcessId<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .BrowserProcessId(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn CanGoBack<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            cangoback: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .CanGoBack(::core::mem::transmute_copy(&cangoback))
                .into()
        }
        unsafe extern "system" fn CanGoForward<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            cangoforward: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .CanGoForward(::core::mem::transmute_copy(&cangoforward))
                .into()
        }
        unsafe extern "system" fn GoBack<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).GoBack().into()
        }
        unsafe extern "system" fn GoForward<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).GoForward().into()
        }
        unsafe extern "system" fn GetDevToolsProtocolEventReceiver<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventname: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            receiver: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetDevToolsProtocolEventReceiver(::core::mem::transmute_copy(&eventname))
            {
                ::core::result::Result::Ok(ok__) => {
                    *receiver = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Stop<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Stop().into()
        }
        unsafe extern "system" fn NewWindowRequested<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .NewWindowRequested(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveNewWindowRequested<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveNewWindowRequested(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn DocumentTitleChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .DocumentTitleChanged(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveDocumentTitleChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveDocumentTitleChanged(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn DocumentTitle<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            title: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .DocumentTitle(::core::mem::transmute_copy(&title))
                .into()
        }
        unsafe extern "system" fn AddHostObjectToScript<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            object: *mut super::super::super::super::Windows::Win32::System::Com::VARIANT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .AddHostObjectToScript(
                    ::core::mem::transmute_copy(&name),
                    ::core::mem::transmute_copy(&object),
                )
                .into()
        }
        unsafe extern "system" fn RemoveHostObjectFromScript<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveHostObjectFromScript(::core::mem::transmute_copy(&name))
                .into()
        }
        unsafe extern "system" fn OpenDevToolsWindow<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).OpenDevToolsWindow().into()
        }
        unsafe extern "system" fn ContainsFullScreenElementChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ContainsFullScreenElementChanged(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveContainsFullScreenElementChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveContainsFullScreenElementChanged(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn ContainsFullScreenElement<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            containsfullscreenelement : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ContainsFullScreenElement(::core::mem::transmute_copy(&containsfullscreenelement))
                .into()
        }
        unsafe extern "system" fn WebResourceRequested<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .WebResourceRequested(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveWebResourceRequested<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveWebResourceRequested(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn AddWebResourceRequestedFilter<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .AddWebResourceRequestedFilter(
                    ::core::mem::transmute_copy(&uri),
                    ::core::mem::transmute_copy(&resourcecontext),
                )
                .into()
        }
        unsafe extern "system" fn RemoveWebResourceRequestedFilter<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            resourcecontext: COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveWebResourceRequestedFilter(
                    ::core::mem::transmute_copy(&uri),
                    ::core::mem::transmute_copy(&resourcecontext),
                )
                .into()
        }
        unsafe extern "system" fn WindowCloseRequested<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .WindowCloseRequested(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveWindowCloseRequested<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveWindowCloseRequested(::core::mem::transmute_copy(&token))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Settings: Settings::<Identity, Impl, OFFSET>,
            Source: Source::<Identity, Impl, OFFSET>,
            Navigate: Navigate::<Identity, Impl, OFFSET>,
            NavigateToString: NavigateToString::<Identity, Impl, OFFSET>,
            NavigationStarting: NavigationStarting::<Identity, Impl, OFFSET>,
            RemoveNavigationStarting: RemoveNavigationStarting::<Identity, Impl, OFFSET>,
            ContentLoading: ContentLoading::<Identity, Impl, OFFSET>,
            RemoveContentLoading: RemoveContentLoading::<Identity, Impl, OFFSET>,
            SourceChanged: SourceChanged::<Identity, Impl, OFFSET>,
            RemoveSourceChanged: RemoveSourceChanged::<Identity, Impl, OFFSET>,
            HistoryChanged: HistoryChanged::<Identity, Impl, OFFSET>,
            RemoveHistoryChanged: RemoveHistoryChanged::<Identity, Impl, OFFSET>,
            NavigationCompleted: NavigationCompleted::<Identity, Impl, OFFSET>,
            RemoveNavigationCompleted: RemoveNavigationCompleted::<Identity, Impl, OFFSET>,
            FrameNavigationStarting: FrameNavigationStarting::<Identity, Impl, OFFSET>,
            RemoveFrameNavigationStarting: RemoveFrameNavigationStarting::<Identity, Impl, OFFSET>,
            FrameNavigationCompleted: FrameNavigationCompleted::<Identity, Impl, OFFSET>,
            RemoveFrameNavigationCompleted: RemoveFrameNavigationCompleted::<Identity, Impl, OFFSET>,
            ScriptDialogOpening: ScriptDialogOpening::<Identity, Impl, OFFSET>,
            RemoveScriptDialogOpening: RemoveScriptDialogOpening::<Identity, Impl, OFFSET>,
            PermissionRequested: PermissionRequested::<Identity, Impl, OFFSET>,
            RemovePermissionRequested: RemovePermissionRequested::<Identity, Impl, OFFSET>,
            ProcessFailed: ProcessFailed::<Identity, Impl, OFFSET>,
            RemoveProcessFailed: RemoveProcessFailed::<Identity, Impl, OFFSET>,
            AddScriptToExecuteOnDocumentCreated: AddScriptToExecuteOnDocumentCreated::<
                Identity,
                Impl,
                OFFSET,
            >,
            RemoveScriptToExecuteOnDocumentCreated: RemoveScriptToExecuteOnDocumentCreated::<
                Identity,
                Impl,
                OFFSET,
            >,
            ExecuteScript: ExecuteScript::<Identity, Impl, OFFSET>,
            CapturePreview: CapturePreview::<Identity, Impl, OFFSET>,
            Reload: Reload::<Identity, Impl, OFFSET>,
            PostWebMessageAsJson: PostWebMessageAsJson::<Identity, Impl, OFFSET>,
            PostWebMessageAsString: PostWebMessageAsString::<Identity, Impl, OFFSET>,
            WebMessageReceived: WebMessageReceived::<Identity, Impl, OFFSET>,
            RemoveWebMessageReceived: RemoveWebMessageReceived::<Identity, Impl, OFFSET>,
            CallDevToolsProtocolMethod: CallDevToolsProtocolMethod::<Identity, Impl, OFFSET>,
            BrowserProcessId: BrowserProcessId::<Identity, Impl, OFFSET>,
            CanGoBack: CanGoBack::<Identity, Impl, OFFSET>,
            CanGoForward: CanGoForward::<Identity, Impl, OFFSET>,
            GoBack: GoBack::<Identity, Impl, OFFSET>,
            GoForward: GoForward::<Identity, Impl, OFFSET>,
            GetDevToolsProtocolEventReceiver: GetDevToolsProtocolEventReceiver::<
                Identity,
                Impl,
                OFFSET,
            >,
            Stop: Stop::<Identity, Impl, OFFSET>,
            NewWindowRequested: NewWindowRequested::<Identity, Impl, OFFSET>,
            RemoveNewWindowRequested: RemoveNewWindowRequested::<Identity, Impl, OFFSET>,
            DocumentTitleChanged: DocumentTitleChanged::<Identity, Impl, OFFSET>,
            RemoveDocumentTitleChanged: RemoveDocumentTitleChanged::<Identity, Impl, OFFSET>,
            DocumentTitle: DocumentTitle::<Identity, Impl, OFFSET>,
            AddHostObjectToScript: AddHostObjectToScript::<Identity, Impl, OFFSET>,
            RemoveHostObjectFromScript: RemoveHostObjectFromScript::<Identity, Impl, OFFSET>,
            OpenDevToolsWindow: OpenDevToolsWindow::<Identity, Impl, OFFSET>,
            ContainsFullScreenElementChanged: ContainsFullScreenElementChanged::<
                Identity,
                Impl,
                OFFSET,
            >,
            RemoveContainsFullScreenElementChanged: RemoveContainsFullScreenElementChanged::<
                Identity,
                Impl,
                OFFSET,
            >,
            ContainsFullScreenElement: ContainsFullScreenElement::<Identity, Impl, OFFSET>,
            WebResourceRequested: WebResourceRequested::<Identity, Impl, OFFSET>,
            RemoveWebResourceRequested: RemoveWebResourceRequested::<Identity, Impl, OFFSET>,
            AddWebResourceRequestedFilter: AddWebResourceRequestedFilter::<Identity, Impl, OFFSET>,
            RemoveWebResourceRequestedFilter: RemoveWebResourceRequestedFilter::<
                Identity,
                Impl,
                OFFSET,
            >,
            WindowCloseRequested: WindowCloseRequested::<Identity, Impl, OFFSET>,
            RemoveWindowCloseRequested: RemoveWindowCloseRequested::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2AcceleratorKeyPressedEventArgs_Impl: Sized {
    fn KeyEventKind(
        &mut self,
        keyeventkind: *mut COREWEBVIEW2_KEY_EVENT_KIND,
    ) -> ::windows::core::Result<()>;
    fn VirtualKey(&mut self, virtualkey: *mut u32) -> ::windows::core::Result<()>;
    fn KeyEventLParam(&mut self, lparam: *mut i32) -> ::windows::core::Result<()>;
    fn PhysicalKeyStatus(
        &mut self,
        physicalkeystatus: *mut COREWEBVIEW2_PHYSICAL_KEY_STATUS,
    ) -> ::windows::core::Result<()>;
    fn Handled(
        &mut self,
        handled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetHandled(
        &mut self,
        handled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2AcceleratorKeyPressedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2AcceleratorKeyPressedEventArgs_Vtbl {
        unsafe extern "system" fn KeyEventKind<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            keyeventkind: *mut COREWEBVIEW2_KEY_EVENT_KIND,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .KeyEventKind(::core::mem::transmute_copy(&keyeventkind))
                .into()
        }
        unsafe extern "system" fn VirtualKey<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            virtualkey: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .VirtualKey(::core::mem::transmute_copy(&virtualkey))
                .into()
        }
        unsafe extern "system" fn KeyEventLParam<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            lparam: *mut i32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .KeyEventLParam(::core::mem::transmute_copy(&lparam))
                .into()
        }
        unsafe extern "system" fn PhysicalKeyStatus<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            physicalkeystatus: *mut COREWEBVIEW2_PHYSICAL_KEY_STATUS,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PhysicalKeyStatus(::core::mem::transmute_copy(&physicalkeystatus))
                .into()
        }
        unsafe extern "system" fn Handled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            handled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Handled(::core::mem::transmute_copy(&handled))
                .into()
        }
        unsafe extern "system" fn SetHandled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2AcceleratorKeyPressedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            handled: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetHandled(::core::mem::transmute_copy(&handled))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            KeyEventKind: KeyEventKind::<Identity, Impl, OFFSET>,
            VirtualKey: VirtualKey::<Identity, Impl, OFFSET>,
            KeyEventLParam: KeyEventLParam::<Identity, Impl, OFFSET>,
            PhysicalKeyStatus: PhysicalKeyStatus::<Identity, Impl, OFFSET>,
            Handled: Handled::<Identity, Impl, OFFSET>,
            SetHandled: SetHandled::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2AcceleratorKeyPressedEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2AcceleratorKeyPressedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2Controller>,
        args: &::core::option::Option<ICoreWebView2AcceleratorKeyPressedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2AcceleratorKeyPressedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2AcceleratorKeyPressedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2AcceleratorKeyPressedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2AcceleratorKeyPressedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2AcceleratorKeyPressedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        errorcode: ::windows::core::HRESULT,
        id: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            errorcode: ::windows::core::HRESULT,
            id: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute_copy(&errorcode),
                    ::core::mem::transmute_copy(&id),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2BrowserProcessExitedEventArgs_Impl: Sized {
    fn BrowserProcessExitKind(
        &mut self,
        browserprocessexitkind: *mut COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND,
    ) -> ::windows::core::Result<()>;
    fn BrowserProcessId(&mut self, value: *mut u32) -> ::windows::core::Result<()>;
}
impl ICoreWebView2BrowserProcessExitedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2BrowserProcessExitedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2BrowserProcessExitedEventArgs_Vtbl {
        unsafe extern "system" fn BrowserProcessExitKind<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2BrowserProcessExitedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            browserprocessexitkind: *mut COREWEBVIEW2_BROWSER_PROCESS_EXIT_KIND,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .BrowserProcessExitKind(::core::mem::transmute_copy(&browserprocessexitkind))
                .into()
        }
        unsafe extern "system" fn BrowserProcessId<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2BrowserProcessExitedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .BrowserProcessId(::core::mem::transmute_copy(&value))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            BrowserProcessExitKind: BrowserProcessExitKind::<Identity, Impl, OFFSET>,
            BrowserProcessId: BrowserProcessId::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2BrowserProcessExitedEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2BrowserProcessExitedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2Environment>,
        args: &::core::option::Option<ICoreWebView2BrowserProcessExitedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2BrowserProcessExitedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2BrowserProcessExitedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2BrowserProcessExitedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2BrowserProcessExitedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2BrowserProcessExitedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2BytesReceivedChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2DownloadOperation>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2BytesReceivedChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2BytesReceivedChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2BytesReceivedChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2BytesReceivedChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2BytesReceivedChangedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        errorcode: ::windows::core::HRESULT,
        returnobjectasjson: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CallDevToolsProtocolMethodCompletedHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            errorcode: ::windows::core::HRESULT,
            returnobjectasjson: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute_copy(&errorcode),
                    ::core::mem::transmute_copy(&returnobjectasjson),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2CallDevToolsProtocolMethodCompletedHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2CapturePreviewCompletedHandler_Impl: Sized {
    fn Invoke(&mut self, errorcode: ::windows::core::HRESULT) -> ::windows::core::Result<()>;
}
impl ICoreWebView2CapturePreviewCompletedHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2CapturePreviewCompletedHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2CapturePreviewCompletedHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CapturePreviewCompletedHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            errorcode: ::windows::core::HRESULT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(::core::mem::transmute_copy(&errorcode))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2CapturePreviewCompletedHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2ClientCertificate_Impl: Sized {
    fn Subject(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Issuer(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn ValidFrom(&mut self, value: *mut f64) -> ::windows::core::Result<()>;
    fn ValidTo(&mut self, value: *mut f64) -> ::windows::core::Result<()>;
    fn DerEncodedSerialNumber(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn DisplayName(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn ToPemEncoding(
        &mut self,
        pemencodeddata: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn PemEncodedIssuerCertificateChain(
        &mut self,
    ) -> ::windows::core::Result<ICoreWebView2StringCollection>;
    fn Kind(
        &mut self,
        value: *mut COREWEBVIEW2_CLIENT_CERTIFICATE_KIND,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2ClientCertificate_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2ClientCertificate_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2ClientCertificate_Vtbl {
        unsafe extern "system" fn Subject<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Subject(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn Issuer<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Issuer(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn ValidFrom<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ValidFrom(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn ValidTo<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).ValidTo(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn DerEncodedSerialNumber<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .DerEncodedSerialNumber(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn DisplayName<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .DisplayName(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn ToPemEncoding<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pemencodeddata: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ToPemEncoding(::core::mem::transmute_copy(&pemencodeddata))
                .into()
        }
        unsafe extern "system" fn PemEncodedIssuerCertificateChain<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).PemEncodedIssuerCertificateChain() {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Kind<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificate_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut COREWEBVIEW2_CLIENT_CERTIFICATE_KIND,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Kind(::core::mem::transmute_copy(&value)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Subject: Subject::<Identity, Impl, OFFSET>,
            Issuer: Issuer::<Identity, Impl, OFFSET>,
            ValidFrom: ValidFrom::<Identity, Impl, OFFSET>,
            ValidTo: ValidTo::<Identity, Impl, OFFSET>,
            DerEncodedSerialNumber: DerEncodedSerialNumber::<Identity, Impl, OFFSET>,
            DisplayName: DisplayName::<Identity, Impl, OFFSET>,
            ToPemEncoding: ToPemEncoding::<Identity, Impl, OFFSET>,
            PemEncodedIssuerCertificateChain: PemEncodedIssuerCertificateChain::<
                Identity,
                Impl,
                OFFSET,
            >,
            Kind: Kind::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2ClientCertificate as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2ClientCertificateCollection_Impl: Sized {
    fn Count(&mut self, value: *mut u32) -> ::windows::core::Result<()>;
    fn GetValueAtIndex(
        &mut self,
        index: u32,
    ) -> ::windows::core::Result<ICoreWebView2ClientCertificate>;
}
impl ICoreWebView2ClientCertificateCollection_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2ClientCertificateCollection_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2ClientCertificateCollection_Vtbl {
        unsafe extern "system" fn Count<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Count(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn GetValueAtIndex<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            index: u32,
            certificate: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetValueAtIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *certificate = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Count: Count::<Identity, Impl, OFFSET>,
            GetValueAtIndex: GetValueAtIndex::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2ClientCertificateCollection as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2ClientCertificateRequestedEventArgs_Impl: Sized {
    fn Host(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Port(&mut self, value: *mut i32) -> ::windows::core::Result<()>;
    fn IsProxy(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn AllowedCertificateAuthorities(
        &mut self,
    ) -> ::windows::core::Result<ICoreWebView2StringCollection>;
    fn MutuallyTrustedCertificates(
        &mut self,
    ) -> ::windows::core::Result<ICoreWebView2ClientCertificateCollection>;
    fn SelectedCertificate(&mut self) -> ::windows::core::Result<ICoreWebView2ClientCertificate>;
    fn SetSelectedCertificate(
        &mut self,
        value: &::core::option::Option<ICoreWebView2ClientCertificate>,
    ) -> ::windows::core::Result<()>;
    fn Cancel(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetCancel(
        &mut self,
        value: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn Handled(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetHandled(
        &mut self,
        value: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn GetDeferral(&mut self) -> ::windows::core::Result<ICoreWebView2Deferral>;
}
impl ICoreWebView2ClientCertificateRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2ClientCertificateRequestedEventArgs_Vtbl {
        unsafe extern "system" fn Host<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Host(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn Port<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut i32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Port(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn IsProxy<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).IsProxy(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn AllowedCertificateAuthorities<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).AllowedCertificateAuthorities() {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MutuallyTrustedCertificates<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).MutuallyTrustedCertificates() {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SelectedCertificate<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).SelectedCertificate() {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetSelectedCertificate<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetSelectedCertificate(::core::mem::transmute(&value))
                .into()
        }
        unsafe extern "system" fn Cancel<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Cancel(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn SetCancel<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetCancel(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn Handled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Handled(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn SetHandled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetHandled(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            deferral: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetDeferral() {
                ::core::result::Result::Ok(ok__) => {
                    *deferral = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Host: Host::<Identity, Impl, OFFSET>,
            Port: Port::<Identity, Impl, OFFSET>,
            IsProxy: IsProxy::<Identity, Impl, OFFSET>,
            AllowedCertificateAuthorities: AllowedCertificateAuthorities::<Identity, Impl, OFFSET>,
            MutuallyTrustedCertificates: MutuallyTrustedCertificates::<Identity, Impl, OFFSET>,
            SelectedCertificate: SelectedCertificate::<Identity, Impl, OFFSET>,
            SetSelectedCertificate: SetSelectedCertificate::<Identity, Impl, OFFSET>,
            Cancel: Cancel::<Identity, Impl, OFFSET>,
            SetCancel: SetCancel::<Identity, Impl, OFFSET>,
            Handled: Handled::<Identity, Impl, OFFSET>,
            SetHandled: SetHandled::<Identity, Impl, OFFSET>,
            GetDeferral: GetDeferral::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2ClientCertificateRequestedEventArgs < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2ClientCertificateRequestedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2ClientCertificateRequestedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2ClientCertificateRequestedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2ClientCertificateRequestedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2ClientCertificateRequestedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ClientCertificateRequestedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2ClientCertificateRequestedEventHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2CompositionController_Impl: Sized {
    fn RootVisualTarget(&mut self) -> ::windows::core::Result<::windows::core::IUnknown>;
    fn SetRootVisualTarget(
        &mut self,
        target: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
    fn SendMouseInput(
        &mut self,
        eventkind: COREWEBVIEW2_MOUSE_EVENT_KIND,
        virtualkeys: COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS,
        mousedata: u32,
        point: &super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()>;
    fn SendPointerInput(
        &mut self,
        eventkind: COREWEBVIEW2_POINTER_EVENT_KIND,
        pointerinfo: &::core::option::Option<ICoreWebView2PointerInfo>,
    ) -> ::windows::core::Result<()>;
    fn Cursor(
        &mut self,
        cursor: *mut super::super::super::super::Windows::Win32::UI::WindowsAndMessaging::HCURSOR,
    ) -> ::windows::core::Result<()>;
    fn SystemCursorId(&mut self, systemcursorid: *mut u32) -> ::windows::core::Result<()>;
    fn CursorChanged(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2CursorChangedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveCursorChanged(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2CompositionController_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2CompositionController_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2CompositionController_Vtbl {
        unsafe extern "system" fn RootVisualTarget<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            target: *mut *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).RootVisualTarget() {
                ::core::result::Result::Ok(ok__) => {
                    *target = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetRootVisualTarget<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            target: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetRootVisualTarget(::core::mem::transmute(&target))
                .into()
        }
        unsafe extern "system" fn SendMouseInput<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventkind: COREWEBVIEW2_MOUSE_EVENT_KIND,
            virtualkeys: COREWEBVIEW2_MOUSE_EVENT_VIRTUAL_KEYS,
            mousedata: u32,
            point: super::super::super::super::Windows::Win32::Foundation::POINT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SendMouseInput(
                    ::core::mem::transmute_copy(&eventkind),
                    ::core::mem::transmute_copy(&virtualkeys),
                    ::core::mem::transmute_copy(&mousedata),
                    ::core::mem::transmute_copy(&point),
                )
                .into()
        }
        unsafe extern "system" fn SendPointerInput<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventkind: COREWEBVIEW2_POINTER_EVENT_KIND,
            pointerinfo: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SendPointerInput(
                    ::core::mem::transmute_copy(&eventkind),
                    ::core::mem::transmute(&pointerinfo),
                )
                .into()
        }
        unsafe extern "system" fn Cursor<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            cursor : * mut super::super::super::super::Windows::Win32::UI::WindowsAndMessaging:: HCURSOR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Cursor(::core::mem::transmute_copy(&cursor)).into()
        }
        unsafe extern "system" fn SystemCursorId<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            systemcursorid: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SystemCursorId(::core::mem::transmute_copy(&systemcursorid))
                .into()
        }
        unsafe extern "system" fn CursorChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .CursorChanged(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveCursorChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CompositionController_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveCursorChanged(::core::mem::transmute_copy(&token))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            RootVisualTarget: RootVisualTarget::<Identity, Impl, OFFSET>,
            SetRootVisualTarget: SetRootVisualTarget::<Identity, Impl, OFFSET>,
            SendMouseInput: SendMouseInput::<Identity, Impl, OFFSET>,
            SendPointerInput: SendPointerInput::<Identity, Impl, OFFSET>,
            Cursor: Cursor::<Identity, Impl, OFFSET>,
            SystemCursorId: SystemCursorId::<Identity, Impl, OFFSET>,
            CursorChanged: CursorChanged::<Identity, Impl, OFFSET>,
            RemoveCursorChanged: RemoveCursorChanged::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2CompositionController as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2CompositionController2_Impl:
    Sized + ICoreWebView2CompositionController_Impl
{
    fn UIAProvider(&mut self) -> ::windows::core::Result<::windows::core::IUnknown>;
}
impl ICoreWebView2CompositionController2_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2CompositionController2_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2CompositionController2_Vtbl {
        unsafe extern "system" fn UIAProvider<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CompositionController2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            provider: *mut *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).UIAProvider() {
                ::core::result::Result::Ok(ok__) => {
                    *provider = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ICoreWebView2CompositionController_Vtbl::new::<Identity, Impl, OFFSET>(),
            UIAProvider: UIAProvider::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2CompositionController2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2CompositionController as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2ContainsFullScreenElementChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2ContainsFullScreenElementChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2ContainsFullScreenElementChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2ContainsFullScreenElementChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ContainsFullScreenElementChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2ContainsFullScreenElementChangedEventHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2ContentLoadingEventArgs_Impl: Sized {
    fn IsErrorPage(
        &mut self,
        iserrorpage: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn NavigationId(&mut self, navigationid: *mut u64) -> ::windows::core::Result<()>;
}
impl ICoreWebView2ContentLoadingEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2ContentLoadingEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2ContentLoadingEventArgs_Vtbl {
        unsafe extern "system" fn IsErrorPage<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ContentLoadingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            iserrorpage: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsErrorPage(::core::mem::transmute_copy(&iserrorpage))
                .into()
        }
        unsafe extern "system" fn NavigationId<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ContentLoadingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            navigationid: *mut u64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .NavigationId(::core::mem::transmute_copy(&navigationid))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            IsErrorPage: IsErrorPage::<Identity, Impl, OFFSET>,
            NavigationId: NavigationId::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2ContentLoadingEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2ContentLoadingEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2ContentLoadingEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2ContentLoadingEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2ContentLoadingEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2ContentLoadingEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ContentLoadingEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2ContentLoadingEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Controller_Impl: Sized {
    fn IsVisible(
        &mut self,
        isvisible: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetIsVisible(
        &mut self,
        isvisible: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn Bounds(
        &mut self,
        bounds: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()>;
    fn SetBounds(
        &mut self,
        bounds: &super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()>;
    fn ZoomFactor(&mut self, zoomfactor: *mut f64) -> ::windows::core::Result<()>;
    fn SetZoomFactor(&mut self, zoomfactor: f64) -> ::windows::core::Result<()>;
    fn ZoomFactorChanged(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2ZoomFactorChangedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveZoomFactorChanged(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn SetBoundsAndZoomFactor(
        &mut self,
        bounds: &super::super::super::super::Windows::Win32::Foundation::RECT,
        zoomfactor: f64,
    ) -> ::windows::core::Result<()>;
    fn MoveFocus(&mut self, reason: COREWEBVIEW2_MOVE_FOCUS_REASON) -> ::windows::core::Result<()>;
    fn MoveFocusRequested(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2MoveFocusRequestedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveMoveFocusRequested(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn GotFocus(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2FocusChangedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveGotFocus(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn LostFocus(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2FocusChangedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveLostFocus(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn AcceleratorKeyPressed(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2AcceleratorKeyPressedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveAcceleratorKeyPressed(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn ParentWindow(
        &mut self,
        parentwindow: *mut super::super::super::super::Windows::Win32::Foundation::HWND,
    ) -> ::windows::core::Result<()>;
    fn SetParentWindow(
        &mut self,
        parentwindow: super::super::super::super::Windows::Win32::Foundation::HWND,
    ) -> ::windows::core::Result<()>;
    fn NotifyParentWindowPositionChanged(&mut self) -> ::windows::core::Result<()>;
    fn Close(&mut self) -> ::windows::core::Result<()>;
    fn CoreWebView2(&mut self) -> ::windows::core::Result<ICoreWebView2>;
}
impl ICoreWebView2Controller_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Controller_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Controller_Vtbl {
        unsafe extern "system" fn IsVisible<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            isvisible: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsVisible(::core::mem::transmute_copy(&isvisible))
                .into()
        }
        unsafe extern "system" fn SetIsVisible<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            isvisible: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetIsVisible(::core::mem::transmute_copy(&isvisible))
                .into()
        }
        unsafe extern "system" fn Bounds<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            bounds: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Bounds(::core::mem::transmute_copy(&bounds)).into()
        }
        unsafe extern "system" fn SetBounds<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            bounds: super::super::super::super::Windows::Win32::Foundation::RECT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetBounds(::core::mem::transmute_copy(&bounds))
                .into()
        }
        unsafe extern "system" fn ZoomFactor<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            zoomfactor: *mut f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ZoomFactor(::core::mem::transmute_copy(&zoomfactor))
                .into()
        }
        unsafe extern "system" fn SetZoomFactor<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            zoomfactor: f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetZoomFactor(::core::mem::transmute_copy(&zoomfactor))
                .into()
        }
        unsafe extern "system" fn ZoomFactorChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ZoomFactorChanged(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveZoomFactorChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveZoomFactorChanged(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn SetBoundsAndZoomFactor<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            bounds: super::super::super::super::Windows::Win32::Foundation::RECT,
            zoomfactor: f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetBoundsAndZoomFactor(
                    ::core::mem::transmute_copy(&bounds),
                    ::core::mem::transmute_copy(&zoomfactor),
                )
                .into()
        }
        unsafe extern "system" fn MoveFocus<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            reason: COREWEBVIEW2_MOVE_FOCUS_REASON,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .MoveFocus(::core::mem::transmute_copy(&reason))
                .into()
        }
        unsafe extern "system" fn MoveFocusRequested<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .MoveFocusRequested(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveMoveFocusRequested<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveMoveFocusRequested(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn GotFocus<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .GotFocus(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveGotFocus<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveGotFocus(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn LostFocus<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .LostFocus(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveLostFocus<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveLostFocus(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn AcceleratorKeyPressed<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .AcceleratorKeyPressed(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveAcceleratorKeyPressed<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveAcceleratorKeyPressed(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn ParentWindow<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            parentwindow: *mut super::super::super::super::Windows::Win32::Foundation::HWND,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ParentWindow(::core::mem::transmute_copy(&parentwindow))
                .into()
        }
        unsafe extern "system" fn SetParentWindow<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            parentwindow: super::super::super::super::Windows::Win32::Foundation::HWND,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetParentWindow(::core::mem::transmute_copy(&parentwindow))
                .into()
        }
        unsafe extern "system" fn NotifyParentWindowPositionChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).NotifyParentWindowPositionChanged().into()
        }
        unsafe extern "system" fn Close<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Close().into()
        }
        unsafe extern "system" fn CoreWebView2<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            corewebview2: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).CoreWebView2() {
                ::core::result::Result::Ok(ok__) => {
                    *corewebview2 = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            IsVisible: IsVisible::<Identity, Impl, OFFSET>,
            SetIsVisible: SetIsVisible::<Identity, Impl, OFFSET>,
            Bounds: Bounds::<Identity, Impl, OFFSET>,
            SetBounds: SetBounds::<Identity, Impl, OFFSET>,
            ZoomFactor: ZoomFactor::<Identity, Impl, OFFSET>,
            SetZoomFactor: SetZoomFactor::<Identity, Impl, OFFSET>,
            ZoomFactorChanged: ZoomFactorChanged::<Identity, Impl, OFFSET>,
            RemoveZoomFactorChanged: RemoveZoomFactorChanged::<Identity, Impl, OFFSET>,
            SetBoundsAndZoomFactor: SetBoundsAndZoomFactor::<Identity, Impl, OFFSET>,
            MoveFocus: MoveFocus::<Identity, Impl, OFFSET>,
            MoveFocusRequested: MoveFocusRequested::<Identity, Impl, OFFSET>,
            RemoveMoveFocusRequested: RemoveMoveFocusRequested::<Identity, Impl, OFFSET>,
            GotFocus: GotFocus::<Identity, Impl, OFFSET>,
            RemoveGotFocus: RemoveGotFocus::<Identity, Impl, OFFSET>,
            LostFocus: LostFocus::<Identity, Impl, OFFSET>,
            RemoveLostFocus: RemoveLostFocus::<Identity, Impl, OFFSET>,
            AcceleratorKeyPressed: AcceleratorKeyPressed::<Identity, Impl, OFFSET>,
            RemoveAcceleratorKeyPressed: RemoveAcceleratorKeyPressed::<Identity, Impl, OFFSET>,
            ParentWindow: ParentWindow::<Identity, Impl, OFFSET>,
            SetParentWindow: SetParentWindow::<Identity, Impl, OFFSET>,
            NotifyParentWindowPositionChanged: NotifyParentWindowPositionChanged::<
                Identity,
                Impl,
                OFFSET,
            >,
            Close: Close::<Identity, Impl, OFFSET>,
            CoreWebView2: CoreWebView2::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Controller as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Controller2_Impl: Sized + ICoreWebView2Controller_Impl {
    fn DefaultBackgroundColor(
        &mut self,
        backgroundcolor: *mut COREWEBVIEW2_COLOR,
    ) -> ::windows::core::Result<()>;
    fn SetDefaultBackgroundColor(
        &mut self,
        backgroundcolor: &COREWEBVIEW2_COLOR,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2Controller2_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Controller2_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Controller2_Vtbl {
        unsafe extern "system" fn DefaultBackgroundColor<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            backgroundcolor: *mut COREWEBVIEW2_COLOR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .DefaultBackgroundColor(::core::mem::transmute_copy(&backgroundcolor))
                .into()
        }
        unsafe extern "system" fn SetDefaultBackgroundColor<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            backgroundcolor: COREWEBVIEW2_COLOR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetDefaultBackgroundColor(::core::mem::transmute_copy(&backgroundcolor))
                .into()
        }
        Self {
            base: ICoreWebView2Controller_Vtbl::new::<Identity, Impl, OFFSET>(),
            DefaultBackgroundColor: DefaultBackgroundColor::<Identity, Impl, OFFSET>,
            SetDefaultBackgroundColor: SetDefaultBackgroundColor::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Controller2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Controller as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Controller3_Impl:
    Sized + ICoreWebView2Controller_Impl + ICoreWebView2Controller2_Impl
{
    fn RasterizationScale(&mut self, scale: *mut f64) -> ::windows::core::Result<()>;
    fn SetRasterizationScale(&mut self, scale: f64) -> ::windows::core::Result<()>;
    fn ShouldDetectMonitorScaleChanges(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetShouldDetectMonitorScaleChanges(
        &mut self,
        value: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn RasterizationScaleChanged(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2RasterizationScaleChangedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveRasterizationScaleChanged(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn BoundsMode(
        &mut self,
        boundsmode: *mut COREWEBVIEW2_BOUNDS_MODE,
    ) -> ::windows::core::Result<()>;
    fn SetBoundsMode(
        &mut self,
        boundsmode: COREWEBVIEW2_BOUNDS_MODE,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2Controller3_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Controller3_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Controller3_Vtbl {
        unsafe extern "system" fn RasterizationScale<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            scale: *mut f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RasterizationScale(::core::mem::transmute_copy(&scale))
                .into()
        }
        unsafe extern "system" fn SetRasterizationScale<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            scale: f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetRasterizationScale(::core::mem::transmute_copy(&scale))
                .into()
        }
        unsafe extern "system" fn ShouldDetectMonitorScaleChanges<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ShouldDetectMonitorScaleChanges(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn SetShouldDetectMonitorScaleChanges<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetShouldDetectMonitorScaleChanges(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn RasterizationScaleChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RasterizationScaleChanged(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveRasterizationScaleChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveRasterizationScaleChanged(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn BoundsMode<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            boundsmode: *mut COREWEBVIEW2_BOUNDS_MODE,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .BoundsMode(::core::mem::transmute_copy(&boundsmode))
                .into()
        }
        unsafe extern "system" fn SetBoundsMode<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Controller3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            boundsmode: COREWEBVIEW2_BOUNDS_MODE,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetBoundsMode(::core::mem::transmute_copy(&boundsmode))
                .into()
        }
        Self {
            base: ICoreWebView2Controller2_Vtbl::new::<Identity, Impl, OFFSET>(),
            RasterizationScale: RasterizationScale::<Identity, Impl, OFFSET>,
            SetRasterizationScale: SetRasterizationScale::<Identity, Impl, OFFSET>,
            ShouldDetectMonitorScaleChanges: ShouldDetectMonitorScaleChanges::<
                Identity,
                Impl,
                OFFSET,
            >,
            SetShouldDetectMonitorScaleChanges: SetShouldDetectMonitorScaleChanges::<
                Identity,
                Impl,
                OFFSET,
            >,
            RasterizationScaleChanged: RasterizationScaleChanged::<Identity, Impl, OFFSET>,
            RemoveRasterizationScaleChanged: RemoveRasterizationScaleChanged::<
                Identity,
                Impl,
                OFFSET,
            >,
            BoundsMode: BoundsMode::<Identity, Impl, OFFSET>,
            SetBoundsMode: SetBoundsMode::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Controller3 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Controller as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Controller2 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Cookie_Impl: Sized {
    fn Name(
        &mut self,
        name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Value(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn SetValue(
        &mut self,
        value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Domain(
        &mut self,
        domain: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Path(
        &mut self,
        path: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Expires(&mut self, expires: *mut f64) -> ::windows::core::Result<()>;
    fn SetExpires(&mut self, expires: f64) -> ::windows::core::Result<()>;
    fn IsHttpOnly(
        &mut self,
        ishttponly: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetIsHttpOnly(
        &mut self,
        ishttponly: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SameSite(
        &mut self,
        samesite: *mut COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
    ) -> ::windows::core::Result<()>;
    fn SetSameSite(
        &mut self,
        samesite: COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
    ) -> ::windows::core::Result<()>;
    fn IsSecure(
        &mut self,
        issecure: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetIsSecure(
        &mut self,
        issecure: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn IsSession(
        &mut self,
        issession: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2Cookie_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Cookie_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Cookie_Vtbl {
        unsafe extern "system" fn Name<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Name(::core::mem::transmute_copy(&name)).into()
        }
        unsafe extern "system" fn Value<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Value(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn SetValue<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).SetValue(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn Domain<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            domain: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Domain(::core::mem::transmute_copy(&domain)).into()
        }
        unsafe extern "system" fn Path<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            path: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Path(::core::mem::transmute_copy(&path)).into()
        }
        unsafe extern "system" fn Expires<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            expires: *mut f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Expires(::core::mem::transmute_copy(&expires))
                .into()
        }
        unsafe extern "system" fn SetExpires<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            expires: f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetExpires(::core::mem::transmute_copy(&expires))
                .into()
        }
        unsafe extern "system" fn IsHttpOnly<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            ishttponly: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsHttpOnly(::core::mem::transmute_copy(&ishttponly))
                .into()
        }
        unsafe extern "system" fn SetIsHttpOnly<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            ishttponly: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetIsHttpOnly(::core::mem::transmute_copy(&ishttponly))
                .into()
        }
        unsafe extern "system" fn SameSite<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            samesite: *mut COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SameSite(::core::mem::transmute_copy(&samesite))
                .into()
        }
        unsafe extern "system" fn SetSameSite<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            samesite: COREWEBVIEW2_COOKIE_SAME_SITE_KIND,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetSameSite(::core::mem::transmute_copy(&samesite))
                .into()
        }
        unsafe extern "system" fn IsSecure<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            issecure: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsSecure(::core::mem::transmute_copy(&issecure))
                .into()
        }
        unsafe extern "system" fn SetIsSecure<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            issecure: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetIsSecure(::core::mem::transmute_copy(&issecure))
                .into()
        }
        unsafe extern "system" fn IsSession<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Cookie_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            issession: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsSession(::core::mem::transmute_copy(&issession))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Name: Name::<Identity, Impl, OFFSET>,
            Value: Value::<Identity, Impl, OFFSET>,
            SetValue: SetValue::<Identity, Impl, OFFSET>,
            Domain: Domain::<Identity, Impl, OFFSET>,
            Path: Path::<Identity, Impl, OFFSET>,
            Expires: Expires::<Identity, Impl, OFFSET>,
            SetExpires: SetExpires::<Identity, Impl, OFFSET>,
            IsHttpOnly: IsHttpOnly::<Identity, Impl, OFFSET>,
            SetIsHttpOnly: SetIsHttpOnly::<Identity, Impl, OFFSET>,
            SameSite: SameSite::<Identity, Impl, OFFSET>,
            SetSameSite: SetSameSite::<Identity, Impl, OFFSET>,
            IsSecure: IsSecure::<Identity, Impl, OFFSET>,
            SetIsSecure: SetIsSecure::<Identity, Impl, OFFSET>,
            IsSession: IsSession::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Cookie as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2CookieList_Impl: Sized {
    fn Count(&mut self, count: *mut u32) -> ::windows::core::Result<()>;
    fn GetValueAtIndex(&mut self, index: u32) -> ::windows::core::Result<ICoreWebView2Cookie>;
}
impl ICoreWebView2CookieList_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2CookieList_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2CookieList_Vtbl {
        unsafe extern "system" fn Count<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CookieList_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            count: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Count(::core::mem::transmute_copy(&count)).into()
        }
        unsafe extern "system" fn GetValueAtIndex<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CookieList_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            index: u32,
            cookie: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetValueAtIndex(::core::mem::transmute_copy(&index)) {
                ::core::result::Result::Ok(ok__) => {
                    *cookie = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Count: Count::<Identity, Impl, OFFSET>,
            GetValueAtIndex: GetValueAtIndex::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2CookieList as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2CookieManager_Impl: Sized {
    fn CreateCookie(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        domain: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        path: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<ICoreWebView2Cookie>;
    fn CopyCookie(
        &mut self,
        cookieparam: &::core::option::Option<ICoreWebView2Cookie>,
    ) -> ::windows::core::Result<ICoreWebView2Cookie>;
    fn GetCookies(
        &mut self,
        uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        handler: &::core::option::Option<ICoreWebView2GetCookiesCompletedHandler>,
    ) -> ::windows::core::Result<()>;
    fn AddOrUpdateCookie(
        &mut self,
        cookie: &::core::option::Option<ICoreWebView2Cookie>,
    ) -> ::windows::core::Result<()>;
    fn DeleteCookie(
        &mut self,
        cookie: &::core::option::Option<ICoreWebView2Cookie>,
    ) -> ::windows::core::Result<()>;
    fn DeleteCookies(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn DeleteCookiesWithDomainAndPath(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        domain: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        path: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn DeleteAllCookies(&mut self) -> ::windows::core::Result<()>;
}
impl ICoreWebView2CookieManager_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2CookieManager_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2CookieManager_Vtbl {
        unsafe extern "system" fn CreateCookie<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            domain: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            path: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            cookie: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).CreateCookie(
                ::core::mem::transmute_copy(&name),
                ::core::mem::transmute_copy(&value),
                ::core::mem::transmute_copy(&domain),
                ::core::mem::transmute_copy(&path),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *cookie = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn CopyCookie<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            cookieparam: ::windows::core::RawPtr,
            cookie: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).CopyCookie(::core::mem::transmute(&cookieparam)) {
                ::core::result::Result::Ok(ok__) => {
                    *cookie = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetCookies<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            handler: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .GetCookies(
                    ::core::mem::transmute_copy(&uri),
                    ::core::mem::transmute(&handler),
                )
                .into()
        }
        unsafe extern "system" fn AddOrUpdateCookie<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            cookie: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .AddOrUpdateCookie(::core::mem::transmute(&cookie))
                .into()
        }
        unsafe extern "system" fn DeleteCookie<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            cookie: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).DeleteCookie(::core::mem::transmute(&cookie)).into()
        }
        unsafe extern "system" fn DeleteCookies<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .DeleteCookies(
                    ::core::mem::transmute_copy(&name),
                    ::core::mem::transmute_copy(&uri),
                )
                .into()
        }
        unsafe extern "system" fn DeleteCookiesWithDomainAndPath<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            domain: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            path: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .DeleteCookiesWithDomainAndPath(
                    ::core::mem::transmute_copy(&name),
                    ::core::mem::transmute_copy(&domain),
                    ::core::mem::transmute_copy(&path),
                )
                .into()
        }
        unsafe extern "system" fn DeleteAllCookies<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CookieManager_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).DeleteAllCookies().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            CreateCookie: CreateCookie::<Identity, Impl, OFFSET>,
            CopyCookie: CopyCookie::<Identity, Impl, OFFSET>,
            GetCookies: GetCookies::<Identity, Impl, OFFSET>,
            AddOrUpdateCookie: AddOrUpdateCookie::<Identity, Impl, OFFSET>,
            DeleteCookie: DeleteCookie::<Identity, Impl, OFFSET>,
            DeleteCookies: DeleteCookies::<Identity, Impl, OFFSET>,
            DeleteCookiesWithDomainAndPath: DeleteCookiesWithDomainAndPath::<Identity, Impl, OFFSET>,
            DeleteAllCookies: DeleteAllCookies::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2CookieManager as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        errorcode: ::windows::core::HRESULT,
        webview: &::core::option::Option<ICoreWebView2CompositionController>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            errorcode: ::windows::core::HRESULT,
            webview: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute_copy(&errorcode),
                    ::core::mem::transmute(&webview),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        errorcode: ::windows::core::HRESULT,
        createdcontroller: &::core::option::Option<ICoreWebView2Controller>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CreateCoreWebView2ControllerCompletedHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            errorcode: ::windows::core::HRESULT,
            createdcontroller: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute_copy(&errorcode),
                    ::core::mem::transmute(&createdcontroller),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2CreateCoreWebView2ControllerCompletedHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        errorcode: ::windows::core::HRESULT,
        createdenvironment: &::core::option::Option<ICoreWebView2Environment>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            errorcode: ::windows::core::HRESULT,
            createdenvironment: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute_copy(&errorcode),
                    ::core::mem::transmute(&createdenvironment),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2CreateCoreWebView2EnvironmentCompletedHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2CursorChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2CompositionController>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2CursorChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2CursorChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2CursorChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2CursorChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2CursorChangedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2DOMContentLoadedEventArgs_Impl: Sized {
    fn NavigationId(&mut self, navigationid: *mut u64) -> ::windows::core::Result<()>;
}
impl ICoreWebView2DOMContentLoadedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2DOMContentLoadedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2DOMContentLoadedEventArgs_Vtbl {
        unsafe extern "system" fn NavigationId<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DOMContentLoadedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            navigationid: *mut u64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .NavigationId(::core::mem::transmute_copy(&navigationid))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            NavigationId: NavigationId::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2DOMContentLoadedEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2DOMContentLoadedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2DOMContentLoadedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2DOMContentLoadedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2DOMContentLoadedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2DOMContentLoadedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DOMContentLoadedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2DOMContentLoadedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Deferral_Impl: Sized {
    fn Complete(&mut self) -> ::windows::core::Result<()>;
}
impl ICoreWebView2Deferral_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Deferral_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Deferral_Vtbl {
        unsafe extern "system" fn Complete<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Deferral_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Complete().into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Complete: Complete::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Deferral as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Impl: Sized {
    fn ParameterObjectAsJson(
        &mut self,
        parameterobjectasjson: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Vtbl {
        unsafe extern "system" fn ParameterObjectAsJson<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DevToolsProtocolEventReceivedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            parameterobjectasjson : * mut super::super::super::super::Windows::Win32::Foundation:: PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ParameterObjectAsJson(::core::mem::transmute_copy(&parameterobjectasjson))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            ParameterObjectAsJson: ParameterObjectAsJson::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2DevToolsProtocolEventReceivedEventArgs < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2DevToolsProtocolEventReceivedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DevToolsProtocolEventReceivedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2DevToolsProtocolEventReceivedEventHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2DevToolsProtocolEventReceiver_Impl: Sized {
    fn DevToolsProtocolEventReceived(
        &mut self,
        handler: &::core::option::Option<ICoreWebView2DevToolsProtocolEventReceivedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveDevToolsProtocolEventReceived(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2DevToolsProtocolEventReceiver_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2DevToolsProtocolEventReceiver_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2DevToolsProtocolEventReceiver_Vtbl {
        unsafe extern "system" fn DevToolsProtocolEventReceived<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DevToolsProtocolEventReceiver_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            handler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .DevToolsProtocolEventReceived(
                    ::core::mem::transmute(&handler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveDevToolsProtocolEventReceived<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DevToolsProtocolEventReceiver_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveDevToolsProtocolEventReceived(::core::mem::transmute_copy(&token))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            DevToolsProtocolEventReceived: DevToolsProtocolEventReceived::<Identity, Impl, OFFSET>,
            RemoveDevToolsProtocolEventReceived: RemoveDevToolsProtocolEventReceived::<
                Identity,
                Impl,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2DevToolsProtocolEventReceiver as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2DocumentTitleChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2DocumentTitleChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2DocumentTitleChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2DocumentTitleChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DocumentTitleChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2DocumentTitleChangedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2DownloadOperation_Impl: Sized {
    fn BytesReceivedChanged(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2BytesReceivedChangedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveBytesReceivedChanged(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn EstimatedEndTimeChanged(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2EstimatedEndTimeChangedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveEstimatedEndTimeChanged(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn StateChanged(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2StateChangedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveStateChanged(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn Uri(
        &mut self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn ContentDisposition(
        &mut self,
        contentdisposition: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn MimeType(
        &mut self,
        mimetype: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn TotalBytesToReceive(&mut self, totalbytestoreceive: *mut i64)
        -> ::windows::core::Result<()>;
    fn BytesReceived(&mut self, bytesreceived: *mut i64) -> ::windows::core::Result<()>;
    fn EstimatedEndTime(
        &mut self,
        estimatedendtime: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn ResultFilePath(
        &mut self,
        resultfilepath: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn State(
        &mut self,
        downloadstate: *mut COREWEBVIEW2_DOWNLOAD_STATE,
    ) -> ::windows::core::Result<()>;
    fn InterruptReason(
        &mut self,
        interruptreason: *mut COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON,
    ) -> ::windows::core::Result<()>;
    fn Cancel(&mut self) -> ::windows::core::Result<()>;
    fn Pause(&mut self) -> ::windows::core::Result<()>;
    fn Resume(&mut self) -> ::windows::core::Result<()>;
    fn CanResume(
        &mut self,
        canresume: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2DownloadOperation_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2DownloadOperation_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2DownloadOperation_Vtbl {
        unsafe extern "system" fn BytesReceivedChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .BytesReceivedChanged(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveBytesReceivedChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveBytesReceivedChanged(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn EstimatedEndTimeChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .EstimatedEndTimeChanged(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveEstimatedEndTimeChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveEstimatedEndTimeChanged(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn StateChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .StateChanged(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveStateChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveStateChanged(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn Uri<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Uri(::core::mem::transmute_copy(&uri)).into()
        }
        unsafe extern "system" fn ContentDisposition<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            contentdisposition: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ContentDisposition(::core::mem::transmute_copy(&contentdisposition))
                .into()
        }
        unsafe extern "system" fn MimeType<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            mimetype: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .MimeType(::core::mem::transmute_copy(&mimetype))
                .into()
        }
        unsafe extern "system" fn TotalBytesToReceive<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            totalbytestoreceive: *mut i64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .TotalBytesToReceive(::core::mem::transmute_copy(&totalbytestoreceive))
                .into()
        }
        unsafe extern "system" fn BytesReceived<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            bytesreceived: *mut i64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .BytesReceived(::core::mem::transmute_copy(&bytesreceived))
                .into()
        }
        unsafe extern "system" fn EstimatedEndTime<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            estimatedendtime: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .EstimatedEndTime(::core::mem::transmute_copy(&estimatedendtime))
                .into()
        }
        unsafe extern "system" fn ResultFilePath<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            resultfilepath: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ResultFilePath(::core::mem::transmute_copy(&resultfilepath))
                .into()
        }
        unsafe extern "system" fn State<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            downloadstate: *mut COREWEBVIEW2_DOWNLOAD_STATE,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .State(::core::mem::transmute_copy(&downloadstate))
                .into()
        }
        unsafe extern "system" fn InterruptReason<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            interruptreason: *mut COREWEBVIEW2_DOWNLOAD_INTERRUPT_REASON,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .InterruptReason(::core::mem::transmute_copy(&interruptreason))
                .into()
        }
        unsafe extern "system" fn Cancel<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Cancel().into()
        }
        unsafe extern "system" fn Pause<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Pause().into()
        }
        unsafe extern "system" fn Resume<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Resume().into()
        }
        unsafe extern "system" fn CanResume<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadOperation_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            canresume: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .CanResume(::core::mem::transmute_copy(&canresume))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            BytesReceivedChanged: BytesReceivedChanged::<Identity, Impl, OFFSET>,
            RemoveBytesReceivedChanged: RemoveBytesReceivedChanged::<Identity, Impl, OFFSET>,
            EstimatedEndTimeChanged: EstimatedEndTimeChanged::<Identity, Impl, OFFSET>,
            RemoveEstimatedEndTimeChanged: RemoveEstimatedEndTimeChanged::<Identity, Impl, OFFSET>,
            StateChanged: StateChanged::<Identity, Impl, OFFSET>,
            RemoveStateChanged: RemoveStateChanged::<Identity, Impl, OFFSET>,
            Uri: Uri::<Identity, Impl, OFFSET>,
            ContentDisposition: ContentDisposition::<Identity, Impl, OFFSET>,
            MimeType: MimeType::<Identity, Impl, OFFSET>,
            TotalBytesToReceive: TotalBytesToReceive::<Identity, Impl, OFFSET>,
            BytesReceived: BytesReceived::<Identity, Impl, OFFSET>,
            EstimatedEndTime: EstimatedEndTime::<Identity, Impl, OFFSET>,
            ResultFilePath: ResultFilePath::<Identity, Impl, OFFSET>,
            State: State::<Identity, Impl, OFFSET>,
            InterruptReason: InterruptReason::<Identity, Impl, OFFSET>,
            Cancel: Cancel::<Identity, Impl, OFFSET>,
            Pause: Pause::<Identity, Impl, OFFSET>,
            Resume: Resume::<Identity, Impl, OFFSET>,
            CanResume: CanResume::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2DownloadOperation as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2DownloadStartingEventArgs_Impl: Sized {
    fn DownloadOperation(&mut self) -> ::windows::core::Result<ICoreWebView2DownloadOperation>;
    fn Cancel(
        &mut self,
        cancel: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetCancel(
        &mut self,
        cancel: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn ResultFilePath(
        &mut self,
        resultfilepath: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn SetResultFilePath(
        &mut self,
        resultfilepath: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Handled(
        &mut self,
        handled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetHandled(
        &mut self,
        handled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn GetDeferral(&mut self) -> ::windows::core::Result<ICoreWebView2Deferral>;
}
impl ICoreWebView2DownloadStartingEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2DownloadStartingEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2DownloadStartingEventArgs_Vtbl {
        unsafe extern "system" fn DownloadOperation<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            downloadoperation: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).DownloadOperation() {
                ::core::result::Result::Ok(ok__) => {
                    *downloadoperation = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Cancel<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            cancel: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Cancel(::core::mem::transmute_copy(&cancel)).into()
        }
        unsafe extern "system" fn SetCancel<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            cancel: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetCancel(::core::mem::transmute_copy(&cancel))
                .into()
        }
        unsafe extern "system" fn ResultFilePath<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            resultfilepath: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ResultFilePath(::core::mem::transmute_copy(&resultfilepath))
                .into()
        }
        unsafe extern "system" fn SetResultFilePath<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            resultfilepath: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetResultFilePath(::core::mem::transmute_copy(&resultfilepath))
                .into()
        }
        unsafe extern "system" fn Handled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            handled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Handled(::core::mem::transmute_copy(&handled))
                .into()
        }
        unsafe extern "system" fn SetHandled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            handled: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetHandled(::core::mem::transmute_copy(&handled))
                .into()
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            deferral: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetDeferral() {
                ::core::result::Result::Ok(ok__) => {
                    *deferral = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            DownloadOperation: DownloadOperation::<Identity, Impl, OFFSET>,
            Cancel: Cancel::<Identity, Impl, OFFSET>,
            SetCancel: SetCancel::<Identity, Impl, OFFSET>,
            ResultFilePath: ResultFilePath::<Identity, Impl, OFFSET>,
            SetResultFilePath: SetResultFilePath::<Identity, Impl, OFFSET>,
            Handled: Handled::<Identity, Impl, OFFSET>,
            SetHandled: SetHandled::<Identity, Impl, OFFSET>,
            GetDeferral: GetDeferral::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2DownloadStartingEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2DownloadStartingEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2DownloadStartingEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2DownloadStartingEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2DownloadStartingEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2DownloadStartingEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2DownloadStartingEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2DownloadStartingEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Environment_Impl: Sized {
    fn CreateCoreWebView2Controller(
        &mut self,
        parentwindow: super::super::super::super::Windows::Win32::Foundation::HWND,
        handler: &::core::option::Option<ICoreWebView2CreateCoreWebView2ControllerCompletedHandler>,
    ) -> ::windows::core::Result<()>;
    fn CreateWebResourceResponse(
        &mut self,
        content: &::core::option::Option<
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        statuscode: i32,
        reasonphrase: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        headers: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceResponse>;
    fn BrowserVersionString(
        &mut self,
        versioninfo: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn NewBrowserVersionAvailable(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2NewBrowserVersionAvailableEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveNewBrowserVersionAvailable(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2Environment_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Environment_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Environment_Vtbl {
        unsafe extern "system" fn CreateCoreWebView2Controller<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Environment_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            parentwindow: super::super::super::super::Windows::Win32::Foundation::HWND,
            handler: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .CreateCoreWebView2Controller(
                    ::core::mem::transmute_copy(&parentwindow),
                    ::core::mem::transmute(&handler),
                )
                .into()
        }
        unsafe extern "system" fn CreateWebResourceResponse<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Environment_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            content: ::windows::core::RawPtr,
            statuscode: i32,
            reasonphrase: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            headers: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            response: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).CreateWebResourceResponse(
                ::core::mem::transmute(&content),
                ::core::mem::transmute_copy(&statuscode),
                ::core::mem::transmute_copy(&reasonphrase),
                ::core::mem::transmute_copy(&headers),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *response = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn BrowserVersionString<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Environment_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            versioninfo: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .BrowserVersionString(::core::mem::transmute_copy(&versioninfo))
                .into()
        }
        unsafe extern "system" fn NewBrowserVersionAvailable<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Environment_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .NewBrowserVersionAvailable(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveNewBrowserVersionAvailable<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Environment_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveNewBrowserVersionAvailable(::core::mem::transmute_copy(&token))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            CreateCoreWebView2Controller: CreateCoreWebView2Controller::<Identity, Impl, OFFSET>,
            CreateWebResourceResponse: CreateWebResourceResponse::<Identity, Impl, OFFSET>,
            BrowserVersionString: BrowserVersionString::<Identity, Impl, OFFSET>,
            NewBrowserVersionAvailable: NewBrowserVersionAvailable::<Identity, Impl, OFFSET>,
            RemoveNewBrowserVersionAvailable: RemoveNewBrowserVersionAvailable::<
                Identity,
                Impl,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Environment as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Environment2_Impl: Sized + ICoreWebView2Environment_Impl {
    fn CreateWebResourceRequest(
        &mut self,
        uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        method: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        postdata: &::core::option::Option<
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
        headers: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<ICoreWebView2WebResourceRequest>;
}
impl ICoreWebView2Environment2_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Environment2_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Environment2_Vtbl {
        unsafe extern "system" fn CreateWebResourceRequest<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Environment2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            method: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            postdata: ::windows::core::RawPtr,
            headers: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            request: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).CreateWebResourceRequest(
                ::core::mem::transmute_copy(&uri),
                ::core::mem::transmute_copy(&method),
                ::core::mem::transmute(&postdata),
                ::core::mem::transmute_copy(&headers),
            ) {
                ::core::result::Result::Ok(ok__) => {
                    *request = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ICoreWebView2Environment_Vtbl::new::<Identity, Impl, OFFSET>(),
            CreateWebResourceRequest: CreateWebResourceRequest::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Environment2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Environment3_Impl:
    Sized + ICoreWebView2Environment_Impl + ICoreWebView2Environment2_Impl
{
    fn CreateCoreWebView2CompositionController(
        &mut self,
        parentwindow: super::super::super::super::Windows::Win32::Foundation::HWND,
        handler: &::core::option::Option<
            ICoreWebView2CreateCoreWebView2CompositionControllerCompletedHandler,
        >,
    ) -> ::windows::core::Result<()>;
    fn CreateCoreWebView2PointerInfo(
        &mut self,
    ) -> ::windows::core::Result<ICoreWebView2PointerInfo>;
}
impl ICoreWebView2Environment3_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Environment3_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Environment3_Vtbl {
        unsafe extern "system" fn CreateCoreWebView2CompositionController<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Environment3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            parentwindow: super::super::super::super::Windows::Win32::Foundation::HWND,
            handler: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .CreateCoreWebView2CompositionController(
                    ::core::mem::transmute_copy(&parentwindow),
                    ::core::mem::transmute(&handler),
                )
                .into()
        }
        unsafe extern "system" fn CreateCoreWebView2PointerInfo<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Environment3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pointerinfo: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).CreateCoreWebView2PointerInfo() {
                ::core::result::Result::Ok(ok__) => {
                    *pointerinfo = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ICoreWebView2Environment2_Vtbl::new::<Identity, Impl, OFFSET>(),
            CreateCoreWebView2CompositionController: CreateCoreWebView2CompositionController::<
                Identity,
                Impl,
                OFFSET,
            >,
            CreateCoreWebView2PointerInfo: CreateCoreWebView2PointerInfo::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Environment3 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment2 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Environment4_Impl:
    Sized
    + ICoreWebView2Environment_Impl
    + ICoreWebView2Environment2_Impl
    + ICoreWebView2Environment3_Impl
{
    fn GetProviderForHwnd(
        &mut self,
        hwnd: super::super::super::super::Windows::Win32::Foundation::HWND,
    ) -> ::windows::core::Result<::windows::core::IUnknown>;
}
impl ICoreWebView2Environment4_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Environment4_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Environment4_Vtbl {
        unsafe extern "system" fn GetProviderForHwnd<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Environment4_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            hwnd: super::super::super::super::Windows::Win32::Foundation::HWND,
            provider: *mut *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetProviderForHwnd(::core::mem::transmute_copy(&hwnd)) {
                ::core::result::Result::Ok(ok__) => {
                    *provider = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ICoreWebView2Environment3_Vtbl::new::<Identity, Impl, OFFSET>(),
            GetProviderForHwnd: GetProviderForHwnd::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Environment4 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment3 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Environment5_Impl:
    Sized
    + ICoreWebView2Environment_Impl
    + ICoreWebView2Environment2_Impl
    + ICoreWebView2Environment3_Impl
    + ICoreWebView2Environment4_Impl
{
    fn BrowserProcessExited(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2BrowserProcessExitedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveBrowserProcessExited(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2Environment5_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Environment5_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Environment5_Vtbl {
        unsafe extern "system" fn BrowserProcessExited<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Environment5_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .BrowserProcessExited(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveBrowserProcessExited<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Environment5_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveBrowserProcessExited(::core::mem::transmute_copy(&token))
                .into()
        }
        Self {
            base: ICoreWebView2Environment4_Vtbl::new::<Identity, Impl, OFFSET>(),
            BrowserProcessExited: BrowserProcessExited::<Identity, Impl, OFFSET>,
            RemoveBrowserProcessExited: RemoveBrowserProcessExited::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Environment5 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment3 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment4 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Environment6_Impl:
    Sized
    + ICoreWebView2Environment_Impl
    + ICoreWebView2Environment2_Impl
    + ICoreWebView2Environment3_Impl
    + ICoreWebView2Environment4_Impl
    + ICoreWebView2Environment5_Impl
{
    fn CreatePrintSettings(&mut self) -> ::windows::core::Result<ICoreWebView2PrintSettings>;
}
impl ICoreWebView2Environment6_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Environment6_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Environment6_Vtbl {
        unsafe extern "system" fn CreatePrintSettings<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Environment6_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            printsettings: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).CreatePrintSettings() {
                ::core::result::Result::Ok(ok__) => {
                    *printsettings = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ICoreWebView2Environment5_Vtbl::new::<Identity, Impl, OFFSET>(),
            CreatePrintSettings: CreatePrintSettings::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Environment6 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment3 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment4 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment5 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Environment7_Impl:
    Sized
    + ICoreWebView2Environment_Impl
    + ICoreWebView2Environment2_Impl
    + ICoreWebView2Environment3_Impl
    + ICoreWebView2Environment4_Impl
    + ICoreWebView2Environment5_Impl
    + ICoreWebView2Environment6_Impl
{
    fn UserDataFolder(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2Environment7_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Environment7_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Environment7_Vtbl {
        unsafe extern "system" fn UserDataFolder<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Environment7_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .UserDataFolder(::core::mem::transmute_copy(&value))
                .into()
        }
        Self {
            base: ICoreWebView2Environment6_Vtbl::new::<Identity, Impl, OFFSET>(),
            UserDataFolder: UserDataFolder::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Environment7 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment3 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment4 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment5 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Environment6 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2EnvironmentOptions_Impl: Sized {
    fn AdditionalBrowserArguments(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn SetAdditionalBrowserArguments(
        &mut self,
        value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Language(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn SetLanguage(
        &mut self,
        value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn TargetCompatibleBrowserVersion(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn SetTargetCompatibleBrowserVersion(
        &mut self,
        value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn AllowSingleSignOnUsingOSPrimaryAccount(
        &mut self,
        allow: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetAllowSingleSignOnUsingOSPrimaryAccount(
        &mut self,
        allow: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2EnvironmentOptions_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2EnvironmentOptions_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2EnvironmentOptions_Vtbl {
        unsafe extern "system" fn AdditionalBrowserArguments<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .AdditionalBrowserArguments(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn SetAdditionalBrowserArguments<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetAdditionalBrowserArguments(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn Language<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Language(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn SetLanguage<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetLanguage(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn TargetCompatibleBrowserVersion<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .TargetCompatibleBrowserVersion(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn SetTargetCompatibleBrowserVersion<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetTargetCompatibleBrowserVersion(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn AllowSingleSignOnUsingOSPrimaryAccount<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            allow: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .AllowSingleSignOnUsingOSPrimaryAccount(::core::mem::transmute_copy(&allow))
                .into()
        }
        unsafe extern "system" fn SetAllowSingleSignOnUsingOSPrimaryAccount<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2EnvironmentOptions_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            allow: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetAllowSingleSignOnUsingOSPrimaryAccount(::core::mem::transmute_copy(&allow))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            AdditionalBrowserArguments: AdditionalBrowserArguments::<Identity, Impl, OFFSET>,
            SetAdditionalBrowserArguments: SetAdditionalBrowserArguments::<Identity, Impl, OFFSET>,
            Language: Language::<Identity, Impl, OFFSET>,
            SetLanguage: SetLanguage::<Identity, Impl, OFFSET>,
            TargetCompatibleBrowserVersion: TargetCompatibleBrowserVersion::<Identity, Impl, OFFSET>,
            SetTargetCompatibleBrowserVersion: SetTargetCompatibleBrowserVersion::<
                Identity,
                Impl,
                OFFSET,
            >,
            AllowSingleSignOnUsingOSPrimaryAccount: AllowSingleSignOnUsingOSPrimaryAccount::<
                Identity,
                Impl,
                OFFSET,
            >,
            SetAllowSingleSignOnUsingOSPrimaryAccount: SetAllowSingleSignOnUsingOSPrimaryAccount::<
                Identity,
                Impl,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2EnvironmentOptions as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2EstimatedEndTimeChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2DownloadOperation>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2EstimatedEndTimeChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2EstimatedEndTimeChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2EstimatedEndTimeChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2EstimatedEndTimeChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2EstimatedEndTimeChangedEventHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2ExecuteScriptCompletedHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        errorcode: ::windows::core::HRESULT,
        resultobjectasjson: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2ExecuteScriptCompletedHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2ExecuteScriptCompletedHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2ExecuteScriptCompletedHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ExecuteScriptCompletedHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            errorcode: ::windows::core::HRESULT,
            resultobjectasjson: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute_copy(&errorcode),
                    ::core::mem::transmute_copy(&resultobjectasjson),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2ExecuteScriptCompletedHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2FocusChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2Controller>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2FocusChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2FocusChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2FocusChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2FocusChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2FocusChangedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Frame_Impl: Sized {
    fn Name(
        &mut self,
        name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn NameChanged(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2FrameNameChangedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveNameChanged(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn AddHostObjectToScriptWithOrigins(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        object: *mut super::super::super::super::Windows::Win32::System::Com::VARIANT,
        originscount: u32,
        origins: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn RemoveHostObjectFromScript(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Destroyed(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2FrameDestroyedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveDestroyed(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn IsDestroyed(
        &mut self,
        destroyed: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2Frame_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Frame_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Frame_Vtbl {
        unsafe extern "system" fn Name<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Frame_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Name(::core::mem::transmute_copy(&name)).into()
        }
        unsafe extern "system" fn NameChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Frame_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .NameChanged(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveNameChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Frame_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveNameChanged(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn AddHostObjectToScriptWithOrigins<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Frame_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            object: *mut super::super::super::super::Windows::Win32::System::Com::VARIANT,
            originscount: u32,
            origins: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .AddHostObjectToScriptWithOrigins(
                    ::core::mem::transmute_copy(&name),
                    ::core::mem::transmute_copy(&object),
                    ::core::mem::transmute_copy(&originscount),
                    ::core::mem::transmute_copy(&origins),
                )
                .into()
        }
        unsafe extern "system" fn RemoveHostObjectFromScript<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Frame_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveHostObjectFromScript(::core::mem::transmute_copy(&name))
                .into()
        }
        unsafe extern "system" fn Destroyed<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Frame_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Destroyed(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveDestroyed<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Frame_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveDestroyed(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn IsDestroyed<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Frame_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            destroyed: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsDestroyed(::core::mem::transmute_copy(&destroyed))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Name: Name::<Identity, Impl, OFFSET>,
            NameChanged: NameChanged::<Identity, Impl, OFFSET>,
            RemoveNameChanged: RemoveNameChanged::<Identity, Impl, OFFSET>,
            AddHostObjectToScriptWithOrigins: AddHostObjectToScriptWithOrigins::<
                Identity,
                Impl,
                OFFSET,
            >,
            RemoveHostObjectFromScript: RemoveHostObjectFromScript::<Identity, Impl, OFFSET>,
            Destroyed: Destroyed::<Identity, Impl, OFFSET>,
            RemoveDestroyed: RemoveDestroyed::<Identity, Impl, OFFSET>,
            IsDestroyed: IsDestroyed::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Frame as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2FrameCreatedEventArgs_Impl: Sized {
    fn Frame(&mut self) -> ::windows::core::Result<ICoreWebView2Frame>;
}
impl ICoreWebView2FrameCreatedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2FrameCreatedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2FrameCreatedEventArgs_Vtbl {
        unsafe extern "system" fn Frame<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2FrameCreatedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            frame: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).Frame() {
                ::core::result::Result::Ok(ok__) => {
                    *frame = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Frame: Frame::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2FrameCreatedEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2FrameCreatedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2FrameCreatedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2FrameCreatedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2FrameCreatedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2FrameCreatedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2FrameCreatedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2FrameCreatedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2FrameDestroyedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2Frame>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2FrameDestroyedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2FrameDestroyedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2FrameDestroyedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2FrameDestroyedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2FrameDestroyedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2FrameInfo_Impl: Sized {
    fn Name(
        &mut self,
        name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Source(
        &mut self,
        source: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2FrameInfo_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2FrameInfo_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2FrameInfo_Vtbl {
        unsafe extern "system" fn Name<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2FrameInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Name(::core::mem::transmute_copy(&name)).into()
        }
        unsafe extern "system" fn Source<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2FrameInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            source: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Source(::core::mem::transmute_copy(&source)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Name: Name::<Identity, Impl, OFFSET>,
            Source: Source::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2FrameInfo as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2FrameInfoCollection_Impl: Sized {
    fn GetIterator(&mut self) -> ::windows::core::Result<ICoreWebView2FrameInfoCollectionIterator>;
}
impl ICoreWebView2FrameInfoCollection_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2FrameInfoCollection_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2FrameInfoCollection_Vtbl {
        unsafe extern "system" fn GetIterator<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2FrameInfoCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            iterator: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetIterator() {
                ::core::result::Result::Ok(ok__) => {
                    *iterator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            GetIterator: GetIterator::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2FrameInfoCollection as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2FrameInfoCollectionIterator_Impl: Sized {
    fn HasCurrent(
        &mut self,
        hascurrent: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn GetCurrent(&mut self) -> ::windows::core::Result<ICoreWebView2FrameInfo>;
    fn MoveNext(
        &mut self,
        hasnext: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2FrameInfoCollectionIterator_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2FrameInfoCollectionIterator_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2FrameInfoCollectionIterator_Vtbl {
        unsafe extern "system" fn HasCurrent<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2FrameInfoCollectionIterator_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            hascurrent: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .HasCurrent(::core::mem::transmute_copy(&hascurrent))
                .into()
        }
        unsafe extern "system" fn GetCurrent<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2FrameInfoCollectionIterator_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            frameinfo: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetCurrent() {
                ::core::result::Result::Ok(ok__) => {
                    *frameinfo = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn MoveNext<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2FrameInfoCollectionIterator_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            hasnext: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .MoveNext(::core::mem::transmute_copy(&hasnext))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            HasCurrent: HasCurrent::<Identity, Impl, OFFSET>,
            GetCurrent: GetCurrent::<Identity, Impl, OFFSET>,
            MoveNext: MoveNext::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2FrameInfoCollectionIterator as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2FrameNameChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2Frame>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2FrameNameChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2FrameNameChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2FrameNameChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2FrameNameChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2FrameNameChangedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2GetCookiesCompletedHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        result: ::windows::core::HRESULT,
        cookielist: &::core::option::Option<ICoreWebView2CookieList>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2GetCookiesCompletedHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2GetCookiesCompletedHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2GetCookiesCompletedHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2GetCookiesCompletedHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            result: ::windows::core::HRESULT,
            cookielist: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute_copy(&result),
                    ::core::mem::transmute(&cookielist),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2GetCookiesCompletedHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2HistoryChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2HistoryChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2HistoryChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2HistoryChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HistoryChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2HistoryChangedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2HttpHeadersCollectionIterator_Impl: Sized {
    fn GetCurrentHeader(
        &mut self,
        name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn HasCurrentHeader(
        &mut self,
        hascurrent: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn MoveNext(
        &mut self,
        hasnext: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2HttpHeadersCollectionIterator_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2HttpHeadersCollectionIterator_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2HttpHeadersCollectionIterator_Vtbl {
        unsafe extern "system" fn GetCurrentHeader<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HttpHeadersCollectionIterator_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .GetCurrentHeader(
                    ::core::mem::transmute_copy(&name),
                    ::core::mem::transmute_copy(&value),
                )
                .into()
        }
        unsafe extern "system" fn HasCurrentHeader<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HttpHeadersCollectionIterator_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            hascurrent: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .HasCurrentHeader(::core::mem::transmute_copy(&hascurrent))
                .into()
        }
        unsafe extern "system" fn MoveNext<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HttpHeadersCollectionIterator_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            hasnext: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .MoveNext(::core::mem::transmute_copy(&hasnext))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            GetCurrentHeader: GetCurrentHeader::<Identity, Impl, OFFSET>,
            HasCurrentHeader: HasCurrentHeader::<Identity, Impl, OFFSET>,
            MoveNext: MoveNext::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2HttpHeadersCollectionIterator as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2HttpRequestHeaders_Impl: Sized {
    fn GetHeader(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn GetHeaders(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<ICoreWebView2HttpHeadersCollectionIterator>;
    fn Contains(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        contains: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetHeader(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn RemoveHeader(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn GetIterator(
        &mut self,
    ) -> ::windows::core::Result<ICoreWebView2HttpHeadersCollectionIterator>;
}
impl ICoreWebView2HttpRequestHeaders_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2HttpRequestHeaders_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2HttpRequestHeaders_Vtbl {
        unsafe extern "system" fn GetHeader<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HttpRequestHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .GetHeader(
                    ::core::mem::transmute_copy(&name),
                    ::core::mem::transmute_copy(&value),
                )
                .into()
        }
        unsafe extern "system" fn GetHeaders<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HttpRequestHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            iterator: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetHeaders(::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *iterator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Contains<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HttpRequestHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            contains: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Contains(
                    ::core::mem::transmute_copy(&name),
                    ::core::mem::transmute_copy(&contains),
                )
                .into()
        }
        unsafe extern "system" fn SetHeader<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HttpRequestHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetHeader(
                    ::core::mem::transmute_copy(&name),
                    ::core::mem::transmute_copy(&value),
                )
                .into()
        }
        unsafe extern "system" fn RemoveHeader<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HttpRequestHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveHeader(::core::mem::transmute_copy(&name))
                .into()
        }
        unsafe extern "system" fn GetIterator<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HttpRequestHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            iterator: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetIterator() {
                ::core::result::Result::Ok(ok__) => {
                    *iterator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            GetHeader: GetHeader::<Identity, Impl, OFFSET>,
            GetHeaders: GetHeaders::<Identity, Impl, OFFSET>,
            Contains: Contains::<Identity, Impl, OFFSET>,
            SetHeader: SetHeader::<Identity, Impl, OFFSET>,
            RemoveHeader: RemoveHeader::<Identity, Impl, OFFSET>,
            GetIterator: GetIterator::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2HttpRequestHeaders as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2HttpResponseHeaders_Impl: Sized {
    fn AppendHeader(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Contains(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        contains: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn GetHeader(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn GetHeaders(
        &mut self,
        name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<ICoreWebView2HttpHeadersCollectionIterator>;
    fn GetIterator(
        &mut self,
    ) -> ::windows::core::Result<ICoreWebView2HttpHeadersCollectionIterator>;
}
impl ICoreWebView2HttpResponseHeaders_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2HttpResponseHeaders_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2HttpResponseHeaders_Vtbl {
        unsafe extern "system" fn AppendHeader<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HttpResponseHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            value: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .AppendHeader(
                    ::core::mem::transmute_copy(&name),
                    ::core::mem::transmute_copy(&value),
                )
                .into()
        }
        unsafe extern "system" fn Contains<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HttpResponseHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            contains: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Contains(
                    ::core::mem::transmute_copy(&name),
                    ::core::mem::transmute_copy(&contains),
                )
                .into()
        }
        unsafe extern "system" fn GetHeader<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HttpResponseHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .GetHeader(
                    ::core::mem::transmute_copy(&name),
                    ::core::mem::transmute_copy(&value),
                )
                .into()
        }
        unsafe extern "system" fn GetHeaders<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HttpResponseHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            name: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            iterator: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetHeaders(::core::mem::transmute_copy(&name)) {
                ::core::result::Result::Ok(ok__) => {
                    *iterator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn GetIterator<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2HttpResponseHeaders_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            iterator: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetIterator() {
                ::core::result::Result::Ok(ok__) => {
                    *iterator = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            AppendHeader: AppendHeader::<Identity, Impl, OFFSET>,
            Contains: Contains::<Identity, Impl, OFFSET>,
            GetHeader: GetHeader::<Identity, Impl, OFFSET>,
            GetHeaders: GetHeaders::<Identity, Impl, OFFSET>,
            GetIterator: GetIterator::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2HttpResponseHeaders as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2IsDocumentPlayingAudioChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2IsDocumentPlayingAudioChangedEventHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2IsMutedChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2IsMutedChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2IsMutedChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2IsMutedChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2IsMutedChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2IsMutedChangedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2MoveFocusRequestedEventArgs_Impl: Sized {
    fn Reason(
        &mut self,
        reason: *mut COREWEBVIEW2_MOVE_FOCUS_REASON,
    ) -> ::windows::core::Result<()>;
    fn Handled(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetHandled(
        &mut self,
        value: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2MoveFocusRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2MoveFocusRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2MoveFocusRequestedEventArgs_Vtbl {
        unsafe extern "system" fn Reason<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2MoveFocusRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            reason: *mut COREWEBVIEW2_MOVE_FOCUS_REASON,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Reason(::core::mem::transmute_copy(&reason)).into()
        }
        unsafe extern "system" fn Handled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2MoveFocusRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Handled(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn SetHandled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2MoveFocusRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetHandled(::core::mem::transmute_copy(&value))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Reason: Reason::<Identity, Impl, OFFSET>,
            Handled: Handled::<Identity, Impl, OFFSET>,
            SetHandled: SetHandled::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2MoveFocusRequestedEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2MoveFocusRequestedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2Controller>,
        args: &::core::option::Option<ICoreWebView2MoveFocusRequestedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2MoveFocusRequestedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2MoveFocusRequestedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2MoveFocusRequestedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2MoveFocusRequestedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2MoveFocusRequestedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2NavigationCompletedEventArgs_Impl: Sized {
    fn IsSuccess(
        &mut self,
        issuccess: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn WebErrorStatus(
        &mut self,
        weberrorstatus: *mut COREWEBVIEW2_WEB_ERROR_STATUS,
    ) -> ::windows::core::Result<()>;
    fn NavigationId(&mut self, navigationid: *mut u64) -> ::windows::core::Result<()>;
}
impl ICoreWebView2NavigationCompletedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2NavigationCompletedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2NavigationCompletedEventArgs_Vtbl {
        unsafe extern "system" fn IsSuccess<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NavigationCompletedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            issuccess: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsSuccess(::core::mem::transmute_copy(&issuccess))
                .into()
        }
        unsafe extern "system" fn WebErrorStatus<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NavigationCompletedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            weberrorstatus: *mut COREWEBVIEW2_WEB_ERROR_STATUS,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .WebErrorStatus(::core::mem::transmute_copy(&weberrorstatus))
                .into()
        }
        unsafe extern "system" fn NavigationId<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NavigationCompletedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            navigationid: *mut u64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .NavigationId(::core::mem::transmute_copy(&navigationid))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            IsSuccess: IsSuccess::<Identity, Impl, OFFSET>,
            WebErrorStatus: WebErrorStatus::<Identity, Impl, OFFSET>,
            NavigationId: NavigationId::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2NavigationCompletedEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2NavigationCompletedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2NavigationCompletedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2NavigationCompletedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2NavigationCompletedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2NavigationCompletedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NavigationCompletedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2NavigationCompletedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2NavigationStartingEventArgs_Impl: Sized {
    fn Uri(
        &mut self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn IsUserInitiated(
        &mut self,
        isuserinitiated: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn IsRedirected(
        &mut self,
        isredirected: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn RequestHeaders(&mut self) -> ::windows::core::Result<ICoreWebView2HttpRequestHeaders>;
    fn Cancel(
        &mut self,
        cancel: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetCancel(
        &mut self,
        cancel: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn NavigationId(&mut self, navigationid: *mut u64) -> ::windows::core::Result<()>;
}
impl ICoreWebView2NavigationStartingEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2NavigationStartingEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2NavigationStartingEventArgs_Vtbl {
        unsafe extern "system" fn Uri<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NavigationStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Uri(::core::mem::transmute_copy(&uri)).into()
        }
        unsafe extern "system" fn IsUserInitiated<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NavigationStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            isuserinitiated: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsUserInitiated(::core::mem::transmute_copy(&isuserinitiated))
                .into()
        }
        unsafe extern "system" fn IsRedirected<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NavigationStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            isredirected: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsRedirected(::core::mem::transmute_copy(&isredirected))
                .into()
        }
        unsafe extern "system" fn RequestHeaders<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NavigationStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            requestheaders: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).RequestHeaders() {
                ::core::result::Result::Ok(ok__) => {
                    *requestheaders = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Cancel<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NavigationStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            cancel: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Cancel(::core::mem::transmute_copy(&cancel)).into()
        }
        unsafe extern "system" fn SetCancel<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NavigationStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            cancel: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetCancel(::core::mem::transmute_copy(&cancel))
                .into()
        }
        unsafe extern "system" fn NavigationId<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NavigationStartingEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            navigationid: *mut u64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .NavigationId(::core::mem::transmute_copy(&navigationid))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Uri: Uri::<Identity, Impl, OFFSET>,
            IsUserInitiated: IsUserInitiated::<Identity, Impl, OFFSET>,
            IsRedirected: IsRedirected::<Identity, Impl, OFFSET>,
            RequestHeaders: RequestHeaders::<Identity, Impl, OFFSET>,
            Cancel: Cancel::<Identity, Impl, OFFSET>,
            SetCancel: SetCancel::<Identity, Impl, OFFSET>,
            NavigationId: NavigationId::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2NavigationStartingEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2NavigationStartingEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2NavigationStartingEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2NavigationStartingEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2NavigationStartingEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2NavigationStartingEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NavigationStartingEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2NavigationStartingEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2NewBrowserVersionAvailableEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2Environment>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2NewBrowserVersionAvailableEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2NewBrowserVersionAvailableEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2NewBrowserVersionAvailableEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NewBrowserVersionAvailableEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2NewBrowserVersionAvailableEventHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2NewWindowRequestedEventArgs_Impl: Sized {
    fn Uri(
        &mut self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn SetNewWindow(
        &mut self,
        newwindow: &::core::option::Option<ICoreWebView2>,
    ) -> ::windows::core::Result<()>;
    fn NewWindow(&mut self) -> ::windows::core::Result<ICoreWebView2>;
    fn SetHandled(
        &mut self,
        handled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn Handled(
        &mut self,
        handled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn IsUserInitiated(
        &mut self,
        isuserinitiated: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn GetDeferral(&mut self) -> ::windows::core::Result<ICoreWebView2Deferral>;
    fn WindowFeatures(&mut self) -> ::windows::core::Result<ICoreWebView2WindowFeatures>;
}
impl ICoreWebView2NewWindowRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2NewWindowRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2NewWindowRequestedEventArgs_Vtbl {
        unsafe extern "system" fn Uri<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Uri(::core::mem::transmute_copy(&uri)).into()
        }
        unsafe extern "system" fn SetNewWindow<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            newwindow: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetNewWindow(::core::mem::transmute(&newwindow))
                .into()
        }
        unsafe extern "system" fn NewWindow<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            newwindow: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).NewWindow() {
                ::core::result::Result::Ok(ok__) => {
                    *newwindow = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetHandled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            handled: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetHandled(::core::mem::transmute_copy(&handled))
                .into()
        }
        unsafe extern "system" fn Handled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            handled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Handled(::core::mem::transmute_copy(&handled))
                .into()
        }
        unsafe extern "system" fn IsUserInitiated<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            isuserinitiated: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsUserInitiated(::core::mem::transmute_copy(&isuserinitiated))
                .into()
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            deferral: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetDeferral() {
                ::core::result::Result::Ok(ok__) => {
                    *deferral = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn WindowFeatures<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NewWindowRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).WindowFeatures() {
                ::core::result::Result::Ok(ok__) => {
                    *value = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Uri: Uri::<Identity, Impl, OFFSET>,
            SetNewWindow: SetNewWindow::<Identity, Impl, OFFSET>,
            NewWindow: NewWindow::<Identity, Impl, OFFSET>,
            SetHandled: SetHandled::<Identity, Impl, OFFSET>,
            Handled: Handled::<Identity, Impl, OFFSET>,
            IsUserInitiated: IsUserInitiated::<Identity, Impl, OFFSET>,
            GetDeferral: GetDeferral::<Identity, Impl, OFFSET>,
            WindowFeatures: WindowFeatures::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2NewWindowRequestedEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2NewWindowRequestedEventArgs2_Impl:
    Sized + ICoreWebView2NewWindowRequestedEventArgs_Impl
{
    fn Name(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2NewWindowRequestedEventArgs2_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2NewWindowRequestedEventArgs2_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2NewWindowRequestedEventArgs2_Vtbl {
        unsafe extern "system" fn Name<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NewWindowRequestedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Name(::core::mem::transmute_copy(&value)).into()
        }
        Self {
            base: ICoreWebView2NewWindowRequestedEventArgs_Vtbl::new::<Identity, Impl, OFFSET>(),
            Name: Name::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2NewWindowRequestedEventArgs2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2NewWindowRequestedEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2NewWindowRequestedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2NewWindowRequestedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2NewWindowRequestedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2NewWindowRequestedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2NewWindowRequestedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2NewWindowRequestedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2NewWindowRequestedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2PermissionRequestedEventArgs_Impl: Sized {
    fn Uri(
        &mut self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn PermissionKind(
        &mut self,
        permissionkind: *mut COREWEBVIEW2_PERMISSION_KIND,
    ) -> ::windows::core::Result<()>;
    fn IsUserInitiated(
        &mut self,
        isuserinitiated: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn State(&mut self, state: *mut COREWEBVIEW2_PERMISSION_STATE) -> ::windows::core::Result<()>;
    fn SetState(&mut self, state: COREWEBVIEW2_PERMISSION_STATE) -> ::windows::core::Result<()>;
    fn GetDeferral(&mut self) -> ::windows::core::Result<ICoreWebView2Deferral>;
}
impl ICoreWebView2PermissionRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2PermissionRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2PermissionRequestedEventArgs_Vtbl {
        unsafe extern "system" fn Uri<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PermissionRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Uri(::core::mem::transmute_copy(&uri)).into()
        }
        unsafe extern "system" fn PermissionKind<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PermissionRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            permissionkind: *mut COREWEBVIEW2_PERMISSION_KIND,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PermissionKind(::core::mem::transmute_copy(&permissionkind))
                .into()
        }
        unsafe extern "system" fn IsUserInitiated<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PermissionRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            isuserinitiated: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsUserInitiated(::core::mem::transmute_copy(&isuserinitiated))
                .into()
        }
        unsafe extern "system" fn State<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PermissionRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            state: *mut COREWEBVIEW2_PERMISSION_STATE,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).State(::core::mem::transmute_copy(&state)).into()
        }
        unsafe extern "system" fn SetState<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PermissionRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            state: COREWEBVIEW2_PERMISSION_STATE,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).SetState(::core::mem::transmute_copy(&state)).into()
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PermissionRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            deferral: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetDeferral() {
                ::core::result::Result::Ok(ok__) => {
                    *deferral = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Uri: Uri::<Identity, Impl, OFFSET>,
            PermissionKind: PermissionKind::<Identity, Impl, OFFSET>,
            IsUserInitiated: IsUserInitiated::<Identity, Impl, OFFSET>,
            State: State::<Identity, Impl, OFFSET>,
            SetState: SetState::<Identity, Impl, OFFSET>,
            GetDeferral: GetDeferral::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2PermissionRequestedEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2PermissionRequestedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2PermissionRequestedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2PermissionRequestedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2PermissionRequestedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2PermissionRequestedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PermissionRequestedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2PermissionRequestedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2PointerInfo_Impl: Sized {
    fn PointerKind(&mut self, pointerkind: *mut u32) -> ::windows::core::Result<()>;
    fn SetPointerKind(&mut self, pointerkind: u32) -> ::windows::core::Result<()>;
    fn PointerId(&mut self, pointerid: *mut u32) -> ::windows::core::Result<()>;
    fn SetPointerId(&mut self, pointerid: u32) -> ::windows::core::Result<()>;
    fn FrameId(&mut self, frameid: *mut u32) -> ::windows::core::Result<()>;
    fn SetFrameId(&mut self, frameid: u32) -> ::windows::core::Result<()>;
    fn PointerFlags(&mut self, pointerflags: *mut u32) -> ::windows::core::Result<()>;
    fn SetPointerFlags(&mut self, pointerflags: u32) -> ::windows::core::Result<()>;
    fn PointerDeviceRect(
        &mut self,
        pointerdevicerect: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()>;
    fn SetPointerDeviceRect(
        &mut self,
        pointerdevicerect: &super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()>;
    fn DisplayRect(
        &mut self,
        displayrect: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()>;
    fn SetDisplayRect(
        &mut self,
        displayrect: &super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()>;
    fn PixelLocation(
        &mut self,
        pixellocation: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()>;
    fn SetPixelLocation(
        &mut self,
        pixellocation: &super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()>;
    fn HimetricLocation(
        &mut self,
        himetriclocation: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()>;
    fn SetHimetricLocation(
        &mut self,
        himetriclocation: &super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()>;
    fn PixelLocationRaw(
        &mut self,
        pixellocationraw: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()>;
    fn SetPixelLocationRaw(
        &mut self,
        pixellocationraw: &super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()>;
    fn HimetricLocationRaw(
        &mut self,
        himetriclocationraw: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()>;
    fn SetHimetricLocationRaw(
        &mut self,
        himetriclocationraw: &super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()>;
    fn Time(&mut self, time: *mut u32) -> ::windows::core::Result<()>;
    fn SetTime(&mut self, time: u32) -> ::windows::core::Result<()>;
    fn HistoryCount(&mut self, historycount: *mut u32) -> ::windows::core::Result<()>;
    fn SetHistoryCount(&mut self, historycount: u32) -> ::windows::core::Result<()>;
    fn InputData(&mut self, inputdata: *mut i32) -> ::windows::core::Result<()>;
    fn SetInputData(&mut self, inputdata: i32) -> ::windows::core::Result<()>;
    fn KeyStates(&mut self, keystates: *mut u32) -> ::windows::core::Result<()>;
    fn SetKeyStates(&mut self, keystates: u32) -> ::windows::core::Result<()>;
    fn PerformanceCount(&mut self, performancecount: *mut u64) -> ::windows::core::Result<()>;
    fn SetPerformanceCount(&mut self, performancecount: u64) -> ::windows::core::Result<()>;
    fn ButtonChangeKind(&mut self, buttonchangekind: *mut i32) -> ::windows::core::Result<()>;
    fn SetButtonChangeKind(&mut self, buttonchangekind: i32) -> ::windows::core::Result<()>;
    fn PenFlags(&mut self, penflags: *mut u32) -> ::windows::core::Result<()>;
    fn SetPenFlags(&mut self, penflags: u32) -> ::windows::core::Result<()>;
    fn PenMask(&mut self, penmask: *mut u32) -> ::windows::core::Result<()>;
    fn SetPenMask(&mut self, penmask: u32) -> ::windows::core::Result<()>;
    fn PenPressure(&mut self, penpressure: *mut u32) -> ::windows::core::Result<()>;
    fn SetPenPressure(&mut self, penpressure: u32) -> ::windows::core::Result<()>;
    fn PenRotation(&mut self, penrotation: *mut u32) -> ::windows::core::Result<()>;
    fn SetPenRotation(&mut self, penrotation: u32) -> ::windows::core::Result<()>;
    fn PenTiltX(&mut self, pentiltx: *mut i32) -> ::windows::core::Result<()>;
    fn SetPenTiltX(&mut self, pentiltx: i32) -> ::windows::core::Result<()>;
    fn PenTiltY(&mut self, pentilty: *mut i32) -> ::windows::core::Result<()>;
    fn SetPenTiltY(&mut self, pentilty: i32) -> ::windows::core::Result<()>;
    fn TouchFlags(&mut self, touchflags: *mut u32) -> ::windows::core::Result<()>;
    fn SetTouchFlags(&mut self, touchflags: u32) -> ::windows::core::Result<()>;
    fn TouchMask(&mut self, touchmask: *mut u32) -> ::windows::core::Result<()>;
    fn SetTouchMask(&mut self, touchmask: u32) -> ::windows::core::Result<()>;
    fn TouchContact(
        &mut self,
        touchcontact: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()>;
    fn SetTouchContact(
        &mut self,
        touchcontact: &super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()>;
    fn TouchContactRaw(
        &mut self,
        touchcontactraw: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()>;
    fn SetTouchContactRaw(
        &mut self,
        touchcontactraw: &super::super::super::super::Windows::Win32::Foundation::RECT,
    ) -> ::windows::core::Result<()>;
    fn TouchOrientation(&mut self, touchorientation: *mut u32) -> ::windows::core::Result<()>;
    fn SetTouchOrientation(&mut self, touchorientation: u32) -> ::windows::core::Result<()>;
    fn TouchPressure(&mut self, touchpressure: *mut u32) -> ::windows::core::Result<()>;
    fn SetTouchPressure(&mut self, touchpressure: u32) -> ::windows::core::Result<()>;
}
impl ICoreWebView2PointerInfo_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2PointerInfo_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2PointerInfo_Vtbl {
        unsafe extern "system" fn PointerKind<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pointerkind: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PointerKind(::core::mem::transmute_copy(&pointerkind))
                .into()
        }
        unsafe extern "system" fn SetPointerKind<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pointerkind: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPointerKind(::core::mem::transmute_copy(&pointerkind))
                .into()
        }
        unsafe extern "system" fn PointerId<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pointerid: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PointerId(::core::mem::transmute_copy(&pointerid))
                .into()
        }
        unsafe extern "system" fn SetPointerId<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pointerid: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPointerId(::core::mem::transmute_copy(&pointerid))
                .into()
        }
        unsafe extern "system" fn FrameId<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            frameid: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .FrameId(::core::mem::transmute_copy(&frameid))
                .into()
        }
        unsafe extern "system" fn SetFrameId<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            frameid: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetFrameId(::core::mem::transmute_copy(&frameid))
                .into()
        }
        unsafe extern "system" fn PointerFlags<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pointerflags: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PointerFlags(::core::mem::transmute_copy(&pointerflags))
                .into()
        }
        unsafe extern "system" fn SetPointerFlags<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pointerflags: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPointerFlags(::core::mem::transmute_copy(&pointerflags))
                .into()
        }
        unsafe extern "system" fn PointerDeviceRect<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pointerdevicerect: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PointerDeviceRect(::core::mem::transmute_copy(&pointerdevicerect))
                .into()
        }
        unsafe extern "system" fn SetPointerDeviceRect<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pointerdevicerect: super::super::super::super::Windows::Win32::Foundation::RECT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPointerDeviceRect(::core::mem::transmute_copy(&pointerdevicerect))
                .into()
        }
        unsafe extern "system" fn DisplayRect<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            displayrect: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .DisplayRect(::core::mem::transmute_copy(&displayrect))
                .into()
        }
        unsafe extern "system" fn SetDisplayRect<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            displayrect: super::super::super::super::Windows::Win32::Foundation::RECT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetDisplayRect(::core::mem::transmute_copy(&displayrect))
                .into()
        }
        unsafe extern "system" fn PixelLocation<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pixellocation: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PixelLocation(::core::mem::transmute_copy(&pixellocation))
                .into()
        }
        unsafe extern "system" fn SetPixelLocation<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pixellocation: super::super::super::super::Windows::Win32::Foundation::POINT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPixelLocation(::core::mem::transmute_copy(&pixellocation))
                .into()
        }
        unsafe extern "system" fn HimetricLocation<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            himetriclocation: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .HimetricLocation(::core::mem::transmute_copy(&himetriclocation))
                .into()
        }
        unsafe extern "system" fn SetHimetricLocation<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            himetriclocation: super::super::super::super::Windows::Win32::Foundation::POINT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetHimetricLocation(::core::mem::transmute_copy(&himetriclocation))
                .into()
        }
        unsafe extern "system" fn PixelLocationRaw<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pixellocationraw: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PixelLocationRaw(::core::mem::transmute_copy(&pixellocationraw))
                .into()
        }
        unsafe extern "system" fn SetPixelLocationRaw<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pixellocationraw: super::super::super::super::Windows::Win32::Foundation::POINT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPixelLocationRaw(::core::mem::transmute_copy(&pixellocationraw))
                .into()
        }
        unsafe extern "system" fn HimetricLocationRaw<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            himetriclocationraw: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .HimetricLocationRaw(::core::mem::transmute_copy(&himetriclocationraw))
                .into()
        }
        unsafe extern "system" fn SetHimetricLocationRaw<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            himetriclocationraw: super::super::super::super::Windows::Win32::Foundation::POINT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetHimetricLocationRaw(::core::mem::transmute_copy(&himetriclocationraw))
                .into()
        }
        unsafe extern "system" fn Time<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            time: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Time(::core::mem::transmute_copy(&time)).into()
        }
        unsafe extern "system" fn SetTime<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            time: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).SetTime(::core::mem::transmute_copy(&time)).into()
        }
        unsafe extern "system" fn HistoryCount<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            historycount: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .HistoryCount(::core::mem::transmute_copy(&historycount))
                .into()
        }
        unsafe extern "system" fn SetHistoryCount<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            historycount: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetHistoryCount(::core::mem::transmute_copy(&historycount))
                .into()
        }
        unsafe extern "system" fn InputData<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            inputdata: *mut i32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .InputData(::core::mem::transmute_copy(&inputdata))
                .into()
        }
        unsafe extern "system" fn SetInputData<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            inputdata: i32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetInputData(::core::mem::transmute_copy(&inputdata))
                .into()
        }
        unsafe extern "system" fn KeyStates<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            keystates: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .KeyStates(::core::mem::transmute_copy(&keystates))
                .into()
        }
        unsafe extern "system" fn SetKeyStates<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            keystates: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetKeyStates(::core::mem::transmute_copy(&keystates))
                .into()
        }
        unsafe extern "system" fn PerformanceCount<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            performancecount: *mut u64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PerformanceCount(::core::mem::transmute_copy(&performancecount))
                .into()
        }
        unsafe extern "system" fn SetPerformanceCount<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            performancecount: u64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPerformanceCount(::core::mem::transmute_copy(&performancecount))
                .into()
        }
        unsafe extern "system" fn ButtonChangeKind<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            buttonchangekind: *mut i32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ButtonChangeKind(::core::mem::transmute_copy(&buttonchangekind))
                .into()
        }
        unsafe extern "system" fn SetButtonChangeKind<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            buttonchangekind: i32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetButtonChangeKind(::core::mem::transmute_copy(&buttonchangekind))
                .into()
        }
        unsafe extern "system" fn PenFlags<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            penflags: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PenFlags(::core::mem::transmute_copy(&penflags))
                .into()
        }
        unsafe extern "system" fn SetPenFlags<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            penflags: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPenFlags(::core::mem::transmute_copy(&penflags))
                .into()
        }
        unsafe extern "system" fn PenMask<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            penmask: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PenMask(::core::mem::transmute_copy(&penmask))
                .into()
        }
        unsafe extern "system" fn SetPenMask<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            penmask: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPenMask(::core::mem::transmute_copy(&penmask))
                .into()
        }
        unsafe extern "system" fn PenPressure<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            penpressure: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PenPressure(::core::mem::transmute_copy(&penpressure))
                .into()
        }
        unsafe extern "system" fn SetPenPressure<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            penpressure: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPenPressure(::core::mem::transmute_copy(&penpressure))
                .into()
        }
        unsafe extern "system" fn PenRotation<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            penrotation: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PenRotation(::core::mem::transmute_copy(&penrotation))
                .into()
        }
        unsafe extern "system" fn SetPenRotation<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            penrotation: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPenRotation(::core::mem::transmute_copy(&penrotation))
                .into()
        }
        unsafe extern "system" fn PenTiltX<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pentiltx: *mut i32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PenTiltX(::core::mem::transmute_copy(&pentiltx))
                .into()
        }
        unsafe extern "system" fn SetPenTiltX<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pentiltx: i32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPenTiltX(::core::mem::transmute_copy(&pentiltx))
                .into()
        }
        unsafe extern "system" fn PenTiltY<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pentilty: *mut i32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PenTiltY(::core::mem::transmute_copy(&pentilty))
                .into()
        }
        unsafe extern "system" fn SetPenTiltY<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pentilty: i32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPenTiltY(::core::mem::transmute_copy(&pentilty))
                .into()
        }
        unsafe extern "system" fn TouchFlags<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            touchflags: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .TouchFlags(::core::mem::transmute_copy(&touchflags))
                .into()
        }
        unsafe extern "system" fn SetTouchFlags<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            touchflags: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetTouchFlags(::core::mem::transmute_copy(&touchflags))
                .into()
        }
        unsafe extern "system" fn TouchMask<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            touchmask: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .TouchMask(::core::mem::transmute_copy(&touchmask))
                .into()
        }
        unsafe extern "system" fn SetTouchMask<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            touchmask: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetTouchMask(::core::mem::transmute_copy(&touchmask))
                .into()
        }
        unsafe extern "system" fn TouchContact<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            touchcontact: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .TouchContact(::core::mem::transmute_copy(&touchcontact))
                .into()
        }
        unsafe extern "system" fn SetTouchContact<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            touchcontact: super::super::super::super::Windows::Win32::Foundation::RECT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetTouchContact(::core::mem::transmute_copy(&touchcontact))
                .into()
        }
        unsafe extern "system" fn TouchContactRaw<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            touchcontactraw: *mut super::super::super::super::Windows::Win32::Foundation::RECT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .TouchContactRaw(::core::mem::transmute_copy(&touchcontactraw))
                .into()
        }
        unsafe extern "system" fn SetTouchContactRaw<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            touchcontactraw: super::super::super::super::Windows::Win32::Foundation::RECT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetTouchContactRaw(::core::mem::transmute_copy(&touchcontactraw))
                .into()
        }
        unsafe extern "system" fn TouchOrientation<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            touchorientation: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .TouchOrientation(::core::mem::transmute_copy(&touchorientation))
                .into()
        }
        unsafe extern "system" fn SetTouchOrientation<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            touchorientation: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetTouchOrientation(::core::mem::transmute_copy(&touchorientation))
                .into()
        }
        unsafe extern "system" fn TouchPressure<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            touchpressure: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .TouchPressure(::core::mem::transmute_copy(&touchpressure))
                .into()
        }
        unsafe extern "system" fn SetTouchPressure<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PointerInfo_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            touchpressure: u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetTouchPressure(::core::mem::transmute_copy(&touchpressure))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            PointerKind: PointerKind::<Identity, Impl, OFFSET>,
            SetPointerKind: SetPointerKind::<Identity, Impl, OFFSET>,
            PointerId: PointerId::<Identity, Impl, OFFSET>,
            SetPointerId: SetPointerId::<Identity, Impl, OFFSET>,
            FrameId: FrameId::<Identity, Impl, OFFSET>,
            SetFrameId: SetFrameId::<Identity, Impl, OFFSET>,
            PointerFlags: PointerFlags::<Identity, Impl, OFFSET>,
            SetPointerFlags: SetPointerFlags::<Identity, Impl, OFFSET>,
            PointerDeviceRect: PointerDeviceRect::<Identity, Impl, OFFSET>,
            SetPointerDeviceRect: SetPointerDeviceRect::<Identity, Impl, OFFSET>,
            DisplayRect: DisplayRect::<Identity, Impl, OFFSET>,
            SetDisplayRect: SetDisplayRect::<Identity, Impl, OFFSET>,
            PixelLocation: PixelLocation::<Identity, Impl, OFFSET>,
            SetPixelLocation: SetPixelLocation::<Identity, Impl, OFFSET>,
            HimetricLocation: HimetricLocation::<Identity, Impl, OFFSET>,
            SetHimetricLocation: SetHimetricLocation::<Identity, Impl, OFFSET>,
            PixelLocationRaw: PixelLocationRaw::<Identity, Impl, OFFSET>,
            SetPixelLocationRaw: SetPixelLocationRaw::<Identity, Impl, OFFSET>,
            HimetricLocationRaw: HimetricLocationRaw::<Identity, Impl, OFFSET>,
            SetHimetricLocationRaw: SetHimetricLocationRaw::<Identity, Impl, OFFSET>,
            Time: Time::<Identity, Impl, OFFSET>,
            SetTime: SetTime::<Identity, Impl, OFFSET>,
            HistoryCount: HistoryCount::<Identity, Impl, OFFSET>,
            SetHistoryCount: SetHistoryCount::<Identity, Impl, OFFSET>,
            InputData: InputData::<Identity, Impl, OFFSET>,
            SetInputData: SetInputData::<Identity, Impl, OFFSET>,
            KeyStates: KeyStates::<Identity, Impl, OFFSET>,
            SetKeyStates: SetKeyStates::<Identity, Impl, OFFSET>,
            PerformanceCount: PerformanceCount::<Identity, Impl, OFFSET>,
            SetPerformanceCount: SetPerformanceCount::<Identity, Impl, OFFSET>,
            ButtonChangeKind: ButtonChangeKind::<Identity, Impl, OFFSET>,
            SetButtonChangeKind: SetButtonChangeKind::<Identity, Impl, OFFSET>,
            PenFlags: PenFlags::<Identity, Impl, OFFSET>,
            SetPenFlags: SetPenFlags::<Identity, Impl, OFFSET>,
            PenMask: PenMask::<Identity, Impl, OFFSET>,
            SetPenMask: SetPenMask::<Identity, Impl, OFFSET>,
            PenPressure: PenPressure::<Identity, Impl, OFFSET>,
            SetPenPressure: SetPenPressure::<Identity, Impl, OFFSET>,
            PenRotation: PenRotation::<Identity, Impl, OFFSET>,
            SetPenRotation: SetPenRotation::<Identity, Impl, OFFSET>,
            PenTiltX: PenTiltX::<Identity, Impl, OFFSET>,
            SetPenTiltX: SetPenTiltX::<Identity, Impl, OFFSET>,
            PenTiltY: PenTiltY::<Identity, Impl, OFFSET>,
            SetPenTiltY: SetPenTiltY::<Identity, Impl, OFFSET>,
            TouchFlags: TouchFlags::<Identity, Impl, OFFSET>,
            SetTouchFlags: SetTouchFlags::<Identity, Impl, OFFSET>,
            TouchMask: TouchMask::<Identity, Impl, OFFSET>,
            SetTouchMask: SetTouchMask::<Identity, Impl, OFFSET>,
            TouchContact: TouchContact::<Identity, Impl, OFFSET>,
            SetTouchContact: SetTouchContact::<Identity, Impl, OFFSET>,
            TouchContactRaw: TouchContactRaw::<Identity, Impl, OFFSET>,
            SetTouchContactRaw: SetTouchContactRaw::<Identity, Impl, OFFSET>,
            TouchOrientation: TouchOrientation::<Identity, Impl, OFFSET>,
            SetTouchOrientation: SetTouchOrientation::<Identity, Impl, OFFSET>,
            TouchPressure: TouchPressure::<Identity, Impl, OFFSET>,
            SetTouchPressure: SetTouchPressure::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2PointerInfo as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2PrintSettings_Impl: Sized {
    fn Orientation(
        &mut self,
        orientation: *mut COREWEBVIEW2_PRINT_ORIENTATION,
    ) -> ::windows::core::Result<()>;
    fn SetOrientation(
        &mut self,
        orientation: COREWEBVIEW2_PRINT_ORIENTATION,
    ) -> ::windows::core::Result<()>;
    fn ScaleFactor(&mut self, scalefactor: *mut f64) -> ::windows::core::Result<()>;
    fn SetScaleFactor(&mut self, scalefactor: f64) -> ::windows::core::Result<()>;
    fn PageWidth(&mut self, pagewidth: *mut f64) -> ::windows::core::Result<()>;
    fn SetPageWidth(&mut self, pagewidth: f64) -> ::windows::core::Result<()>;
    fn PageHeight(&mut self, pageheight: *mut f64) -> ::windows::core::Result<()>;
    fn SetPageHeight(&mut self, pageheight: f64) -> ::windows::core::Result<()>;
    fn MarginTop(&mut self, margintop: *mut f64) -> ::windows::core::Result<()>;
    fn SetMarginTop(&mut self, margintop: f64) -> ::windows::core::Result<()>;
    fn MarginBottom(&mut self, marginbottom: *mut f64) -> ::windows::core::Result<()>;
    fn SetMarginBottom(&mut self, marginbottom: f64) -> ::windows::core::Result<()>;
    fn MarginLeft(&mut self, marginleft: *mut f64) -> ::windows::core::Result<()>;
    fn SetMarginLeft(&mut self, marginleft: f64) -> ::windows::core::Result<()>;
    fn MarginRight(&mut self, marginright: *mut f64) -> ::windows::core::Result<()>;
    fn SetMarginRight(&mut self, marginright: f64) -> ::windows::core::Result<()>;
    fn ShouldPrintBackgrounds(
        &mut self,
        shouldprintbackgrounds: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetShouldPrintBackgrounds(
        &mut self,
        shouldprintbackgrounds: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn ShouldPrintSelectionOnly(
        &mut self,
        shouldprintselectiononly: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetShouldPrintSelectionOnly(
        &mut self,
        shouldprintselectiononly: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn ShouldPrintHeaderAndFooter(
        &mut self,
        shouldprintheaderandfooter : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetShouldPrintHeaderAndFooter(
        &mut self,
        shouldprintheaderandfooter: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn HeaderTitle(
        &mut self,
        headertitle: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn SetHeaderTitle(
        &mut self,
        headertitle: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn FooterUri(
        &mut self,
        footeruri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn SetFooterUri(
        &mut self,
        footeruri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2PrintSettings_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2PrintSettings_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2PrintSettings_Vtbl {
        unsafe extern "system" fn Orientation<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            orientation: *mut COREWEBVIEW2_PRINT_ORIENTATION,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Orientation(::core::mem::transmute_copy(&orientation))
                .into()
        }
        unsafe extern "system" fn SetOrientation<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            orientation: COREWEBVIEW2_PRINT_ORIENTATION,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetOrientation(::core::mem::transmute_copy(&orientation))
                .into()
        }
        unsafe extern "system" fn ScaleFactor<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            scalefactor: *mut f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ScaleFactor(::core::mem::transmute_copy(&scalefactor))
                .into()
        }
        unsafe extern "system" fn SetScaleFactor<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            scalefactor: f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetScaleFactor(::core::mem::transmute_copy(&scalefactor))
                .into()
        }
        unsafe extern "system" fn PageWidth<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pagewidth: *mut f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PageWidth(::core::mem::transmute_copy(&pagewidth))
                .into()
        }
        unsafe extern "system" fn SetPageWidth<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pagewidth: f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPageWidth(::core::mem::transmute_copy(&pagewidth))
                .into()
        }
        unsafe extern "system" fn PageHeight<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pageheight: *mut f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PageHeight(::core::mem::transmute_copy(&pageheight))
                .into()
        }
        unsafe extern "system" fn SetPageHeight<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            pageheight: f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetPageHeight(::core::mem::transmute_copy(&pageheight))
                .into()
        }
        unsafe extern "system" fn MarginTop<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            margintop: *mut f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .MarginTop(::core::mem::transmute_copy(&margintop))
                .into()
        }
        unsafe extern "system" fn SetMarginTop<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            margintop: f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetMarginTop(::core::mem::transmute_copy(&margintop))
                .into()
        }
        unsafe extern "system" fn MarginBottom<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            marginbottom: *mut f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .MarginBottom(::core::mem::transmute_copy(&marginbottom))
                .into()
        }
        unsafe extern "system" fn SetMarginBottom<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            marginbottom: f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetMarginBottom(::core::mem::transmute_copy(&marginbottom))
                .into()
        }
        unsafe extern "system" fn MarginLeft<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            marginleft: *mut f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .MarginLeft(::core::mem::transmute_copy(&marginleft))
                .into()
        }
        unsafe extern "system" fn SetMarginLeft<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            marginleft: f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetMarginLeft(::core::mem::transmute_copy(&marginleft))
                .into()
        }
        unsafe extern "system" fn MarginRight<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            marginright: *mut f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .MarginRight(::core::mem::transmute_copy(&marginright))
                .into()
        }
        unsafe extern "system" fn SetMarginRight<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            marginright: f64,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetMarginRight(::core::mem::transmute_copy(&marginright))
                .into()
        }
        unsafe extern "system" fn ShouldPrintBackgrounds<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            shouldprintbackgrounds : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ShouldPrintBackgrounds(::core::mem::transmute_copy(&shouldprintbackgrounds))
                .into()
        }
        unsafe extern "system" fn SetShouldPrintBackgrounds<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            shouldprintbackgrounds: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetShouldPrintBackgrounds(::core::mem::transmute_copy(&shouldprintbackgrounds))
                .into()
        }
        unsafe extern "system" fn ShouldPrintSelectionOnly<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            shouldprintselectiononly : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ShouldPrintSelectionOnly(::core::mem::transmute_copy(&shouldprintselectiononly))
                .into()
        }
        unsafe extern "system" fn SetShouldPrintSelectionOnly<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            shouldprintselectiononly: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetShouldPrintSelectionOnly(::core::mem::transmute_copy(&shouldprintselectiononly))
                .into()
        }
        unsafe extern "system" fn ShouldPrintHeaderAndFooter<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            shouldprintheaderandfooter : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ShouldPrintHeaderAndFooter(::core::mem::transmute_copy(
                    &shouldprintheaderandfooter,
                ))
                .into()
        }
        unsafe extern "system" fn SetShouldPrintHeaderAndFooter<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            shouldprintheaderandfooter : super::super::super::super::Windows::Win32::Foundation:: BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetShouldPrintHeaderAndFooter(::core::mem::transmute_copy(
                    &shouldprintheaderandfooter,
                ))
                .into()
        }
        unsafe extern "system" fn HeaderTitle<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            headertitle: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .HeaderTitle(::core::mem::transmute_copy(&headertitle))
                .into()
        }
        unsafe extern "system" fn SetHeaderTitle<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            headertitle: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetHeaderTitle(::core::mem::transmute_copy(&headertitle))
                .into()
        }
        unsafe extern "system" fn FooterUri<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            footeruri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .FooterUri(::core::mem::transmute_copy(&footeruri))
                .into()
        }
        unsafe extern "system" fn SetFooterUri<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintSettings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            footeruri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetFooterUri(::core::mem::transmute_copy(&footeruri))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Orientation: Orientation::<Identity, Impl, OFFSET>,
            SetOrientation: SetOrientation::<Identity, Impl, OFFSET>,
            ScaleFactor: ScaleFactor::<Identity, Impl, OFFSET>,
            SetScaleFactor: SetScaleFactor::<Identity, Impl, OFFSET>,
            PageWidth: PageWidth::<Identity, Impl, OFFSET>,
            SetPageWidth: SetPageWidth::<Identity, Impl, OFFSET>,
            PageHeight: PageHeight::<Identity, Impl, OFFSET>,
            SetPageHeight: SetPageHeight::<Identity, Impl, OFFSET>,
            MarginTop: MarginTop::<Identity, Impl, OFFSET>,
            SetMarginTop: SetMarginTop::<Identity, Impl, OFFSET>,
            MarginBottom: MarginBottom::<Identity, Impl, OFFSET>,
            SetMarginBottom: SetMarginBottom::<Identity, Impl, OFFSET>,
            MarginLeft: MarginLeft::<Identity, Impl, OFFSET>,
            SetMarginLeft: SetMarginLeft::<Identity, Impl, OFFSET>,
            MarginRight: MarginRight::<Identity, Impl, OFFSET>,
            SetMarginRight: SetMarginRight::<Identity, Impl, OFFSET>,
            ShouldPrintBackgrounds: ShouldPrintBackgrounds::<Identity, Impl, OFFSET>,
            SetShouldPrintBackgrounds: SetShouldPrintBackgrounds::<Identity, Impl, OFFSET>,
            ShouldPrintSelectionOnly: ShouldPrintSelectionOnly::<Identity, Impl, OFFSET>,
            SetShouldPrintSelectionOnly: SetShouldPrintSelectionOnly::<Identity, Impl, OFFSET>,
            ShouldPrintHeaderAndFooter: ShouldPrintHeaderAndFooter::<Identity, Impl, OFFSET>,
            SetShouldPrintHeaderAndFooter: SetShouldPrintHeaderAndFooter::<Identity, Impl, OFFSET>,
            HeaderTitle: HeaderTitle::<Identity, Impl, OFFSET>,
            SetHeaderTitle: SetHeaderTitle::<Identity, Impl, OFFSET>,
            FooterUri: FooterUri::<Identity, Impl, OFFSET>,
            SetFooterUri: SetFooterUri::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2PrintSettings as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2PrintToPdfCompletedHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        errorcode: ::windows::core::HRESULT,
        issuccessful: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2PrintToPdfCompletedHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2PrintToPdfCompletedHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2PrintToPdfCompletedHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2PrintToPdfCompletedHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            errorcode: ::windows::core::HRESULT,
            issuccessful: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute_copy(&errorcode),
                    ::core::mem::transmute_copy(&issuccessful),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2PrintToPdfCompletedHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2ProcessFailedEventArgs_Impl: Sized {
    fn ProcessFailedKind(
        &mut self,
        processfailedkind: *mut COREWEBVIEW2_PROCESS_FAILED_KIND,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2ProcessFailedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2ProcessFailedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2ProcessFailedEventArgs_Vtbl {
        unsafe extern "system" fn ProcessFailedKind<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ProcessFailedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            processfailedkind: *mut COREWEBVIEW2_PROCESS_FAILED_KIND,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ProcessFailedKind(::core::mem::transmute_copy(&processfailedkind))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            ProcessFailedKind: ProcessFailedKind::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2ProcessFailedEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2ProcessFailedEventArgs2_Impl:
    Sized + ICoreWebView2ProcessFailedEventArgs_Impl
{
    fn Reason(
        &mut self,
        reason: *mut COREWEBVIEW2_PROCESS_FAILED_REASON,
    ) -> ::windows::core::Result<()>;
    fn ExitCode(&mut self, exitcode: *mut i32) -> ::windows::core::Result<()>;
    fn ProcessDescription(
        &mut self,
        processdescription: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn FrameInfosForFailedProcess(
        &mut self,
    ) -> ::windows::core::Result<ICoreWebView2FrameInfoCollection>;
}
impl ICoreWebView2ProcessFailedEventArgs2_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2ProcessFailedEventArgs2_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2ProcessFailedEventArgs2_Vtbl {
        unsafe extern "system" fn Reason<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ProcessFailedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            reason: *mut COREWEBVIEW2_PROCESS_FAILED_REASON,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Reason(::core::mem::transmute_copy(&reason)).into()
        }
        unsafe extern "system" fn ExitCode<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ProcessFailedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            exitcode: *mut i32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ExitCode(::core::mem::transmute_copy(&exitcode))
                .into()
        }
        unsafe extern "system" fn ProcessDescription<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ProcessFailedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            processdescription: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ProcessDescription(::core::mem::transmute_copy(&processdescription))
                .into()
        }
        unsafe extern "system" fn FrameInfosForFailedProcess<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ProcessFailedEventArgs2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            frames: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).FrameInfosForFailedProcess() {
                ::core::result::Result::Ok(ok__) => {
                    *frames = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ICoreWebView2ProcessFailedEventArgs_Vtbl::new::<Identity, Impl, OFFSET>(),
            Reason: Reason::<Identity, Impl, OFFSET>,
            ExitCode: ExitCode::<Identity, Impl, OFFSET>,
            ProcessDescription: ProcessDescription::<Identity, Impl, OFFSET>,
            FrameInfosForFailedProcess: FrameInfosForFailedProcess::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2ProcessFailedEventArgs2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2ProcessFailedEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2ProcessFailedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2ProcessFailedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2ProcessFailedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2ProcessFailedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2ProcessFailedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ProcessFailedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2ProcessFailedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2RasterizationScaleChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2Controller>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2RasterizationScaleChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2RasterizationScaleChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2RasterizationScaleChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2RasterizationScaleChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2RasterizationScaleChangedEventHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2ScriptDialogOpeningEventArgs_Impl: Sized {
    fn Uri(
        &mut self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Kind(&mut self, kind: *mut COREWEBVIEW2_SCRIPT_DIALOG_KIND) -> ::windows::core::Result<()>;
    fn Message(
        &mut self,
        message: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Accept(&mut self) -> ::windows::core::Result<()>;
    fn DefaultText(
        &mut self,
        defaulttext: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn ResultText(
        &mut self,
        resulttext: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn SetResultText(
        &mut self,
        resulttext: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn GetDeferral(&mut self) -> ::windows::core::Result<ICoreWebView2Deferral>;
}
impl ICoreWebView2ScriptDialogOpeningEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2ScriptDialogOpeningEventArgs_Vtbl {
        unsafe extern "system" fn Uri<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Uri(::core::mem::transmute_copy(&uri)).into()
        }
        unsafe extern "system" fn Kind<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            kind: *mut COREWEBVIEW2_SCRIPT_DIALOG_KIND,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Kind(::core::mem::transmute_copy(&kind)).into()
        }
        unsafe extern "system" fn Message<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            message: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Message(::core::mem::transmute_copy(&message))
                .into()
        }
        unsafe extern "system" fn Accept<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Accept().into()
        }
        unsafe extern "system" fn DefaultText<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            defaulttext: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .DefaultText(::core::mem::transmute_copy(&defaulttext))
                .into()
        }
        unsafe extern "system" fn ResultText<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            resulttext: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ResultText(::core::mem::transmute_copy(&resulttext))
                .into()
        }
        unsafe extern "system" fn SetResultText<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            resulttext: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetResultText(::core::mem::transmute_copy(&resulttext))
                .into()
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ScriptDialogOpeningEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            deferral: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetDeferral() {
                ::core::result::Result::Ok(ok__) => {
                    *deferral = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Uri: Uri::<Identity, Impl, OFFSET>,
            Kind: Kind::<Identity, Impl, OFFSET>,
            Message: Message::<Identity, Impl, OFFSET>,
            Accept: Accept::<Identity, Impl, OFFSET>,
            DefaultText: DefaultText::<Identity, Impl, OFFSET>,
            ResultText: ResultText::<Identity, Impl, OFFSET>,
            SetResultText: SetResultText::<Identity, Impl, OFFSET>,
            GetDeferral: GetDeferral::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2ScriptDialogOpeningEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2ScriptDialogOpeningEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2ScriptDialogOpeningEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2ScriptDialogOpeningEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2ScriptDialogOpeningEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2ScriptDialogOpeningEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ScriptDialogOpeningEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2ScriptDialogOpeningEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Settings_Impl: Sized {
    fn IsScriptEnabled(
        &mut self,
        isscriptenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetIsScriptEnabled(
        &mut self,
        isscriptenabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn IsWebMessageEnabled(
        &mut self,
        iswebmessageenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetIsWebMessageEnabled(
        &mut self,
        iswebmessageenabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn AreDefaultScriptDialogsEnabled(
        &mut self,
        aredefaultscriptdialogsenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetAreDefaultScriptDialogsEnabled(
        &mut self,
        aredefaultscriptdialogsenabled : super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()>;
    fn IsStatusBarEnabled(
        &mut self,
        isstatusbarenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetIsStatusBarEnabled(
        &mut self,
        isstatusbarenabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn AreDevToolsEnabled(
        &mut self,
        aredevtoolsenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetAreDevToolsEnabled(
        &mut self,
        aredevtoolsenabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn AreDefaultContextMenusEnabled(
        &mut self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetAreDefaultContextMenusEnabled(
        &mut self,
        enabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn AreHostObjectsAllowed(
        &mut self,
        allowed: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetAreHostObjectsAllowed(
        &mut self,
        allowed: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn IsZoomControlEnabled(
        &mut self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetIsZoomControlEnabled(
        &mut self,
        enabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn IsBuiltInErrorPageEnabled(
        &mut self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetIsBuiltInErrorPageEnabled(
        &mut self,
        enabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2Settings_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Settings_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Settings_Vtbl {
        unsafe extern "system" fn IsScriptEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            isscriptenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsScriptEnabled(::core::mem::transmute_copy(&isscriptenabled))
                .into()
        }
        unsafe extern "system" fn SetIsScriptEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            isscriptenabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetIsScriptEnabled(::core::mem::transmute_copy(&isscriptenabled))
                .into()
        }
        unsafe extern "system" fn IsWebMessageEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            iswebmessageenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsWebMessageEnabled(::core::mem::transmute_copy(&iswebmessageenabled))
                .into()
        }
        unsafe extern "system" fn SetIsWebMessageEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            iswebmessageenabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetIsWebMessageEnabled(::core::mem::transmute_copy(&iswebmessageenabled))
                .into()
        }
        unsafe extern "system" fn AreDefaultScriptDialogsEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            aredefaultscriptdialogsenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .AreDefaultScriptDialogsEnabled(::core::mem::transmute_copy(
                    &aredefaultscriptdialogsenabled,
                ))
                .into()
        }
        unsafe extern "system" fn SetAreDefaultScriptDialogsEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            aredefaultscriptdialogsenabled : super::super::super::super::Windows::Win32::Foundation:: BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetAreDefaultScriptDialogsEnabled(::core::mem::transmute_copy(
                    &aredefaultscriptdialogsenabled,
                ))
                .into()
        }
        unsafe extern "system" fn IsStatusBarEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            isstatusbarenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsStatusBarEnabled(::core::mem::transmute_copy(&isstatusbarenabled))
                .into()
        }
        unsafe extern "system" fn SetIsStatusBarEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            isstatusbarenabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetIsStatusBarEnabled(::core::mem::transmute_copy(&isstatusbarenabled))
                .into()
        }
        unsafe extern "system" fn AreDevToolsEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            aredevtoolsenabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .AreDevToolsEnabled(::core::mem::transmute_copy(&aredevtoolsenabled))
                .into()
        }
        unsafe extern "system" fn SetAreDevToolsEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            aredevtoolsenabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetAreDevToolsEnabled(::core::mem::transmute_copy(&aredevtoolsenabled))
                .into()
        }
        unsafe extern "system" fn AreDefaultContextMenusEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .AreDefaultContextMenusEnabled(::core::mem::transmute_copy(&enabled))
                .into()
        }
        unsafe extern "system" fn SetAreDefaultContextMenusEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            enabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetAreDefaultContextMenusEnabled(::core::mem::transmute_copy(&enabled))
                .into()
        }
        unsafe extern "system" fn AreHostObjectsAllowed<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            allowed: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .AreHostObjectsAllowed(::core::mem::transmute_copy(&allowed))
                .into()
        }
        unsafe extern "system" fn SetAreHostObjectsAllowed<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            allowed: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetAreHostObjectsAllowed(::core::mem::transmute_copy(&allowed))
                .into()
        }
        unsafe extern "system" fn IsZoomControlEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsZoomControlEnabled(::core::mem::transmute_copy(&enabled))
                .into()
        }
        unsafe extern "system" fn SetIsZoomControlEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            enabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetIsZoomControlEnabled(::core::mem::transmute_copy(&enabled))
                .into()
        }
        unsafe extern "system" fn IsBuiltInErrorPageEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsBuiltInErrorPageEnabled(::core::mem::transmute_copy(&enabled))
                .into()
        }
        unsafe extern "system" fn SetIsBuiltInErrorPageEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            enabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetIsBuiltInErrorPageEnabled(::core::mem::transmute_copy(&enabled))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            IsScriptEnabled: IsScriptEnabled::<Identity, Impl, OFFSET>,
            SetIsScriptEnabled: SetIsScriptEnabled::<Identity, Impl, OFFSET>,
            IsWebMessageEnabled: IsWebMessageEnabled::<Identity, Impl, OFFSET>,
            SetIsWebMessageEnabled: SetIsWebMessageEnabled::<Identity, Impl, OFFSET>,
            AreDefaultScriptDialogsEnabled: AreDefaultScriptDialogsEnabled::<Identity, Impl, OFFSET>,
            SetAreDefaultScriptDialogsEnabled: SetAreDefaultScriptDialogsEnabled::<
                Identity,
                Impl,
                OFFSET,
            >,
            IsStatusBarEnabled: IsStatusBarEnabled::<Identity, Impl, OFFSET>,
            SetIsStatusBarEnabled: SetIsStatusBarEnabled::<Identity, Impl, OFFSET>,
            AreDevToolsEnabled: AreDevToolsEnabled::<Identity, Impl, OFFSET>,
            SetAreDevToolsEnabled: SetAreDevToolsEnabled::<Identity, Impl, OFFSET>,
            AreDefaultContextMenusEnabled: AreDefaultContextMenusEnabled::<Identity, Impl, OFFSET>,
            SetAreDefaultContextMenusEnabled: SetAreDefaultContextMenusEnabled::<
                Identity,
                Impl,
                OFFSET,
            >,
            AreHostObjectsAllowed: AreHostObjectsAllowed::<Identity, Impl, OFFSET>,
            SetAreHostObjectsAllowed: SetAreHostObjectsAllowed::<Identity, Impl, OFFSET>,
            IsZoomControlEnabled: IsZoomControlEnabled::<Identity, Impl, OFFSET>,
            SetIsZoomControlEnabled: SetIsZoomControlEnabled::<Identity, Impl, OFFSET>,
            IsBuiltInErrorPageEnabled: IsBuiltInErrorPageEnabled::<Identity, Impl, OFFSET>,
            SetIsBuiltInErrorPageEnabled: SetIsBuiltInErrorPageEnabled::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Settings as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Settings2_Impl: Sized + ICoreWebView2Settings_Impl {
    fn UserAgent(
        &mut self,
        useragent: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn SetUserAgent(
        &mut self,
        useragent: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2Settings2_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Settings2_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Settings2_Vtbl {
        unsafe extern "system" fn UserAgent<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            useragent: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .UserAgent(::core::mem::transmute_copy(&useragent))
                .into()
        }
        unsafe extern "system" fn SetUserAgent<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            useragent: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetUserAgent(::core::mem::transmute_copy(&useragent))
                .into()
        }
        Self {
            base: ICoreWebView2Settings_Vtbl::new::<Identity, Impl, OFFSET>(),
            UserAgent: UserAgent::<Identity, Impl, OFFSET>,
            SetUserAgent: SetUserAgent::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Settings2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Settings3_Impl:
    Sized + ICoreWebView2Settings_Impl + ICoreWebView2Settings2_Impl
{
    fn AreBrowserAcceleratorKeysEnabled(
        &mut self,
        arebrowseracceleratorkeysenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetAreBrowserAcceleratorKeysEnabled(
        &mut self,
        arebrowseracceleratorkeysenabled : super::super::super::super::Windows::Win32::Foundation:: BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2Settings3_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Settings3_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Settings3_Vtbl {
        unsafe extern "system" fn AreBrowserAcceleratorKeysEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            arebrowseracceleratorkeysenabled : * mut super::super::super::super::Windows::Win32::Foundation:: BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .AreBrowserAcceleratorKeysEnabled(::core::mem::transmute_copy(
                    &arebrowseracceleratorkeysenabled,
                ))
                .into()
        }
        unsafe extern "system" fn SetAreBrowserAcceleratorKeysEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            arebrowseracceleratorkeysenabled : super::super::super::super::Windows::Win32::Foundation:: BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetAreBrowserAcceleratorKeysEnabled(::core::mem::transmute_copy(
                    &arebrowseracceleratorkeysenabled,
                ))
                .into()
        }
        Self {
            base: ICoreWebView2Settings2_Vtbl::new::<Identity, Impl, OFFSET>(),
            AreBrowserAcceleratorKeysEnabled: AreBrowserAcceleratorKeysEnabled::<
                Identity,
                Impl,
                OFFSET,
            >,
            SetAreBrowserAcceleratorKeysEnabled: SetAreBrowserAcceleratorKeysEnabled::<
                Identity,
                Impl,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Settings3 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings2 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Settings4_Impl:
    Sized + ICoreWebView2Settings_Impl + ICoreWebView2Settings2_Impl + ICoreWebView2Settings3_Impl
{
    fn IsPasswordAutosaveEnabled(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetIsPasswordAutosaveEnabled(
        &mut self,
        value: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn IsGeneralAutofillEnabled(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetIsGeneralAutofillEnabled(
        &mut self,
        value: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2Settings4_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Settings4_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Settings4_Vtbl {
        unsafe extern "system" fn IsPasswordAutosaveEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings4_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsPasswordAutosaveEnabled(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn SetIsPasswordAutosaveEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings4_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetIsPasswordAutosaveEnabled(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn IsGeneralAutofillEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings4_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsGeneralAutofillEnabled(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn SetIsGeneralAutofillEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings4_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetIsGeneralAutofillEnabled(::core::mem::transmute_copy(&value))
                .into()
        }
        Self {
            base: ICoreWebView2Settings3_Vtbl::new::<Identity, Impl, OFFSET>(),
            IsPasswordAutosaveEnabled: IsPasswordAutosaveEnabled::<Identity, Impl, OFFSET>,
            SetIsPasswordAutosaveEnabled: SetIsPasswordAutosaveEnabled::<Identity, Impl, OFFSET>,
            IsGeneralAutofillEnabled: IsGeneralAutofillEnabled::<Identity, Impl, OFFSET>,
            SetIsGeneralAutofillEnabled: SetIsGeneralAutofillEnabled::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Settings4 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings3 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Settings5_Impl:
    Sized
    + ICoreWebView2Settings_Impl
    + ICoreWebView2Settings2_Impl
    + ICoreWebView2Settings3_Impl
    + ICoreWebView2Settings4_Impl
{
    fn IsPinchZoomEnabled(
        &mut self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetIsPinchZoomEnabled(
        &mut self,
        enabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2Settings5_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Settings5_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Settings5_Vtbl {
        unsafe extern "system" fn IsPinchZoomEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings5_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsPinchZoomEnabled(::core::mem::transmute_copy(&enabled))
                .into()
        }
        unsafe extern "system" fn SetIsPinchZoomEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings5_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            enabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetIsPinchZoomEnabled(::core::mem::transmute_copy(&enabled))
                .into()
        }
        Self {
            base: ICoreWebView2Settings4_Vtbl::new::<Identity, Impl, OFFSET>(),
            IsPinchZoomEnabled: IsPinchZoomEnabled::<Identity, Impl, OFFSET>,
            SetIsPinchZoomEnabled: SetIsPinchZoomEnabled::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Settings5 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings3 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings4 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2Settings6_Impl:
    Sized
    + ICoreWebView2Settings_Impl
    + ICoreWebView2Settings2_Impl
    + ICoreWebView2Settings3_Impl
    + ICoreWebView2Settings4_Impl
    + ICoreWebView2Settings5_Impl
{
    fn IsSwipeNavigationEnabled(
        &mut self,
        enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetIsSwipeNavigationEnabled(
        &mut self,
        enabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2Settings6_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2Settings6_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2Settings6_Vtbl {
        unsafe extern "system" fn IsSwipeNavigationEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings6_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            enabled: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsSwipeNavigationEnabled(::core::mem::transmute_copy(&enabled))
                .into()
        }
        unsafe extern "system" fn SetIsSwipeNavigationEnabled<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2Settings6_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            enabled: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetIsSwipeNavigationEnabled(::core::mem::transmute_copy(&enabled))
                .into()
        }
        Self {
            base: ICoreWebView2Settings5_Vtbl::new::<Identity, Impl, OFFSET>(),
            IsSwipeNavigationEnabled: IsSwipeNavigationEnabled::<Identity, Impl, OFFSET>,
            SetIsSwipeNavigationEnabled: SetIsSwipeNavigationEnabled::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2Settings6 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings3 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings4 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2Settings5 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2SourceChangedEventArgs_Impl: Sized {
    fn IsNewDocument(
        &mut self,
        isnewdocument: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2SourceChangedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2SourceChangedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2SourceChangedEventArgs_Vtbl {
        unsafe extern "system" fn IsNewDocument<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2SourceChangedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            isnewdocument: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsNewDocument(::core::mem::transmute_copy(&isnewdocument))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            IsNewDocument: IsNewDocument::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2SourceChangedEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2SourceChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2SourceChangedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2SourceChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2SourceChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2SourceChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2SourceChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2SourceChangedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2StateChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2DownloadOperation>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2StateChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2StateChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2StateChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2StateChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2StateChangedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2StringCollection_Impl: Sized {
    fn Count(&mut self, value: *mut u32) -> ::windows::core::Result<()>;
    fn GetValueAtIndex(
        &mut self,
        index: u32,
        value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2StringCollection_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2StringCollection_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2StringCollection_Vtbl {
        unsafe extern "system" fn Count<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2StringCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Count(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn GetValueAtIndex<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2StringCollection_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            index: u32,
            value: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .GetValueAtIndex(
                    ::core::mem::transmute_copy(&index),
                    ::core::mem::transmute_copy(&value),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Count: Count::<Identity, Impl, OFFSET>,
            GetValueAtIndex: GetValueAtIndex::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2StringCollection as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2TrySuspendCompletedHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        errorcode: ::windows::core::HRESULT,
        issuccessful: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2TrySuspendCompletedHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2TrySuspendCompletedHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2TrySuspendCompletedHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2TrySuspendCompletedHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            errorcode: ::windows::core::HRESULT,
            issuccessful: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute_copy(&errorcode),
                    ::core::mem::transmute_copy(&issuccessful),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2TrySuspendCompletedHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2WebMessageReceivedEventArgs_Impl: Sized {
    fn Source(
        &mut self,
        source: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn WebMessageAsJson(
        &mut self,
        webmessageasjson: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn TryGetWebMessageAsString(
        &mut self,
        webmessageasstring: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2WebMessageReceivedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2WebMessageReceivedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2WebMessageReceivedEventArgs_Vtbl {
        unsafe extern "system" fn Source<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebMessageReceivedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            source: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Source(::core::mem::transmute_copy(&source)).into()
        }
        unsafe extern "system" fn WebMessageAsJson<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebMessageReceivedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            webmessageasjson: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .WebMessageAsJson(::core::mem::transmute_copy(&webmessageasjson))
                .into()
        }
        unsafe extern "system" fn TryGetWebMessageAsString<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebMessageReceivedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            webmessageasstring: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .TryGetWebMessageAsString(::core::mem::transmute_copy(&webmessageasstring))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Source: Source::<Identity, Impl, OFFSET>,
            WebMessageAsJson: WebMessageAsJson::<Identity, Impl, OFFSET>,
            TryGetWebMessageAsString: TryGetWebMessageAsString::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2WebMessageReceivedEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2WebMessageReceivedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2WebMessageReceivedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2WebMessageReceivedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2WebMessageReceivedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2WebMessageReceivedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebMessageReceivedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2WebMessageReceivedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2WebResourceRequest_Impl: Sized {
    fn Uri(
        &mut self,
        uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn SetUri(
        &mut self,
        uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Method(
        &mut self,
        method: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn SetMethod(
        &mut self,
        method: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn Content(
        &mut self,
    ) -> ::windows::core::Result<super::super::super::super::Windows::Win32::System::Com::IStream>;
    fn SetContent(
        &mut self,
        content: &::core::option::Option<
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
    ) -> ::windows::core::Result<()>;
    fn Headers(&mut self) -> ::windows::core::Result<ICoreWebView2HttpRequestHeaders>;
}
impl ICoreWebView2WebResourceRequest_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2WebResourceRequest_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2WebResourceRequest_Vtbl {
        unsafe extern "system" fn Uri<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            uri: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Uri(::core::mem::transmute_copy(&uri)).into()
        }
        unsafe extern "system" fn SetUri<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            uri: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).SetUri(::core::mem::transmute_copy(&uri)).into()
        }
        unsafe extern "system" fn Method<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            method: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Method(::core::mem::transmute_copy(&method)).into()
        }
        unsafe extern "system" fn SetMethod<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            method: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetMethod(::core::mem::transmute_copy(&method))
                .into()
        }
        unsafe extern "system" fn Content<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            content: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).Content() {
                ::core::result::Result::Ok(ok__) => {
                    *content = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetContent<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            content: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).SetContent(::core::mem::transmute(&content)).into()
        }
        unsafe extern "system" fn Headers<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceRequest_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            headers: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).Headers() {
                ::core::result::Result::Ok(ok__) => {
                    *headers = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Uri: Uri::<Identity, Impl, OFFSET>,
            SetUri: SetUri::<Identity, Impl, OFFSET>,
            Method: Method::<Identity, Impl, OFFSET>,
            SetMethod: SetMethod::<Identity, Impl, OFFSET>,
            Content: Content::<Identity, Impl, OFFSET>,
            SetContent: SetContent::<Identity, Impl, OFFSET>,
            Headers: Headers::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2WebResourceRequest as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2WebResourceRequestedEventArgs_Impl: Sized {
    fn Request(&mut self) -> ::windows::core::Result<ICoreWebView2WebResourceRequest>;
    fn Response(&mut self) -> ::windows::core::Result<ICoreWebView2WebResourceResponse>;
    fn SetResponse(
        &mut self,
        response: &::core::option::Option<ICoreWebView2WebResourceResponse>,
    ) -> ::windows::core::Result<()>;
    fn GetDeferral(&mut self) -> ::windows::core::Result<ICoreWebView2Deferral>;
    fn ResourceContext(
        &mut self,
        context: *mut COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2WebResourceRequestedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2WebResourceRequestedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2WebResourceRequestedEventArgs_Vtbl {
        unsafe extern "system" fn Request<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            request: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).Request() {
                ::core::result::Result::Ok(ok__) => {
                    *request = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Response<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            response: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).Response() {
                ::core::result::Result::Ok(ok__) => {
                    *response = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetResponse<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            response: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetResponse(::core::mem::transmute(&response))
                .into()
        }
        unsafe extern "system" fn GetDeferral<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            deferral: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).GetDeferral() {
                ::core::result::Result::Ok(ok__) => {
                    *deferral = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn ResourceContext<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceRequestedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            context: *mut COREWEBVIEW2_WEB_RESOURCE_CONTEXT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ResourceContext(::core::mem::transmute_copy(&context))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Request: Request::<Identity, Impl, OFFSET>,
            Response: Response::<Identity, Impl, OFFSET>,
            SetResponse: SetResponse::<Identity, Impl, OFFSET>,
            GetDeferral: GetDeferral::<Identity, Impl, OFFSET>,
            ResourceContext: ResourceContext::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2WebResourceRequestedEventArgs as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2WebResourceRequestedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2WebResourceRequestedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2WebResourceRequestedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2WebResourceRequestedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2WebResourceRequestedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceRequestedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2WebResourceRequestedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2WebResourceResponse_Impl: Sized {
    fn Content(
        &mut self,
    ) -> ::windows::core::Result<super::super::super::super::Windows::Win32::System::Com::IStream>;
    fn SetContent(
        &mut self,
        content: &::core::option::Option<
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
    ) -> ::windows::core::Result<()>;
    fn Headers(&mut self) -> ::windows::core::Result<ICoreWebView2HttpResponseHeaders>;
    fn StatusCode(&mut self, statuscode: *mut i32) -> ::windows::core::Result<()>;
    fn SetStatusCode(&mut self, statuscode: i32) -> ::windows::core::Result<()>;
    fn ReasonPhrase(
        &mut self,
        reasonphrase: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn SetReasonPhrase(
        &mut self,
        reasonphrase: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2WebResourceResponse_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2WebResourceResponse_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2WebResourceResponse_Vtbl {
        unsafe extern "system" fn Content<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            content: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).Content() {
                ::core::result::Result::Ok(ok__) => {
                    *content = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn SetContent<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            content: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).SetContent(::core::mem::transmute(&content)).into()
        }
        unsafe extern "system" fn Headers<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            headers: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).Headers() {
                ::core::result::Result::Ok(ok__) => {
                    *headers = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StatusCode<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            statuscode: *mut i32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .StatusCode(::core::mem::transmute_copy(&statuscode))
                .into()
        }
        unsafe extern "system" fn SetStatusCode<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            statuscode: i32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetStatusCode(::core::mem::transmute_copy(&statuscode))
                .into()
        }
        unsafe extern "system" fn ReasonPhrase<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            reasonphrase: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ReasonPhrase(::core::mem::transmute_copy(&reasonphrase))
                .into()
        }
        unsafe extern "system" fn SetReasonPhrase<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponse_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            reasonphrase: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetReasonPhrase(::core::mem::transmute_copy(&reasonphrase))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Content: Content::<Identity, Impl, OFFSET>,
            SetContent: SetContent::<Identity, Impl, OFFSET>,
            Headers: Headers::<Identity, Impl, OFFSET>,
            StatusCode: StatusCode::<Identity, Impl, OFFSET>,
            SetStatusCode: SetStatusCode::<Identity, Impl, OFFSET>,
            ReasonPhrase: ReasonPhrase::<Identity, Impl, OFFSET>,
            SetReasonPhrase: SetReasonPhrase::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2WebResourceResponse as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2WebResourceResponseReceivedEventArgs_Impl: Sized {
    fn Request(&mut self) -> ::windows::core::Result<ICoreWebView2WebResourceRequest>;
    fn Response(&mut self) -> ::windows::core::Result<ICoreWebView2WebResourceResponseView>;
}
impl ICoreWebView2WebResourceResponseReceivedEventArgs_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2WebResourceResponseReceivedEventArgs_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2WebResourceResponseReceivedEventArgs_Vtbl {
        unsafe extern "system" fn Request<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponseReceivedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            request: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).Request() {
                ::core::result::Result::Ok(ok__) => {
                    *request = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Response<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponseReceivedEventArgs_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            response: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).Response() {
                ::core::result::Result::Ok(ok__) => {
                    *response = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Request: Request::<Identity, Impl, OFFSET>,
            Response: Response::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2WebResourceResponseReceivedEventArgs < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2WebResourceResponseReceivedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<ICoreWebView2WebResourceResponseReceivedEventArgs>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2WebResourceResponseReceivedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2WebResourceResponseReceivedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2WebResourceResponseReceivedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponseReceivedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2WebResourceResponseReceivedEventHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2WebResourceResponseView_Impl: Sized {
    fn Headers(&mut self) -> ::windows::core::Result<ICoreWebView2HttpResponseHeaders>;
    fn StatusCode(&mut self, statuscode: *mut i32) -> ::windows::core::Result<()>;
    fn ReasonPhrase(
        &mut self,
        reasonphrase: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
    fn GetContent(
        &mut self,
        handler: &::core::option::Option<
            ICoreWebView2WebResourceResponseViewGetContentCompletedHandler,
        >,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2WebResourceResponseView_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2WebResourceResponseView_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2WebResourceResponseView_Vtbl {
        unsafe extern "system" fn Headers<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponseView_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            headers: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).Headers() {
                ::core::result::Result::Ok(ok__) => {
                    *headers = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn StatusCode<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponseView_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            statuscode: *mut i32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .StatusCode(::core::mem::transmute_copy(&statuscode))
                .into()
        }
        unsafe extern "system" fn ReasonPhrase<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponseView_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            reasonphrase: *mut super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ReasonPhrase(::core::mem::transmute_copy(&reasonphrase))
                .into()
        }
        unsafe extern "system" fn GetContent<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponseView_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            handler: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).GetContent(::core::mem::transmute(&handler)).into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Headers: Headers::<Identity, Impl, OFFSET>,
            StatusCode: StatusCode::<Identity, Impl, OFFSET>,
            ReasonPhrase: ReasonPhrase::<Identity, Impl, OFFSET>,
            GetContent: GetContent::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2WebResourceResponseView as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        errorcode: ::windows::core::HRESULT,
        content: &::core::option::Option<
            super::super::super::super::Windows::Win32::System::Com::IStream,
        >,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WebResourceResponseViewGetContentCompletedHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            errorcode: ::windows::core::HRESULT,
            content: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute_copy(&errorcode),
                    ::core::mem::transmute(&content),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == & < ICoreWebView2WebResourceResponseViewGetContentCompletedHandler < > as :: windows :: core :: Interface > :: IID
    }
}
pub trait ICoreWebView2WindowCloseRequestedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2WindowCloseRequestedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2WindowCloseRequestedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2WindowCloseRequestedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WindowCloseRequestedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2WindowCloseRequestedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2WindowFeatures_Impl: Sized {
    fn HasPosition(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn HasSize(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn Left(&mut self, value: *mut u32) -> ::windows::core::Result<()>;
    fn Top(&mut self, value: *mut u32) -> ::windows::core::Result<()>;
    fn Height(&mut self, value: *mut u32) -> ::windows::core::Result<()>;
    fn Width(&mut self, value: *mut u32) -> ::windows::core::Result<()>;
    fn ShouldDisplayMenuBar(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn ShouldDisplayStatus(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn ShouldDisplayToolbar(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn ShouldDisplayScrollBars(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2WindowFeatures_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2WindowFeatures_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2WindowFeatures_Vtbl {
        unsafe extern "system" fn HasPosition<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .HasPosition(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn HasSize<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).HasSize(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn Left<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Left(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn Top<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Top(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn Height<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Height(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn Width<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut u32,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Width(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn ShouldDisplayMenuBar<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ShouldDisplayMenuBar(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn ShouldDisplayStatus<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ShouldDisplayStatus(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn ShouldDisplayToolbar<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ShouldDisplayToolbar(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn ShouldDisplayScrollBars<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2WindowFeatures_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ShouldDisplayScrollBars(::core::mem::transmute_copy(&value))
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            HasPosition: HasPosition::<Identity, Impl, OFFSET>,
            HasSize: HasSize::<Identity, Impl, OFFSET>,
            Left: Left::<Identity, Impl, OFFSET>,
            Top: Top::<Identity, Impl, OFFSET>,
            Height: Height::<Identity, Impl, OFFSET>,
            Width: Width::<Identity, Impl, OFFSET>,
            ShouldDisplayMenuBar: ShouldDisplayMenuBar::<Identity, Impl, OFFSET>,
            ShouldDisplayStatus: ShouldDisplayStatus::<Identity, Impl, OFFSET>,
            ShouldDisplayToolbar: ShouldDisplayToolbar::<Identity, Impl, OFFSET>,
            ShouldDisplayScrollBars: ShouldDisplayScrollBars::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2WindowFeatures as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2ZoomFactorChangedEventHandler_Impl: Sized {
    fn Invoke(
        &mut self,
        sender: &::core::option::Option<ICoreWebView2Controller>,
        args: &::core::option::Option<::windows::core::IUnknown>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2ZoomFactorChangedEventHandler_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2ZoomFactorChangedEventHandler_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2ZoomFactorChangedEventHandler_Vtbl {
        unsafe extern "system" fn Invoke<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2ZoomFactorChangedEventHandler_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            sender: ::windows::core::RawPtr,
            args: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .Invoke(
                    ::core::mem::transmute(&sender),
                    ::core::mem::transmute(&args),
                )
                .into()
        }
        Self {
            base: ::windows::core::IUnknownVtbl::new::<Identity, OFFSET>(),
            Invoke: Invoke::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2ZoomFactorChangedEventHandler as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2_2_Impl: Sized + ICoreWebView2_Impl {
    fn WebResourceResponseReceived(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2WebResourceResponseReceivedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveWebResourceResponseReceived(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn NavigateWithWebResourceRequest(
        &mut self,
        request: &::core::option::Option<ICoreWebView2WebResourceRequest>,
    ) -> ::windows::core::Result<()>;
    fn DOMContentLoaded(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2DOMContentLoadedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveDOMContentLoaded(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn CookieManager(&mut self) -> ::windows::core::Result<ICoreWebView2CookieManager>;
    fn Environment(&mut self) -> ::windows::core::Result<ICoreWebView2Environment>;
}
impl ICoreWebView2_2_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2_2_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2_2_Vtbl {
        unsafe extern "system" fn WebResourceResponseReceived<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .WebResourceResponseReceived(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveWebResourceResponseReceived<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveWebResourceResponseReceived(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn NavigateWithWebResourceRequest<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            request: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .NavigateWithWebResourceRequest(::core::mem::transmute(&request))
                .into()
        }
        unsafe extern "system" fn DOMContentLoaded<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .DOMContentLoaded(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveDOMContentLoaded<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveDOMContentLoaded(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn CookieManager<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            cookiemanager: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).CookieManager() {
                ::core::result::Result::Ok(ok__) => {
                    *cookiemanager = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        unsafe extern "system" fn Environment<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_2_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            environment: *mut ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            match (*this).Environment() {
                ::core::result::Result::Ok(ok__) => {
                    *environment = ::core::mem::transmute(ok__);
                    ::windows::core::HRESULT(0)
                }
                ::core::result::Result::Err(err) => err.into(),
            }
        }
        Self {
            base: ICoreWebView2_Vtbl::new::<Identity, Impl, OFFSET>(),
            WebResourceResponseReceived: WebResourceResponseReceived::<Identity, Impl, OFFSET>,
            RemoveWebResourceResponseReceived: RemoveWebResourceResponseReceived::<
                Identity,
                Impl,
                OFFSET,
            >,
            NavigateWithWebResourceRequest: NavigateWithWebResourceRequest::<Identity, Impl, OFFSET>,
            DOMContentLoaded: DOMContentLoaded::<Identity, Impl, OFFSET>,
            RemoveDOMContentLoaded: RemoveDOMContentLoaded::<Identity, Impl, OFFSET>,
            CookieManager: CookieManager::<Identity, Impl, OFFSET>,
            Environment: Environment::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2_2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2_3_Impl: Sized + ICoreWebView2_Impl + ICoreWebView2_2_Impl {
    fn TrySuspend(
        &mut self,
        handler: &::core::option::Option<ICoreWebView2TrySuspendCompletedHandler>,
    ) -> ::windows::core::Result<()>;
    fn Resume(&mut self) -> ::windows::core::Result<()>;
    fn IsSuspended(
        &mut self,
        issuspended: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetVirtualHostNameToFolderMapping(
        &mut self,
        hostname: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        folderpath: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        accesskind: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND,
    ) -> ::windows::core::Result<()>;
    fn ClearVirtualHostNameToFolderMapping(
        &mut self,
        hostname: super::super::super::super::Windows::Win32::Foundation::PWSTR,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2_3_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2_3_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2_3_Vtbl {
        unsafe extern "system" fn TrySuspend<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            handler: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).TrySuspend(::core::mem::transmute(&handler)).into()
        }
        unsafe extern "system" fn Resume<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).Resume().into()
        }
        unsafe extern "system" fn IsSuspended<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            issuspended: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsSuspended(::core::mem::transmute_copy(&issuspended))
                .into()
        }
        unsafe extern "system" fn SetVirtualHostNameToFolderMapping<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            hostname: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            folderpath: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            accesskind: COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetVirtualHostNameToFolderMapping(
                    ::core::mem::transmute_copy(&hostname),
                    ::core::mem::transmute_copy(&folderpath),
                    ::core::mem::transmute_copy(&accesskind),
                )
                .into()
        }
        unsafe extern "system" fn ClearVirtualHostNameToFolderMapping<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_3_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            hostname: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ClearVirtualHostNameToFolderMapping(::core::mem::transmute_copy(&hostname))
                .into()
        }
        Self {
            base: ICoreWebView2_2_Vtbl::new::<Identity, Impl, OFFSET>(),
            TrySuspend: TrySuspend::<Identity, Impl, OFFSET>,
            Resume: Resume::<Identity, Impl, OFFSET>,
            IsSuspended: IsSuspended::<Identity, Impl, OFFSET>,
            SetVirtualHostNameToFolderMapping: SetVirtualHostNameToFolderMapping::<
                Identity,
                Impl,
                OFFSET,
            >,
            ClearVirtualHostNameToFolderMapping: ClearVirtualHostNameToFolderMapping::<
                Identity,
                Impl,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2_3 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_2 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2_4_Impl:
    Sized + ICoreWebView2_Impl + ICoreWebView2_2_Impl + ICoreWebView2_3_Impl
{
    fn FrameCreated(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2FrameCreatedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveFrameCreated(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn DownloadStarting(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2DownloadStartingEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveDownloadStarting(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2_4_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2_4_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2_4_Vtbl {
        unsafe extern "system" fn FrameCreated<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_4_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .FrameCreated(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveFrameCreated<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_4_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveFrameCreated(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn DownloadStarting<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_4_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .DownloadStarting(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveDownloadStarting<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_4_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveDownloadStarting(::core::mem::transmute_copy(&token))
                .into()
        }
        Self {
            base: ICoreWebView2_3_Vtbl::new::<Identity, Impl, OFFSET>(),
            FrameCreated: FrameCreated::<Identity, Impl, OFFSET>,
            RemoveFrameCreated: RemoveFrameCreated::<Identity, Impl, OFFSET>,
            DownloadStarting: DownloadStarting::<Identity, Impl, OFFSET>,
            RemoveDownloadStarting: RemoveDownloadStarting::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2_4 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_3 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2_5_Impl:
    Sized + ICoreWebView2_Impl + ICoreWebView2_2_Impl + ICoreWebView2_3_Impl + ICoreWebView2_4_Impl
{
    fn ClientCertificateRequested(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2ClientCertificateRequestedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveClientCertificateRequested(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2_5_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2_5_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2_5_Vtbl {
        unsafe extern "system" fn ClientCertificateRequested<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_5_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .ClientCertificateRequested(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveClientCertificateRequested<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_5_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveClientCertificateRequested(::core::mem::transmute_copy(&token))
                .into()
        }
        Self {
            base: ICoreWebView2_4_Vtbl::new::<Identity, Impl, OFFSET>(),
            ClientCertificateRequested: ClientCertificateRequested::<Identity, Impl, OFFSET>,
            RemoveClientCertificateRequested: RemoveClientCertificateRequested::<
                Identity,
                Impl,
                OFFSET,
            >,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2_5 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_3 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_4 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2_6_Impl:
    Sized
    + ICoreWebView2_Impl
    + ICoreWebView2_2_Impl
    + ICoreWebView2_3_Impl
    + ICoreWebView2_4_Impl
    + ICoreWebView2_5_Impl
{
    fn OpenTaskManagerWindow(&mut self) -> ::windows::core::Result<()>;
}
impl ICoreWebView2_6_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2_6_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2_6_Vtbl {
        unsafe extern "system" fn OpenTaskManagerWindow<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_6_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).OpenTaskManagerWindow().into()
        }
        Self {
            base: ICoreWebView2_5_Vtbl::new::<Identity, Impl, OFFSET>(),
            OpenTaskManagerWindow: OpenTaskManagerWindow::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2_6 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_3 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_4 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_5 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2_7_Impl:
    Sized
    + ICoreWebView2_Impl
    + ICoreWebView2_2_Impl
    + ICoreWebView2_3_Impl
    + ICoreWebView2_4_Impl
    + ICoreWebView2_5_Impl
    + ICoreWebView2_6_Impl
{
    fn PrintToPdf(
        &mut self,
        resultfilepath: super::super::super::super::Windows::Win32::Foundation::PWSTR,
        printsettings: &::core::option::Option<ICoreWebView2PrintSettings>,
        handler: &::core::option::Option<ICoreWebView2PrintToPdfCompletedHandler>,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2_7_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2_7_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2_7_Vtbl {
        unsafe extern "system" fn PrintToPdf<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_7_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            resultfilepath: super::super::super::super::Windows::Win32::Foundation::PWSTR,
            printsettings: ::windows::core::RawPtr,
            handler: ::windows::core::RawPtr,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .PrintToPdf(
                    ::core::mem::transmute_copy(&resultfilepath),
                    ::core::mem::transmute(&printsettings),
                    ::core::mem::transmute(&handler),
                )
                .into()
        }
        Self {
            base: ICoreWebView2_6_Vtbl::new::<Identity, Impl, OFFSET>(),
            PrintToPdf: PrintToPdf::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2_7 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_3 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_4 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_5 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_6 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2_8_Impl:
    Sized
    + ICoreWebView2_Impl
    + ICoreWebView2_2_Impl
    + ICoreWebView2_3_Impl
    + ICoreWebView2_4_Impl
    + ICoreWebView2_5_Impl
    + ICoreWebView2_6_Impl
    + ICoreWebView2_7_Impl
{
    fn IsMutedChanged(
        &mut self,
        eventhandler: &::core::option::Option<ICoreWebView2IsMutedChangedEventHandler>,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveIsMutedChanged(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn IsMuted(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn SetIsMuted(
        &mut self,
        value: super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn IsDocumentPlayingAudioChanged(
        &mut self,
        eventhandler: &::core::option::Option<
            ICoreWebView2IsDocumentPlayingAudioChangedEventHandler,
        >,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveIsDocumentPlayingAudioChanged(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn IsDocumentPlayingAudio(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2_8_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2_8_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2_8_Vtbl {
        unsafe extern "system" fn IsMutedChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_8_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsMutedChanged(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveIsMutedChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_8_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveIsMutedChanged(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn IsMuted<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_8_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).IsMuted(::core::mem::transmute_copy(&value)).into()
        }
        unsafe extern "system" fn SetIsMuted<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_8_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetIsMuted(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn IsDocumentPlayingAudioChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_8_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            eventhandler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsDocumentPlayingAudioChanged(
                    ::core::mem::transmute(&eventhandler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveIsDocumentPlayingAudioChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_8_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveIsDocumentPlayingAudioChanged(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn IsDocumentPlayingAudio<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_8_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsDocumentPlayingAudio(::core::mem::transmute_copy(&value))
                .into()
        }
        Self {
            base: ICoreWebView2_7_Vtbl::new::<Identity, Impl, OFFSET>(),
            IsMutedChanged: IsMutedChanged::<Identity, Impl, OFFSET>,
            RemoveIsMutedChanged: RemoveIsMutedChanged::<Identity, Impl, OFFSET>,
            IsMuted: IsMuted::<Identity, Impl, OFFSET>,
            SetIsMuted: SetIsMuted::<Identity, Impl, OFFSET>,
            IsDocumentPlayingAudioChanged: IsDocumentPlayingAudioChanged::<Identity, Impl, OFFSET>,
            RemoveIsDocumentPlayingAudioChanged: RemoveIsDocumentPlayingAudioChanged::<
                Identity,
                Impl,
                OFFSET,
            >,
            IsDocumentPlayingAudio: IsDocumentPlayingAudio::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2_8 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_3 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_4 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_5 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_6 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_7 as ::windows::core::Interface>::IID
    }
}
pub trait ICoreWebView2_9_Impl:
    Sized
    + ICoreWebView2_Impl
    + ICoreWebView2_2_Impl
    + ICoreWebView2_3_Impl
    + ICoreWebView2_4_Impl
    + ICoreWebView2_5_Impl
    + ICoreWebView2_6_Impl
    + ICoreWebView2_7_Impl
    + ICoreWebView2_8_Impl
{
    fn IsDefaultDownloadDialogOpenChanged(
        &mut self,
        handler: &::core::option::Option<
            ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler,
        >,
        token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn RemoveIsDefaultDownloadDialogOpenChanged(
        &mut self,
        token: &super::super::super::super::Windows::Win32::System::WinRT::EventRegistrationToken,
    ) -> ::windows::core::Result<()>;
    fn IsDefaultDownloadDialogOpen(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
    ) -> ::windows::core::Result<()>;
    fn OpenDefaultDownloadDialog(&mut self) -> ::windows::core::Result<()>;
    fn CloseDefaultDownloadDialog(&mut self) -> ::windows::core::Result<()>;
    fn DefaultDownloadDialogCornerAlignment(
        &mut self,
        value: *mut COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT,
    ) -> ::windows::core::Result<()>;
    fn SetDefaultDownloadDialogCornerAlignment(
        &mut self,
        value: COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT,
    ) -> ::windows::core::Result<()>;
    fn DefaultDownloadDialogMargin(
        &mut self,
        value: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()>;
    fn SetDefaultDownloadDialogMargin(
        &mut self,
        value: &super::super::super::super::Windows::Win32::Foundation::POINT,
    ) -> ::windows::core::Result<()>;
}
impl ICoreWebView2_9_Vtbl {
    pub const fn new<
        Identity: ::windows::core::IUnknownImpl,
        Impl: ICoreWebView2_9_Impl,
        const OFFSET: isize,
    >() -> ICoreWebView2_9_Vtbl {
        unsafe extern "system" fn IsDefaultDownloadDialogOpenChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            handler: ::windows::core::RawPtr,
            token : * mut super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsDefaultDownloadDialogOpenChanged(
                    ::core::mem::transmute(&handler),
                    ::core::mem::transmute_copy(&token),
                )
                .into()
        }
        unsafe extern "system" fn RemoveIsDefaultDownloadDialogOpenChanged<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            token : super::super::super::super::Windows::Win32::System::WinRT:: EventRegistrationToken,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .RemoveIsDefaultDownloadDialogOpenChanged(::core::mem::transmute_copy(&token))
                .into()
        }
        unsafe extern "system" fn IsDefaultDownloadDialogOpen<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::BOOL,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .IsDefaultDownloadDialogOpen(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn OpenDefaultDownloadDialog<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).OpenDefaultDownloadDialog().into()
        }
        unsafe extern "system" fn CloseDefaultDownloadDialog<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this).CloseDefaultDownloadDialog().into()
        }
        unsafe extern "system" fn DefaultDownloadDialogCornerAlignment<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .DefaultDownloadDialogCornerAlignment(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn SetDefaultDownloadDialogCornerAlignment<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetDefaultDownloadDialogCornerAlignment(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn DefaultDownloadDialogMargin<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: *mut super::super::super::super::Windows::Win32::Foundation::POINT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .DefaultDownloadDialogMargin(::core::mem::transmute_copy(&value))
                .into()
        }
        unsafe extern "system" fn SetDefaultDownloadDialogMargin<
            Identity: ::windows::core::IUnknownImpl,
            Impl: ICoreWebView2_9_Impl,
            const OFFSET: isize,
        >(
            this: *mut ::core::ffi::c_void,
            value: super::super::super::super::Windows::Win32::Foundation::POINT,
        ) -> ::windows::core::HRESULT {
            let this = (this as *mut ::windows::core::RawPtr).offset(OFFSET) as *mut Identity;
            let this = (*this).get_impl() as *mut Impl;
            (*this)
                .SetDefaultDownloadDialogMargin(::core::mem::transmute_copy(&value))
                .into()
        }
        Self {
            base: ICoreWebView2_8_Vtbl::new::<Identity, Impl, OFFSET>(),
            IsDefaultDownloadDialogOpenChanged: IsDefaultDownloadDialogOpenChanged::<
                Identity,
                Impl,
                OFFSET,
            >,
            RemoveIsDefaultDownloadDialogOpenChanged: RemoveIsDefaultDownloadDialogOpenChanged::<
                Identity,
                Impl,
                OFFSET,
            >,
            IsDefaultDownloadDialogOpen: IsDefaultDownloadDialogOpen::<Identity, Impl, OFFSET>,
            OpenDefaultDownloadDialog: OpenDefaultDownloadDialog::<Identity, Impl, OFFSET>,
            CloseDefaultDownloadDialog: CloseDefaultDownloadDialog::<Identity, Impl, OFFSET>,
            DefaultDownloadDialogCornerAlignment: DefaultDownloadDialogCornerAlignment::<
                Identity,
                Impl,
                OFFSET,
            >,
            SetDefaultDownloadDialogCornerAlignment: SetDefaultDownloadDialogCornerAlignment::<
                Identity,
                Impl,
                OFFSET,
            >,
            DefaultDownloadDialogMargin: DefaultDownloadDialogMargin::<Identity, Impl, OFFSET>,
            SetDefaultDownloadDialogMargin: SetDefaultDownloadDialogMargin::<Identity, Impl, OFFSET>,
        }
    }
    pub fn matches(iid: &windows::core::GUID) -> bool {
        iid == &<ICoreWebView2_9 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_2 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_3 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_4 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_5 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_6 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_7 as ::windows::core::Interface>::IID
            || iid == &<ICoreWebView2_8 as ::windows::core::Interface>::IID
    }
}
